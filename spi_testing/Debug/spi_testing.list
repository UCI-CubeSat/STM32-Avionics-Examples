
spi_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e8  080052e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080052e8  080052e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e8  080052e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e0  20000010  08005300  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019f0  08005300  000219f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a789  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003198  00000000  00000000  0003a7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0003d968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000309c  00000000  00000000  00040260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bb1  00000000  00000000  000432fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa116  00000000  00000000  00058ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152fc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d8  00000000  00000000  00153018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005210 	.word	0x08005210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005210 	.word	0x08005210

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 faa7 	bl	8000726 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f826 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8ae 	bl	800033c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001e0:	f000 f868 	bl	80002b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e4:	f002 fa8a 	bl	80026fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BlinkTask */
  BlinkTaskHandle = osThreadNew(Task_Blink, NULL, &BlinkTask_attributes);
 80001e8:	4a09      	ldr	r2, [pc, #36]	; (8000210 <main+0x40>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <main+0x44>)
 80001ee:	f002 facf 	bl	8002790 <osThreadNew>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <main+0x48>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* creation of SPI_Manager */
  SPI_ManagerHandle = osThreadNew(Task_SPI, NULL, &SPI_Manager_attributes);
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <main+0x4c>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x50>)
 80001fe:	f002 fac7 	bl	8002790 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0x54>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000208:	f002 fa9c 	bl	8002744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x3c>
 800020e:	bf00      	nop
 8000210:	08005258 	.word	0x08005258
 8000214:	080003e5 	.word	0x080003e5
 8000218:	200018f4 	.word	0x200018f4
 800021c:	0800527c 	.word	0x0800527c
 8000220:	08000401 	.word	0x08000401
 8000224:	200018f8 	.word	0x200018f8

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b096      	sub	sp, #88	; 0x58
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	2244      	movs	r2, #68	; 0x44
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f004 ffe2 	bl	8005200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024a:	2310      	movs	r3, #16
 800024c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000256:	2360      	movs	r3, #96	; 0x60
 8000258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fdba 	bl	8000ddc <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800026e:	f000 f8fb 	bl	8000468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f98c 	bl	80015a8 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000296:	f000 f8e7 	bl	8000468 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800029a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029e:	f000 fd47 	bl	8000d30 <HAL_PWREx_ControlVoltageScaling>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002a8:	f000 f8de 	bl	8000468 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3758      	adds	r7, #88	; 0x58
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  // By default, CS pin should be high (thisis for SPI1).
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2140      	movs	r1, #64	; 0x40
 80002bc:	481c      	ldr	r0, [pc, #112]	; (8000330 <MX_SPI1_Init+0x7c>)
 80002be:	f000 fcf7 	bl	8000cb0 <HAL_GPIO_WritePin>

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MX_SPI1_Init+0x80>)
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <MX_SPI1_Init+0x84>)
 80002c6:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_SPI1_Init+0x80>)
 80002ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002ce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <MX_SPI1_Init+0x80>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80002d6:	4b17      	ldr	r3, [pc, #92]	; (8000334 <MX_SPI1_Init+0x80>)
 80002d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80002dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <MX_SPI1_Init+0x80>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MX_SPI1_Init+0x80>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <MX_SPI1_Init+0x80>)
 80002ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_SPI1_Init+0x80>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_SPI1_Init+0x80>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <MX_SPI1_Init+0x80>)
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_SPI1_Init+0x80>)
 8000306:	2200      	movs	r2, #0
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <MX_SPI1_Init+0x80>)
 800030c:	2207      	movs	r2, #7
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_SPI1_Init+0x80>)
 8000312:	2200      	movs	r2, #0
 8000314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <MX_SPI1_Init+0x80>)
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_SPI1_Init+0x80>)
 800031e:	f001 fb65 	bl	80019ec <HAL_SPI_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_SPI1_Init+0x78>
  {
    Error_Handler();
 8000328:	f000 f89e 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	48000400 	.word	0x48000400
 8000334:	200018fc 	.word	0x200018fc
 8000338:	40013000 	.word	0x40013000

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b22      	ldr	r3, [pc, #136]	; (80003dc <MX_GPIO_Init+0xa0>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	4a21      	ldr	r2, [pc, #132]	; (80003dc <MX_GPIO_Init+0xa0>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035e:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_GPIO_Init+0xa0>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_GPIO_Init+0xa0>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	4a1b      	ldr	r2, [pc, #108]	; (80003dc <MX_GPIO_Init+0xa0>)
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000376:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_GPIO_Init+0xa0>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	f003 0302 	and.w	r3, r3, #2
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2120      	movs	r1, #32
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f000 fc91 	bl	8000cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2140      	movs	r1, #64	; 0x40
 8000392:	4813      	ldr	r0, [pc, #76]	; (80003e0 <MX_GPIO_Init+0xa4>)
 8000394:	f000 fc8c 	bl	8000cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000398:	2320      	movs	r3, #32
 800039a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a8:	f107 030c 	add.w	r3, r7, #12
 80003ac:	4619      	mov	r1, r3
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f000 fad3 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80003b6:	2340      	movs	r3, #64	; 0x40
 80003b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	4619      	mov	r1, r3
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_GPIO_Init+0xa4>)
 80003ce:	f000 fac5 	bl	800095c <HAL_GPIO_Init>

}
 80003d2:	bf00      	nop
 80003d4:	3720      	adds	r7, #32
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000
 80003e0:	48000400 	.word	0x48000400

080003e4 <Task_Blink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Blink */
void Task_Blink(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003ec:	2120      	movs	r1, #32
 80003ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f2:	f000 fc75 	bl	8000ce0 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80003f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fa:	f002 fa5b 	bl	80028b4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003fe:	e7f5      	b.n	80003ec <Task_Blink+0x8>

08000400 <Task_SPI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_SPI */
void Task_SPI(void *argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_SPI */
	uint8_t txData[4] = { 1, 2, 5, 3 };
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <Task_SPI+0x38>)
 800040a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
  	// Send message over SPI1
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2140      	movs	r1, #64	; 0x40
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <Task_SPI+0x3c>)
 8000412:	f000 fc4d 	bl	8000cb0 <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(&hspi1, txData, 4, HAL_MAX_DELAY);
 8000416:	f107 010c 	add.w	r1, r7, #12
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	2204      	movs	r2, #4
 8000420:	4807      	ldr	r0, [pc, #28]	; (8000440 <Task_SPI+0x40>)
 8000422:	f001 fb86 	bl	8001b32 <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2140      	movs	r1, #64	; 0x40
 800042a:	4804      	ldr	r0, [pc, #16]	; (800043c <Task_SPI+0x3c>)
 800042c:	f000 fc40 	bl	8000cb0 <HAL_GPIO_WritePin>
	  osDelay(10);
 8000430:	200a      	movs	r0, #10
 8000432:	f002 fa3f 	bl	80028b4 <osDelay>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000436:	e7e9      	b.n	800040c <Task_SPI+0xc>
 8000438:	03050201 	.word	0x03050201
 800043c:	48000400 	.word	0x48000400
 8000440:	200018fc 	.word	0x200018fc

08000444 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d101      	bne.n	800045a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000456:	f000 f97f 	bl	8000758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40001000 	.word	0x40001000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <HAL_MspInit+0x4c>)
 800047c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <HAL_MspInit+0x4c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6613      	str	r3, [r2, #96]	; 0x60
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <HAL_MspInit+0x4c>)
 8000488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <HAL_MspInit+0x4c>)
 8000494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <HAL_MspInit+0x4c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	6593      	str	r3, [r2, #88]	; 0x58
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <HAL_MspInit+0x4c>)
 80004a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	210f      	movs	r1, #15
 80004ae:	f06f 0001 	mvn.w	r0, #1
 80004b2:	f000 fa29 	bl	8000908 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a25      	ldr	r2, [pc, #148]	; (8000578 <HAL_SPI_MspInit+0xb4>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d144      	bne.n	8000570 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <HAL_SPI_MspInit+0xb8>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ea:	4a24      	ldr	r2, [pc, #144]	; (800057c <HAL_SPI_MspInit+0xb8>)
 80004ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004f0:	6613      	str	r3, [r2, #96]	; 0x60
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <HAL_SPI_MspInit+0xb8>)
 80004f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <HAL_SPI_MspInit+0xb8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a1e      	ldr	r2, [pc, #120]	; (800057c <HAL_SPI_MspInit+0xb8>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <HAL_SPI_MspInit+0xb8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <HAL_SPI_MspInit+0xb8>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a18      	ldr	r2, [pc, #96]	; (800057c <HAL_SPI_MspInit+0xb8>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <HAL_SPI_MspInit+0xb8>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800052e:	23c0      	movs	r3, #192	; 0xc0
 8000530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053a:	2303      	movs	r3, #3
 800053c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800053e:	2305      	movs	r3, #5
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 fa06 	bl	800095c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000550:	2308      	movs	r3, #8
 8000552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000554:	2302      	movs	r3, #2
 8000556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000560:	2305      	movs	r3, #5
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <HAL_SPI_MspInit+0xbc>)
 800056c:	f000 f9f6 	bl	800095c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40013000 	.word	0x40013000
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400

08000584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000594:	2200      	movs	r2, #0
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	2036      	movs	r0, #54	; 0x36
 800059a:	f000 f9b5 	bl	8000908 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800059e:	2036      	movs	r0, #54	; 0x36
 80005a0:	f000 f9ce 	bl	8000940 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_InitTick+0x9c>)
 80005a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <HAL_InitTick+0x9c>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6593      	str	r3, [r2, #88]	; 0x58
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_InitTick+0x9c>)
 80005b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b4:	f003 0310 	and.w	r3, r3, #16
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005bc:	f107 0210 	add.w	r2, r7, #16
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f97e 	bl	80018c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005cc:	f001 f966 	bl	800189c <HAL_RCC_GetPCLK1Freq>
 80005d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <HAL_InitTick+0xa0>)
 80005d6:	fba2 2303 	umull	r2, r3, r2, r3
 80005da:	0c9b      	lsrs	r3, r3, #18
 80005dc:	3b01      	subs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_InitTick+0xa4>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <HAL_InitTick+0xa8>)
 80005e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_InitTick+0xa4>)
 80005e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_InitTick+0xa4>)
 80005f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_InitTick+0xa4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_InitTick+0xa4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <HAL_InitTick+0xa4>)
 8000602:	f001 fd65 	bl	80020d0 <HAL_TIM_Base_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d104      	bne.n	8000616 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <HAL_InitTick+0xa4>)
 800060e:	f001 fdc1 	bl	8002194 <HAL_TIM_Base_Start_IT>
 8000612:	4603      	mov	r3, r0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3730      	adds	r7, #48	; 0x30
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000
 8000624:	431bde83 	.word	0x431bde83
 8000628:	20001960 	.word	0x20001960
 800062c:	40001000 	.word	0x40001000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <MemManage_Handler+0x4>

08000642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <UsageFault_Handler+0x4>

0800064e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <TIM6_DAC_IRQHandler+0x10>)
 8000662:	f001 fe07 	bl	8002274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20001960 	.word	0x20001960

08000670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <SystemInit+0x5c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <SystemInit+0x5c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <SystemInit+0x60>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <SystemInit+0x60>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <SystemInit+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <SystemInit+0x60>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <SystemInit+0x60>)
 800069c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <SystemInit+0x60>)
 80006a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <SystemInit+0x60>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <SystemInit+0x60>)
 80006b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <SystemInit+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	40021000 	.word	0x40021000

080006d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800070c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d8:	f7ff ffca 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006de:	e003      	b.n	80006e8 <LoopCopyDataInit>

080006e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006e6:	3104      	adds	r1, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006f0:	d3f6      	bcc.n	80006e0 <CopyDataInit>
	ldr	r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <LoopForever+0x12>)
	b	LoopFillZerobss
 80006f4:	e002      	b.n	80006fc <LoopFillZerobss>

080006f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006f8:	f842 3b04 	str.w	r3, [r2], #4

080006fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <LoopForever+0x16>)
	cmp	r2, r3
 80006fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000700:	d3f9      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f004 fd4b 	bl	800519c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000706:	f7ff fd63 	bl	80001d0 <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000710:	080052f0 	.word	0x080052f0
	ldr	r0, =_sdata
 8000714:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000718:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800071c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000720:	200019f0 	.word	0x200019f0

08000724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_2_IRQHandler>

08000726 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f8de 	bl	80008f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff ff24 	bl	8000584 <HAL_InitTick>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e001      	b.n	800074c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000748:	f7ff fe94 	bl	8000474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074c:	79fb      	ldrb	r3, [r7, #7]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_IncTick+0x20>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_IncTick+0x24>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_IncTick+0x24>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000008 	.word	0x20000008
 800077c:	200019ac 	.word	0x200019ac

08000780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <HAL_GetTick+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200019ac 	.word	0x200019ac

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <__NVIC_EnableIRQ+0x38>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff4c 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800091a:	f7ff ff61 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 800091e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	6978      	ldr	r0, [r7, #20]
 8000926:	f7ff ffb1 	bl	800088c <NVIC_EncodePriority>
 800092a:	4602      	mov	r2, r0
 800092c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff80 	bl	8000838 <__NVIC_SetPriority>
}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff54 	bl	80007fc <__NVIC_EnableIRQ>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e17f      	b.n	8000c6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 8171 	beq.w	8000c66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d00b      	beq.n	80009a4 <HAL_GPIO_Init+0x48>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d007      	beq.n	80009a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000998:	2b11      	cmp	r3, #17
 800099a:	d003      	beq.n	80009a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b12      	cmp	r3, #18
 80009a2:	d130      	bne.n	8000a06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2203      	movs	r2, #3
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009da:	2201      	movs	r2, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	091b      	lsrs	r3, r3, #4
 80009f0:	f003 0201 	and.w	r2, r3, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d118      	bne.n	8000a44 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	f003 0201 	and.w	r2, r3, #1
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	2203      	movs	r2, #3
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x128>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b12      	cmp	r3, #18
 8000a82:	d123      	bne.n	8000acc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	08da      	lsrs	r2, r3, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3208      	adds	r2, #8
 8000a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	691a      	ldr	r2, [r3, #16]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	6939      	ldr	r1, [r7, #16]
 8000ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0203 	and.w	r2, r3, #3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 80ac 	beq.w	8000c66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b5f      	ldr	r3, [pc, #380]	; (8000c8c <HAL_GPIO_Init+0x330>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a5e      	ldr	r2, [pc, #376]	; (8000c8c <HAL_GPIO_Init+0x330>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <HAL_GPIO_Init+0x330>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b26:	4a5a      	ldr	r2, [pc, #360]	; (8000c90 <HAL_GPIO_Init+0x334>)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b50:	d025      	beq.n	8000b9e <HAL_GPIO_Init+0x242>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4f      	ldr	r2, [pc, #316]	; (8000c94 <HAL_GPIO_Init+0x338>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d01f      	beq.n	8000b9a <HAL_GPIO_Init+0x23e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a4e      	ldr	r2, [pc, #312]	; (8000c98 <HAL_GPIO_Init+0x33c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d019      	beq.n	8000b96 <HAL_GPIO_Init+0x23a>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a4d      	ldr	r2, [pc, #308]	; (8000c9c <HAL_GPIO_Init+0x340>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d013      	beq.n	8000b92 <HAL_GPIO_Init+0x236>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <HAL_GPIO_Init+0x344>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d00d      	beq.n	8000b8e <HAL_GPIO_Init+0x232>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a4b      	ldr	r2, [pc, #300]	; (8000ca4 <HAL_GPIO_Init+0x348>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d007      	beq.n	8000b8a <HAL_GPIO_Init+0x22e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ca8 <HAL_GPIO_Init+0x34c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_GPIO_Init+0x22a>
 8000b82:	2306      	movs	r3, #6
 8000b84:	e00c      	b.n	8000ba0 <HAL_GPIO_Init+0x244>
 8000b86:	2307      	movs	r3, #7
 8000b88:	e00a      	b.n	8000ba0 <HAL_GPIO_Init+0x244>
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	e008      	b.n	8000ba0 <HAL_GPIO_Init+0x244>
 8000b8e:	2304      	movs	r3, #4
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x244>
 8000b92:	2303      	movs	r3, #3
 8000b94:	e004      	b.n	8000ba0 <HAL_GPIO_Init+0x244>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e002      	b.n	8000ba0 <HAL_GPIO_Init+0x244>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <HAL_GPIO_Init+0x244>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	f002 0203 	and.w	r2, r2, #3
 8000ba6:	0092      	lsls	r2, r2, #2
 8000ba8:	4093      	lsls	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb0:	4937      	ldr	r1, [pc, #220]	; (8000c90 <HAL_GPIO_Init+0x334>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000be2:	4a32      	ldr	r2, [pc, #200]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c0c:	4a27      	ldr	r2, [pc, #156]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c36:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <HAL_GPIO_Init+0x350>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa22 f303 	lsr.w	r3, r2, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f47f ae78 	bne.w	800096c <HAL_GPIO_Init+0x10>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48001000 	.word	0x48001000
 8000ca4:	48001400 	.word	0x48001400
 8000ca8:	48001800 	.word	0x48001800
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	041a      	lsls	r2, r3, #16
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43d9      	mvns	r1, r3
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	400b      	ands	r3, r1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	619a      	str	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40007000 	.word	0x40007000

08000d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d3e:	d130      	bne.n	8000da2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d4c:	d038      	beq.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2232      	movs	r2, #50	; 0x32
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	0c9b      	lsrs	r3, r3, #18
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d74:	e002      	b.n	8000d7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d88:	d102      	bne.n	8000d90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f2      	bne.n	8000d76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d9c:	d110      	bne.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e00f      	b.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dae:	d007      	beq.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40007000 	.word	0x40007000
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e3d4      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dee:	4ba1      	ldr	r3, [pc, #644]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df8:	4b9e      	ldr	r3, [pc, #632]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80e4 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <HAL_RCC_OscConfig+0x4a>
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b0c      	cmp	r3, #12
 8000e1a:	f040 808b 	bne.w	8000f34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 8087 	bne.w	8000f34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e26:	4b93      	ldr	r3, [pc, #588]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <HAL_RCC_OscConfig+0x62>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e3ac      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a1a      	ldr	r2, [r3, #32]
 8000e42:	4b8c      	ldr	r3, [pc, #560]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <HAL_RCC_OscConfig+0x7c>
 8000e4e:	4b89      	ldr	r3, [pc, #548]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e56:	e005      	b.n	8000e64 <HAL_RCC_OscConfig+0x88>
 8000e58:	4b86      	ldr	r3, [pc, #536]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d223      	bcs.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fd5d 	bl	800192c <RCC_SetFlashLatencyFromMSIRange>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e38d      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e7c:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a7c      	ldr	r2, [pc, #496]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4977      	ldr	r1, [pc, #476]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e9a:	4b76      	ldr	r3, [pc, #472]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	4972      	ldr	r1, [pc, #456]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
 8000eae:	e025      	b.n	8000efc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb0:	4b70      	ldr	r3, [pc, #448]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a6f      	ldr	r2, [pc, #444]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b6d      	ldr	r3, [pc, #436]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	496a      	ldr	r1, [pc, #424]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ece:	4b69      	ldr	r3, [pc, #420]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	4965      	ldr	r1, [pc, #404]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d109      	bne.n	8000efc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fd1d 	bl	800192c <RCC_SetFlashLatencyFromMSIRange>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e34d      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000efc:	f000 fc36 	bl	800176c <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b5c      	ldr	r3, [pc, #368]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	495a      	ldr	r1, [pc, #360]	; (8001078 <HAL_RCC_OscConfig+0x29c>)
 8000f0e:	5ccb      	ldrb	r3, [r1, r3]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	4a58      	ldr	r2, [pc, #352]	; (800107c <HAL_RCC_OscConfig+0x2a0>)
 8000f1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f1c:	4b58      	ldr	r3, [pc, #352]	; (8001080 <HAL_RCC_OscConfig+0x2a4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fb2f 	bl	8000584 <HAL_InitTick>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d052      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	e331      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d032      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc1a 	bl	8000780 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc16 	bl	8000780 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e31a      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f62:	4b44      	ldr	r3, [pc, #272]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a40      	ldr	r2, [pc, #256]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	493b      	ldr	r1, [pc, #236]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	4936      	ldr	r1, [pc, #216]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
 8000fa0:	e01a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a33      	ldr	r2, [pc, #204]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fbe7 	bl	8000780 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fbe3 	bl	8000780 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e2e7      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x1da>
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d074      	beq.n	80010ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x21a>
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d10e      	bne.n	800100e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d10b      	bne.n	800100e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d064      	beq.n	80010cc <HAL_RCC_OscConfig+0x2f0>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d160      	bne.n	80010cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e2c4      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x24a>
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e01d      	b.n	8001062 <HAL_RCC_OscConfig+0x286>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102e:	d10c      	bne.n	800104a <HAL_RCC_OscConfig+0x26e>
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8001036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8001042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e00b      	b.n	8001062 <HAL_RCC_OscConfig+0x286>
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8001050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_RCC_OscConfig+0x298>)
 800105c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001060:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106a:	f7ff fb89 	bl	8000780 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001070:	e011      	b.n	8001096 <HAL_RCC_OscConfig+0x2ba>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	080052a0 	.word	0x080052a0
 800107c:	20000000 	.word	0x20000000
 8001080:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fb7c 	bl	8000780 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e280      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001096:	4baf      	ldr	r3, [pc, #700]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0x2a8>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a4:	f7ff fb6c 	bl	8000780 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fb68 	bl	8000780 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e26c      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010be:	4ba5      	ldr	r3, [pc, #660]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x2d0>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d060      	beq.n	800119c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d005      	beq.n	80010ec <HAL_RCC_OscConfig+0x310>
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b0c      	cmp	r3, #12
 80010e4:	d119      	bne.n	800111a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d116      	bne.n	800111a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ec:	4b99      	ldr	r3, [pc, #612]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_OscConfig+0x328>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e249      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b93      	ldr	r3, [pc, #588]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	4990      	ldr	r1, [pc, #576]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001118:	e040      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d023      	beq.n	800116a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001122:	4b8c      	ldr	r3, [pc, #560]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a8b      	ldr	r2, [pc, #556]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fb27 	bl	8000780 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001136:	f7ff fb23 	bl	8000780 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e227      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001148:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	061b      	lsls	r3, r3, #24
 8001162:	497c      	ldr	r1, [pc, #496]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
 8001168:	e018      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116a:	4b7a      	ldr	r3, [pc, #488]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a79      	ldr	r2, [pc, #484]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001176:	f7ff fb03 	bl	8000780 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117e:	f7ff faff 	bl	8000780 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e203      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001190:	4b70      	ldr	r3, [pc, #448]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f0      	bne.n	800117e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d03c      	beq.n	8001222 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01c      	beq.n	80011ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	4a67      	ldr	r2, [pc, #412]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c0:	f7ff fade 	bl	8000780 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fada 	bl	8000780 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1de      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011da:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80011dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0ef      	beq.n	80011c8 <HAL_RCC_OscConfig+0x3ec>
 80011e8:	e01b      	b.n	8001222 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ea:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80011ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f0:	4a58      	ldr	r2, [pc, #352]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fa:	f7ff fac1 	bl	8000780 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001202:	f7ff fabd 	bl	8000780 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1c1      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001214:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1ef      	bne.n	8001202 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80a6 	beq.w	800137c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001234:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10d      	bne.n	800125c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	4b44      	ldr	r3, [pc, #272]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6593      	str	r3, [r2, #88]	; 0x58
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001258:	2301      	movs	r3, #1
 800125a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800125c:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <HAL_RCC_OscConfig+0x57c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d118      	bne.n	800129a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_RCC_OscConfig+0x57c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a3a      	ldr	r2, [pc, #232]	; (8001358 <HAL_RCC_OscConfig+0x57c>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001274:	f7ff fa84 	bl	8000780 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127c:	f7ff fa80 	bl	8000780 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e184      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_RCC_OscConfig+0x57c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4d8>
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a8:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b2:	e024      	b.n	80012fe <HAL_RCC_OscConfig+0x522>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d110      	bne.n	80012de <HAL_RCC_OscConfig+0x502>
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c2:	4a24      	ldr	r2, [pc, #144]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d2:	4a20      	ldr	r2, [pc, #128]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012dc:	e00f      	b.n	80012fe <HAL_RCC_OscConfig+0x522>
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 80012f6:	f023 0304 	bic.w	r3, r3, #4
 80012fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d016      	beq.n	8001334 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff fa3b 	bl	8000780 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fa37 	bl	8000780 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e139      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_RCC_OscConfig+0x578>)
 8001326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ed      	beq.n	800130e <HAL_RCC_OscConfig+0x532>
 8001332:	e01a      	b.n	800136a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001334:	f7ff fa24 	bl	8000780 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800133a:	e00f      	b.n	800135c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fa20 	bl	8000780 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d906      	bls.n	800135c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e122      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800135c:	4b90      	ldr	r3, [pc, #576]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e8      	bne.n	800133c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a8a      	ldr	r2, [pc, #552]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8108 	beq.w	8001596 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	2b02      	cmp	r3, #2
 800138c:	f040 80d0 	bne.w	8001530 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001390:	4b83      	ldr	r3, [pc, #524]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d130      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	3b01      	subs	r3, #1
 80013b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d127      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d11f      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013d0:	2a07      	cmp	r2, #7
 80013d2:	bf14      	ite	ne
 80013d4:	2201      	movne	r2, #1
 80013d6:	2200      	moveq	r2, #0
 80013d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	3b01      	subs	r3, #1
 80013ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d06e      	beq.n	80014e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d069      	beq.n	80014e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800140c:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001418:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0b7      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001428:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a5c      	ldr	r2, [pc, #368]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800142e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001432:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001434:	f7ff f9a4 	bl	8000780 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f9a0 	bl	8000780 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0a4      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144e:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <HAL_RCC_OscConfig+0x7c8>)
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800146a:	3a01      	subs	r2, #1
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	4311      	orrs	r1, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001474:	0212      	lsls	r2, r2, #8
 8001476:	4311      	orrs	r1, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800147c:	0852      	lsrs	r2, r2, #1
 800147e:	3a01      	subs	r2, #1
 8001480:	0552      	lsls	r2, r2, #21
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001488:	0852      	lsrs	r2, r2, #1
 800148a:	3a01      	subs	r2, #1
 800148c:	0652      	lsls	r2, r2, #25
 800148e:	4311      	orrs	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001494:	0912      	lsrs	r2, r2, #4
 8001496:	0452      	lsls	r2, r2, #17
 8001498:	430a      	orrs	r2, r1
 800149a:	4941      	ldr	r1, [pc, #260]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b8:	f7ff f962 	bl	8000780 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff f95e 	bl	8000780 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e062      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014de:	e05a      	b.n	8001596 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e059      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d152      	bne.n	8001596 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001506:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001508:	f7ff f93a 	bl	8000780 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff f936 	bl	8000780 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e03a      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x734>
 800152e:	e032      	b.n	8001596 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d02d      	beq.n	8001592 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800153c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001540:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d105      	bne.n	800155a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001560:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001568:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff f909 	bl	8000780 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff f905 	bl	8000780 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e009      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_OscConfig+0x7c4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x796>
 8001590:	e001      	b.n	8001596 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	f99d808c 	.word	0xf99d808c

080015a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0c8      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d910      	bls.n	80015ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 0207 	bic.w	r2, r3, #7
 80015d2:	4961      	ldr	r1, [pc, #388]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b0      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d04c      	beq.n	8001692 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001600:	4b56      	ldr	r3, [pc, #344]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d121      	bne.n	8001650 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e09e      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d107      	bne.n	8001628 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d115      	bne.n	8001650 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e092      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d107      	bne.n	8001640 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e086      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e07e      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001650:	4b42      	ldr	r3, [pc, #264]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 0203 	bic.w	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	493f      	ldr	r1, [pc, #252]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001662:	f7ff f88d 	bl	8000780 <HAL_GetTick>
 8001666:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001668:	e00a      	b.n	8001680 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166a:	f7ff f889 	bl	8000780 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e066      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 020c 	and.w	r2, r3, #12
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	429a      	cmp	r2, r3
 8001690:	d1eb      	bne.n	800166a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	492c      	ldr	r1, [pc, #176]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d210      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 0207 	bic.w	r2, r3, #7
 80016c6:	4924      	ldr	r1, [pc, #144]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1b0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e036      	b.n	800174e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4918      	ldr	r1, [pc, #96]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4910      	ldr	r1, [pc, #64]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800171e:	f000 f825 	bl	800176c <HAL_RCC_GetSysClockFreq>
 8001722:	4602      	mov	r2, r0
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_RCC_ClockConfig+0x1b4>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	490c      	ldr	r1, [pc, #48]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	5ccb      	ldrb	r3, [r1, r3]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff1e 	bl	8000584 <HAL_InitTick>
 8001748:	4603      	mov	r3, r0
 800174a:	72fb      	strb	r3, [r7, #11]

  return status;
 800174c:	7afb      	ldrb	r3, [r7, #11]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40022000 	.word	0x40022000
 800175c:	40021000 	.word	0x40021000
 8001760:	080052a0 	.word	0x080052a0
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177a:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001784:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x34>
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d121      	bne.n	80017de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d11e      	bne.n	80017de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017a0:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017ac:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e005      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017c8:	4a2b      	ldr	r2, [pc, #172]	; (8001878 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_GetSysClockFreq+0x110>)
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e004      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_RCC_GetSysClockFreq+0x114>)
 80017f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d134      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0xa6>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d003      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0xac>
 8001810:	e005      	b.n	800181e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_GetSysClockFreq+0x110>)
 8001814:	617b      	str	r3, [r7, #20]
      break;
 8001816:	e005      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_GetSysClockFreq+0x114>)
 800181a:	617b      	str	r3, [r7, #20]
      break;
 800181c:	e002      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	617b      	str	r3, [r7, #20]
      break;
 8001822:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	3301      	adds	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	fb02 f203 	mul.w	r2, r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_RCC_GetSysClockFreq+0x108>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	0e5b      	lsrs	r3, r3, #25
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	3301      	adds	r3, #1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001864:	69bb      	ldr	r3, [r7, #24]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	080052b8 	.word	0x080052b8
 800187c:	00f42400 	.word	0x00f42400
 8001880:	007a1200 	.word	0x007a1200

08001884 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_RCC_GetHCLKFreq+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000000 	.word	0x20000000

0800189c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018a0:	f7ff fff0 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4904      	ldr	r1, [pc, #16]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	080052b0 	.word	0x080052b0

080018c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	220f      	movs	r2, #15
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <HAL_RCC_GetClockConfig+0x60>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40022000 	.word	0x40022000

0800192c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001944:	f7ff f9e6 	bl	8000d14 <HAL_PWREx_GetVoltageRange>
 8001948:	6178      	str	r0, [r7, #20]
 800194a:	e014      	b.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	; 0x58
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001964:	f7ff f9d6 	bl	8000d14 <HAL_PWREx_GetVoltageRange>
 8001968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197c:	d10b      	bne.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b80      	cmp	r3, #128	; 0x80
 8001982:	d919      	bls.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2ba0      	cmp	r3, #160	; 0xa0
 8001988:	d902      	bls.n	8001990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800198a:	2302      	movs	r3, #2
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	e013      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001990:	2301      	movs	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	e010      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d902      	bls.n	80019a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800199c:	2303      	movs	r3, #3
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	e00a      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d102      	bne.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a8:	2302      	movs	r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e004      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b70      	cmp	r3, #112	; 0x70
 80019b2:	d101      	bne.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b4:	2301      	movs	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 0207 	bic.w	r2, r3, #7
 80019c0:	4909      	ldr	r1, [pc, #36]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e095      	b.n	8001b2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a0e:	d009      	beq.n	8001a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
 8001a16:	e005      	b.n	8001a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fd40 	bl	80004c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a64:	d902      	bls.n	8001a6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e002      	b.n	8001a72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001a7a:	d007      	beq.n	8001a8c <HAL_SPI_Init+0xa0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a84:	d002      	beq.n	8001a8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	ea42 0103 	orr.w	r1, r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	0c1b      	lsrs	r3, r3, #16
 8001ae8:	f003 0204 	and.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b08:	ea42 0103 	orr.w	r1, r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b088      	sub	sp, #32
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_SPI_Transmit+0x22>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e158      	b.n	8001e06 <HAL_SPI_Transmit+0x2d4>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b5c:	f7fe fe10 	bl	8000780 <HAL_GetTick>
 8001b60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d002      	beq.n	8001b78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b76:	e13d      	b.n	8001df4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_SPI_Transmit+0x52>
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b88:	e134      	b.n	8001df4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001be4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d007      	beq.n	8001c14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c1c:	d94b      	bls.n	8001cb6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_SPI_Transmit+0xfa>
 8001c26:	8afb      	ldrh	r3, [r7, #22]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d13e      	bne.n	8001caa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	1c9a      	adds	r2, r3, #2
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c50:	e02b      	b.n	8001caa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d112      	bne.n	8001c86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	881a      	ldrh	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	1c9a      	adds	r2, r3, #2
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c84:	e011      	b.n	8001caa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c86:	f7fe fd7b 	bl	8000780 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d803      	bhi.n	8001c9e <HAL_SPI_Transmit+0x16c>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d102      	bne.n	8001ca4 <HAL_SPI_Transmit+0x172>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ca8:	e0a4      	b.n	8001df4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ce      	bne.n	8001c52 <HAL_SPI_Transmit+0x120>
 8001cb4:	e07c      	b.n	8001db0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_SPI_Transmit+0x192>
 8001cbe:	8afb      	ldrh	r3, [r7, #22]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d170      	bne.n	8001da6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d912      	bls.n	8001cf4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	1c9a      	adds	r2, r3, #2
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b02      	subs	r3, #2
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cf2:	e058      	b.n	8001da6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	330c      	adds	r3, #12
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d1a:	e044      	b.n	8001da6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d12b      	bne.n	8001d82 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d912      	bls.n	8001d5a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	881a      	ldrh	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	1c9a      	adds	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b02      	subs	r3, #2
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d58:	e025      	b.n	8001da6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	330c      	adds	r3, #12
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d80:	e011      	b.n	8001da6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d82:	f7fe fcfd 	bl	8000780 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d803      	bhi.n	8001d9a <HAL_SPI_Transmit+0x268>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d102      	bne.n	8001da0 <HAL_SPI_Transmit+0x26e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001da4:	e026      	b.n	8001df4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1b5      	bne.n	8001d1c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f945 	bl	8002044 <SPI_EndRxTxTransaction>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	77fb      	strb	r3, [r7, #31]
 8001df0:	e000      	b.n	8001df4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e20:	f7fe fcae 	bl	8000780 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e30:	f7fe fca6 	bl	8000780 <HAL_GetTick>
 8001e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	015b      	lsls	r3, r3, #5
 8001e3c:	0d1b      	lsrs	r3, r3, #20
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e46:	e054      	b.n	8001ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d050      	beq.n	8001ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e50:	f7fe fc96 	bl	8000780 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d902      	bls.n	8001e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d13d      	bne.n	8001ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e7e:	d111      	bne.n	8001ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e88:	d004      	beq.n	8001e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d107      	bne.n	8001ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eac:	d10f      	bne.n	8001ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e017      	b.n	8001f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4013      	ands	r3, r2
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	bf0c      	ite	eq
 8001f02:	2301      	moveq	r3, #1
 8001f04:	2300      	movne	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d19b      	bne.n	8001e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000

08001f20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f2e:	f7fe fc27 	bl	8000780 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f3e:	f7fe fc1f 	bl	8000780 <HAL_GetTick>
 8001f42:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00da      	lsls	r2, r3, #3
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	0d1b      	lsrs	r3, r3, #20
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f5c:	e062      	b.n	8002024 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f64:	d109      	bne.n	8001f7a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001f78:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d050      	beq.n	8002024 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f82:	f7fe fbfd 	bl	8000780 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d902      	bls.n	8001f98 <SPI_WaitFifoStateUntilTimeout+0x78>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d13d      	bne.n	8002014 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb0:	d111      	bne.n	8001fd6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fba:	d004      	beq.n	8001fc6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc4:	d107      	bne.n	8001fd6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fde:	d10f      	bne.n	8002000 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ffe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e010      	b.n	8002036 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	3b01      	subs	r3, #1
 8002022:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d194      	bne.n	8001f5e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000

08002044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff ff5f 	bl	8001f20 <SPI_WaitFifoStateUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e027      	b.n	80020c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fec4 	bl	8001e10 <SPI_WaitFlagStateUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e014      	b.n	80020c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7ff ff38 	bl	8001f20 <SPI_WaitFifoStateUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e000      	b.n	80020c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e049      	b.n	8002176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f841 	bl	800217e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f000 f9f8 	bl	8002504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d001      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e04f      	b.n	800224c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a23      	ldr	r2, [pc, #140]	; (8002258 <HAL_TIM_Base_Start_IT+0xc4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01d      	beq.n	800220a <HAL_TIM_Base_Start_IT+0x76>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d6:	d018      	beq.n	800220a <HAL_TIM_Base_Start_IT+0x76>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_TIM_Base_Start_IT+0xc8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_TIM_Base_Start_IT+0x76>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_TIM_Base_Start_IT+0xcc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00e      	beq.n	800220a <HAL_TIM_Base_Start_IT+0x76>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <HAL_TIM_Base_Start_IT+0xd0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_TIM_Base_Start_IT+0x76>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_TIM_Base_Start_IT+0xd4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_TIM_Base_Start_IT+0x76>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_TIM_Base_Start_IT+0xd8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d115      	bne.n	8002236 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_TIM_Base_Start_IT+0xdc>)
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d015      	beq.n	8002248 <HAL_TIM_Base_Start_IT+0xb4>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d011      	beq.n	8002248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	e008      	b.n	8002248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e000      	b.n	800224a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40000c00 	.word	0x40000c00
 8002268:	40013400 	.word	0x40013400
 800226c:	40014000 	.word	0x40014000
 8002270:	00010007 	.word	0x00010007

08002274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0202 	mvn.w	r2, #2
 80022a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f905 	bl	80024c6 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8f7 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f908 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0204 	mvn.w	r2, #4
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8db 	bl	80024c6 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8cd 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8de 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b08      	cmp	r3, #8
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0208 	mvn.w	r2, #8
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2204      	movs	r2, #4
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8b1 	bl	80024c6 <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f8a3 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f8b4 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0210 	mvn.w	r2, #16
 800239c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2208      	movs	r2, #8
 80023a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f887 	bl	80024c6 <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f879 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f88a 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10e      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0201 	mvn.w	r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe f826 	bl	8000444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f914 	bl	800264c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002432:	d10e      	bne.n	8002452 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d107      	bne.n	8002452 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800244a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f907 	bl	8002660 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d10e      	bne.n	800247e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d107      	bne.n	800247e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f838 	bl	80024ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b20      	cmp	r3, #32
 800248a:	d10e      	bne.n	80024aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	d107      	bne.n	80024aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0220 	mvn.w	r2, #32
 80024a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8c7 	bl	8002638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a40      	ldr	r2, [pc, #256]	; (8002618 <TIM_Base_SetConfig+0x114>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <TIM_Base_SetConfig+0x40>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d00f      	beq.n	8002544 <TIM_Base_SetConfig+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a3d      	ldr	r2, [pc, #244]	; (800261c <TIM_Base_SetConfig+0x118>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00b      	beq.n	8002544 <TIM_Base_SetConfig+0x40>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3c      	ldr	r2, [pc, #240]	; (8002620 <TIM_Base_SetConfig+0x11c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d007      	beq.n	8002544 <TIM_Base_SetConfig+0x40>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <TIM_Base_SetConfig+0x120>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_Base_SetConfig+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3a      	ldr	r2, [pc, #232]	; (8002628 <TIM_Base_SetConfig+0x124>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d108      	bne.n	8002556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <TIM_Base_SetConfig+0x114>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002564:	d01b      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a2c      	ldr	r2, [pc, #176]	; (800261c <TIM_Base_SetConfig+0x118>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d017      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <TIM_Base_SetConfig+0x11c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <TIM_Base_SetConfig+0x120>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00f      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a29      	ldr	r2, [pc, #164]	; (8002628 <TIM_Base_SetConfig+0x124>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00b      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a28      	ldr	r2, [pc, #160]	; (800262c <TIM_Base_SetConfig+0x128>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <TIM_Base_SetConfig+0x12c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_Base_SetConfig+0x9a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <TIM_Base_SetConfig+0x130>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d108      	bne.n	80025b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <TIM_Base_SetConfig+0x114>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00f      	beq.n	80025fc <TIM_Base_SetConfig+0xf8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <TIM_Base_SetConfig+0x124>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0xf8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a11      	ldr	r2, [pc, #68]	; (800262c <TIM_Base_SetConfig+0x128>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0xf8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <TIM_Base_SetConfig+0x12c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0xf8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <TIM_Base_SetConfig+0x130>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d103      	bne.n	8002604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	615a      	str	r2, [r3, #20]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40000400 	.word	0x40000400
 8002620:	40000800 	.word	0x40000800
 8002624:	40000c00 	.word	0x40000c00
 8002628:	40013400 	.word	0x40013400
 800262c:	40014000 	.word	0x40014000
 8002630:	40014400 	.word	0x40014400
 8002634:	40014800 	.word	0x40014800

08002638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <__NVIC_SetPriority>:
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <SysTick_Handler+0x1c>)
 80026ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80026d0:	f001 fcfe 	bl	80040d0 <xTaskGetSchedulerState>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026da:	f002 fae5 	bl	8004ca8 <xPortSysTickHandler>
  }
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026ec:	2100      	movs	r1, #0
 80026ee:	f06f 0004 	mvn.w	r0, #4
 80026f2:	f7ff ffbf 	bl	8002674 <__NVIC_SetPriority>
#endif
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002702:	f3ef 8305 	mrs	r3, IPSR
 8002706:	603b      	str	r3, [r7, #0]
  return(result);
 8002708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800270e:	f06f 0305 	mvn.w	r3, #5
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	e00c      	b.n	8002730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <osKernelInitialize+0x44>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <osKernelInitialize+0x44>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e002      	b.n	8002730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002730:	687b      	ldr	r3, [r7, #4]
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000002c 	.word	0x2000002c

08002744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800274a:	f3ef 8305 	mrs	r3, IPSR
 800274e:	603b      	str	r3, [r7, #0]
  return(result);
 8002750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002756:	f06f 0305 	mvn.w	r3, #5
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e010      	b.n	8002780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <osKernelStart+0x48>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d109      	bne.n	800277a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002766:	f7ff ffbf 	bl	80026e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <osKernelStart+0x48>)
 800276c:	2202      	movs	r2, #2
 800276e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002770:	f001 f866 	bl	8003840 <vTaskStartScheduler>
      stat = osOK;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	e002      	b.n	8002780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000002c 	.word	0x2000002c

08002790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	; 0x38
 8002794:	af04      	add	r7, sp, #16
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a0:	f3ef 8305 	mrs	r3, IPSR
 80027a4:	617b      	str	r3, [r7, #20]
  return(result);
 80027a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d17e      	bne.n	80028aa <osThreadNew+0x11a>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07b      	beq.n	80028aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027b6:	2318      	movs	r3, #24
 80027b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d045      	beq.n	8002856 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <osThreadNew+0x48>
        name = attr->name;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <osThreadNew+0x6e>
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b38      	cmp	r3, #56	; 0x38
 80027f0:	d805      	bhi.n	80027fe <osThreadNew+0x6e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <osThreadNew+0x72>
        return (NULL);
 80027fe:	2300      	movs	r3, #0
 8002800:	e054      	b.n	80028ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <osThreadNew+0xa8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b5b      	cmp	r3, #91	; 0x5b
 8002820:	d90a      	bls.n	8002838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <osThreadNew+0xa8>
        mem = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	e010      	b.n	800285a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10c      	bne.n	800285a <osThreadNew+0xca>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d108      	bne.n	800285a <osThreadNew+0xca>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <osThreadNew+0xca>
          mem = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	e001      	b.n	800285a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d110      	bne.n	8002882 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002868:	9202      	str	r2, [sp, #8]
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fe0c 	bl	8003494 <xTaskCreateStatic>
 800287c:	4603      	mov	r3, r0
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e013      	b.n	80028aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d110      	bne.n	80028aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fe57 	bl	800354e <xTaskCreate>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <osThreadNew+0x11a>
            hTask = NULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028aa:	693b      	ldr	r3, [r7, #16]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028bc:	f3ef 8305 	mrs	r3, IPSR
 80028c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80028c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <osDelay+0x1c>
    stat = osErrorISR;
 80028c8:	f06f 0305 	mvn.w	r3, #5
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e007      	b.n	80028e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 ff7c 	bl	80037d8 <vTaskDelay>
    }
  }

  return (stat);
 80028e0:	68fb      	ldr	r3, [r7, #12]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <vApplicationGetIdleTaskMemory+0x2c>)
 80028fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4a06      	ldr	r2, [pc, #24]	; (800291c <vApplicationGetIdleTaskMemory+0x30>)
 8002902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000030 	.word	0x20000030
 800291c:	2000008c 	.word	0x2000008c

08002920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a07      	ldr	r2, [pc, #28]	; (800294c <vApplicationGetTimerTaskMemory+0x2c>)
 8002930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <vApplicationGetTimerTaskMemory+0x30>)
 8002936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293e:	601a      	str	r2, [r3, #0]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	2000028c 	.word	0x2000028c
 8002950:	200002e8 	.word	0x200002e8

08002954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0208 	add.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f103 0208 	add.w	r2, r3, #8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0208 	add.w	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d103      	bne.n	8002a16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e00c      	b.n	8002a30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3308      	adds	r3, #8
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e002      	b.n	8002a24 <vListInsert+0x2e>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d2f6      	bcs.n	8002a1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	601a      	str	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6892      	ldr	r2, [r2, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6852      	ldr	r2, [r2, #4]
 8002a88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d103      	bne.n	8002a9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	1e5a      	subs	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ae6:	f002 f84d 	bl	8004b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	441a      	add	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	3b01      	subs	r3, #1
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	441a      	add	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d114      	bne.n	8002b66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01a      	beq.n	8002b7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3310      	adds	r3, #16
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 f903 	bl	8003d54 <xTaskRemoveFromEventList>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <xQueueGenericReset+0xcc>)
 8002b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	e009      	b.n	8002b7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3310      	adds	r3, #16
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fef2 	bl	8002954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3324      	adds	r3, #36	; 0x24
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff feed 	bl	8002954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b7a:	f002 f833 	bl	8004be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	e000ed04 	.word	0xe000ed04

08002b8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <xQueueGenericCreateStatic+0x52>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <xQueueGenericCreateStatic+0x56>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <xQueueGenericCreateStatic+0x58>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	623b      	str	r3, [r7, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <xQueueGenericCreateStatic+0x7e>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <xQueueGenericCreateStatic+0x82>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xQueueGenericCreateStatic+0x84>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	61fb      	str	r3, [r7, #28]
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c2a:	2350      	movs	r3, #80	; 0x50
 8002c2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d00a      	beq.n	8002c4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	61bb      	str	r3, [r7, #24]
}
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f805 	bl	8002c7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3730      	adds	r7, #48	; 0x30
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e002      	b.n	8002c9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002caa:	2101      	movs	r1, #1
 8002cac:	69b8      	ldr	r0, [r7, #24]
 8002cae:	f7ff ff05 	bl	8002abc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xQueueGenericSend+0x32>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <xQueueGenericSend+0x40>
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <xQueueGenericSend+0x44>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <xQueueGenericSend+0x46>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <xQueueGenericSend+0x60>
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d103      	bne.n	8002d32 <xQueueGenericSend+0x6e>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <xQueueGenericSend+0x72>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <xQueueGenericSend+0x74>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	623b      	str	r3, [r7, #32]
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d52:	f001 f9bd 	bl	80040d0 <xTaskGetSchedulerState>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d102      	bne.n	8002d62 <xQueueGenericSend+0x9e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <xQueueGenericSend+0xa2>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <xQueueGenericSend+0xa4>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	61fb      	str	r3, [r7, #28]
}
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d82:	f001 feff 	bl	8004b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <xQueueGenericSend+0xd4>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d129      	bne.n	8002dec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d9e:	f000 fa0b 	bl	80031b8 <prvCopyDataToQueue>
 8002da2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 ffcf 	bl	8003d54 <xTaskRemoveFromEventList>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dbc:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <xQueueGenericSend+0x1f8>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	e00a      	b.n	8002de4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dd4:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <xQueueGenericSend+0x1f8>)
 8002dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002de4:	f001 fefe 	bl	8004be4 <vPortExitCritical>
				return pdPASS;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e063      	b.n	8002eb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002df2:	f001 fef7 	bl	8004be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e05c      	b.n	8002eb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 f809 	bl	8003e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e0e:	f001 fee9 	bl	8004be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e12:	f000 fd7b 	bl	800390c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e16:	f001 feb5 	bl	8004b84 <vPortEnterCritical>
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d103      	bne.n	8002e30 <xQueueGenericSend+0x16c>
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d103      	bne.n	8002e46 <xQueueGenericSend+0x182>
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e46:	f001 fecd 	bl	8004be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e4a:	1d3a      	adds	r2, r7, #4
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fff8 	bl	8003e48 <xTaskCheckForTimeOut>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d124      	bne.n	8002ea8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e60:	f000 faa2 	bl	80033a8 <prvIsQueueFull>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 ff1e 	bl	8003cb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e7a:	f000 fa2d 	bl	80032d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e7e:	f000 fd53 	bl	8003928 <xTaskResumeAll>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f47f af7c 	bne.w	8002d82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <xQueueGenericSend+0x1f8>)
 8002e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	e772      	b.n	8002d82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e9e:	f000 fa1b 	bl	80032d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ea2:	f000 fd41 	bl	8003928 <xTaskResumeAll>
 8002ea6:	e76c      	b.n	8002d82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eaa:	f000 fa15 	bl	80032d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eae:	f000 fd3b 	bl	8003928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002eb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3738      	adds	r7, #56	; 0x38
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b090      	sub	sp, #64	; 0x40
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <xQueueGenericSendFromISR+0x3c>
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <xQueueGenericSendFromISR+0x40>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <xQueueGenericSendFromISR+0x42>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f18:	bf00      	nop
 8002f1a:	e7fe      	b.n	8002f1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d103      	bne.n	8002f2a <xQueueGenericSendFromISR+0x6a>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <xQueueGenericSendFromISR+0x6e>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <xQueueGenericSendFromISR+0x70>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	623b      	str	r3, [r7, #32]
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f4a:	f001 fefd 	bl	8004d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	61fa      	str	r2, [r7, #28]
 8002f64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <xQueueGenericSendFromISR+0xbc>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d12f      	bne.n	8002fdc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f92:	f000 f911 	bl	80031b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d112      	bne.n	8002fc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d016      	beq.n	8002fd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	3324      	adds	r3, #36	; 0x24
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fed1 	bl	8003d54 <xTaskRemoveFromEventList>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00e      	beq.n	8002fd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e007      	b.n	8002fd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fca:	3301      	adds	r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	b25a      	sxtb	r2, r3
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002fda:	e001      	b.n	8002fe0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3740      	adds	r7, #64	; 0x40
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <xQueueReceive+0x30>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	623b      	str	r3, [r7, #32]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <xQueueReceive+0x3e>
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <xQueueReceive+0x42>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <xQueueReceive+0x44>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <xQueueReceive+0x5e>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	61fb      	str	r3, [r7, #28]
}
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003056:	f001 f83b 	bl	80040d0 <xTaskGetSchedulerState>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <xQueueReceive+0x6e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <xQueueReceive+0x72>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xQueueReceive+0x74>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueReceive+0x8e>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	61bb      	str	r3, [r7, #24]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003086:	f001 fd7d 	bl	8004b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01f      	beq.n	80030d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800309a:	f000 f8f7 	bl	800328c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	1e5a      	subs	r2, r3, #1
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00f      	beq.n	80030ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	3310      	adds	r3, #16
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fe4e 	bl	8003d54 <xTaskRemoveFromEventList>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <xQueueReceive+0x1bc>)
 80030c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030ce:	f001 fd89 	bl	8004be4 <vPortExitCritical>
				return pdPASS;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e069      	b.n	80031aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030dc:	f001 fd82 	bl	8004be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e062      	b.n	80031aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ea:	f107 0310 	add.w	r3, r7, #16
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fe94 	bl	8003e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f8:	f001 fd74 	bl	8004be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030fc:	f000 fc06 	bl	800390c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003100:	f001 fd40 	bl	8004b84 <vPortEnterCritical>
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800310a:	b25b      	sxtb	r3, r3
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d103      	bne.n	800311a <xQueueReceive+0x122>
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003120:	b25b      	sxtb	r3, r3
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d103      	bne.n	8003130 <xQueueReceive+0x138>
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003130:	f001 fd58 	bl	8004be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003134:	1d3a      	adds	r2, r7, #4
 8003136:	f107 0310 	add.w	r3, r7, #16
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fe83 	bl	8003e48 <xTaskCheckForTimeOut>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d123      	bne.n	8003190 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800314a:	f000 f917 	bl	800337c <prvIsQueueEmpty>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d017      	beq.n	8003184 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	3324      	adds	r3, #36	; 0x24
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fda9 	bl	8003cb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003164:	f000 f8b8 	bl	80032d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003168:	f000 fbde 	bl	8003928 <xTaskResumeAll>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d189      	bne.n	8003086 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <xQueueReceive+0x1bc>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	e780      	b.n	8003086 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003186:	f000 f8a7 	bl	80032d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800318a:	f000 fbcd 	bl	8003928 <xTaskResumeAll>
 800318e:	e77a      	b.n	8003086 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003192:	f000 f8a1 	bl	80032d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003196:	f000 fbc7 	bl	8003928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800319a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319c:	f000 f8ee 	bl	800337c <prvIsQueueEmpty>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f43f af6f 	beq.w	8003086 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3730      	adds	r7, #48	; 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d14d      	bne.n	800327a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 ff92 	bl	800410c <xTaskPriorityDisinherit>
 80031e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	e043      	b.n	800327a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d119      	bne.n	800322c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6858      	ldr	r0, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	461a      	mov	r2, r3
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	f001 ffee 	bl	80051e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d32b      	bcc.n	800327a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	e026      	b.n	800327a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68d8      	ldr	r0, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	461a      	mov	r2, r3
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	f001 ffd4 	bl	80051e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	425b      	negs	r3, r3
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d207      	bcs.n	8003268 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	425b      	negs	r3, r3
 8003262:	441a      	add	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d105      	bne.n	800327a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3b01      	subs	r3, #1
 8003278:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003282:	697b      	ldr	r3, [r7, #20]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	441a      	add	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d303      	bcc.n	80032c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	461a      	mov	r2, r3
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f001 ff8a 	bl	80051e4 <memcpy>
	}
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032e0:	f001 fc50 	bl	8004b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ec:	e011      	b.n	8003312 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3324      	adds	r3, #36	; 0x24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fd2a 	bl	8003d54 <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003306:	f000 fe01 	bl	8003f0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	dce9      	bgt.n	80032ee <prvUnlockQueue+0x16>
 800331a:	e000      	b.n	800331e <prvUnlockQueue+0x46>
					break;
 800331c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003326:	f001 fc5d 	bl	8004be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800332a:	f001 fc2b 	bl	8004b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003334:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003336:	e011      	b.n	800335c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3310      	adds	r3, #16
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fd05 	bl	8003d54 <xTaskRemoveFromEventList>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003350:	f000 fddc 	bl	8003f0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003354:	7bbb      	ldrb	r3, [r7, #14]
 8003356:	3b01      	subs	r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800335c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dce9      	bgt.n	8003338 <prvUnlockQueue+0x60>
 8003364:	e000      	b.n	8003368 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003366:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003370:	f001 fc38 	bl	8004be4 <vPortExitCritical>
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003384:	f001 fbfe 	bl	8004b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e001      	b.n	800339a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800339a:	f001 fc23 	bl	8004be4 <vPortExitCritical>

	return xReturn;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033b0:	f001 fbe8 	bl	8004b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d102      	bne.n	80033c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e001      	b.n	80033ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ca:	f001 fc0b 	bl	8004be4 <vPortExitCritical>

	return xReturn;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e014      	b.n	8003412 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033e8:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <vQueueAddToRegistry+0x50>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <vQueueAddToRegistry+0x50>)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <vQueueAddToRegistry+0x50>)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800340a:	e006      	b.n	800341a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b07      	cmp	r3, #7
 8003416:	d9e7      	bls.n	80033e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	200019b0 	.word	0x200019b0

0800342c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800343c:	f001 fba2 	bl	8004b84 <vPortEnterCritical>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d103      	bne.n	8003456 <vQueueWaitForMessageRestricted+0x2a>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800345c:	b25b      	sxtb	r3, r3
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d103      	bne.n	800346c <vQueueWaitForMessageRestricted+0x40>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800346c:	f001 fbba 	bl	8004be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3324      	adds	r3, #36	; 0x24
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fc3b 	bl	8003cfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7ff ff26 	bl	80032d8 <prvUnlockQueue>
	}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08e      	sub	sp, #56	; 0x38
 8003498:	af04      	add	r7, sp, #16
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <xTaskCreateStatic+0x2a>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	623b      	str	r3, [r7, #32]
}
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <xTaskCreateStatic+0x46>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61fb      	str	r3, [r7, #28]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034da:	235c      	movs	r3, #92	; 0x5c
 80034dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b5c      	cmp	r3, #92	; 0x5c
 80034e2:	d00a      	beq.n	80034fa <xTaskCreateStatic+0x66>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	61bb      	str	r3, [r7, #24]
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01e      	beq.n	8003540 <xTaskCreateStatic+0xac>
 8003502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01b      	beq.n	8003540 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003510:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	2202      	movs	r2, #2
 8003516:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800351a:	2300      	movs	r3, #0
 800351c:	9303      	str	r3, [sp, #12]
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	9302      	str	r3, [sp, #8]
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f850 	bl	80035d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800353a:	f000 f8dd 	bl	80036f8 <prvAddNewTaskToReadyList>
 800353e:	e001      	b.n	8003544 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003544:	697b      	ldr	r3, [r7, #20]
	}
 8003546:	4618      	mov	r0, r3
 8003548:	3728      	adds	r7, #40	; 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800354e:	b580      	push	{r7, lr}
 8003550:	b08c      	sub	sp, #48	; 0x30
 8003552:	af04      	add	r7, sp, #16
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fc30 	bl	8004dc8 <pvPortMalloc>
 8003568:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003570:	205c      	movs	r0, #92	; 0x5c
 8003572:	f001 fc29 	bl	8004dc8 <pvPortMalloc>
 8003576:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
 8003584:	e005      	b.n	8003592 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f001 fcea 	bl	8004f60 <vPortFree>
 800358c:	e001      	b.n	8003592 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d017      	beq.n	80035c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9303      	str	r3, [sp, #12]
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	9302      	str	r3, [sp, #8]
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f80e 	bl	80035d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035bc:	69f8      	ldr	r0, [r7, #28]
 80035be:	f000 f89b 	bl	80036f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e002      	b.n	80035ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
 80035cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035ce:	69bb      	ldr	r3, [r7, #24]
	}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	461a      	mov	r2, r3
 80035f0:	21a5      	movs	r1, #165	; 0xa5
 80035f2:	f001 fe05 	bl	8005200 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003600:	3b01      	subs	r3, #1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f023 0307 	bic.w	r3, r3, #7
 800360e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <prvInitialiseNewTask+0x58>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	617b      	str	r3, [r7, #20]
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01f      	beq.n	8003676 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e012      	b.n	8003662 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	7819      	ldrb	r1, [r3, #0]
 8003644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	3334      	adds	r3, #52	; 0x34
 800364c:	460a      	mov	r2, r1
 800364e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b0f      	cmp	r3, #15
 8003666:	d9e9      	bls.n	800363c <prvInitialiseNewTask+0x64>
 8003668:	e000      	b.n	800366c <prvInitialiseNewTask+0x94>
			{
				break;
 800366a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003674:	e003      	b.n	800367e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	2b37      	cmp	r3, #55	; 0x37
 8003682:	d901      	bls.n	8003688 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003684:	2337      	movs	r3, #55	; 0x37
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003692:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	2200      	movs	r2, #0
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	3304      	adds	r3, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f978 	bl	8002994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	3318      	adds	r3, #24
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f973 	bl	8002994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	2200      	movs	r2, #0
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	69b8      	ldr	r0, [r7, #24]
 80036d8:	f001 f928 	bl	800492c <pxPortInitialiseStack>
 80036dc:	4602      	mov	r2, r0
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ee:	bf00      	nop
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003700:	f001 fa40 	bl	8004b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <prvAddNewTaskToReadyList+0xc4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a2c      	ldr	r2, [pc, #176]	; (80037bc <prvAddNewTaskToReadyList+0xc4>)
 800370c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003716:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <prvAddNewTaskToReadyList+0xc4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d110      	bne.n	8003746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003724:	f000 fc16 	bl	8003f54 <prvInitialiseTaskLists>
 8003728:	e00d      	b.n	8003746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800372a:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <prvAddNewTaskToReadyList+0xcc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003732:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	429a      	cmp	r2, r3
 800373e:	d802      	bhi.n	8003746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003740:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <prvAddNewTaskToReadyList+0xd0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <prvAddNewTaskToReadyList+0xd0>)
 800374e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <prvAddNewTaskToReadyList+0xd0>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <prvAddNewTaskToReadyList+0xd4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d903      	bls.n	800376c <prvAddNewTaskToReadyList+0x74>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a18      	ldr	r2, [pc, #96]	; (80037cc <prvAddNewTaskToReadyList+0xd4>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <prvAddNewTaskToReadyList+0xd8>)
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7ff f913 	bl	80029ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003788:	f001 fa2c 	bl	8004be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <prvAddNewTaskToReadyList+0xcc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	429a      	cmp	r2, r3
 80037a0:	d207      	bcs.n	80037b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <prvAddNewTaskToReadyList+0xdc>)
 80037a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000bbc 	.word	0x20000bbc
 80037c0:	200006e8 	.word	0x200006e8
 80037c4:	20000bc8 	.word	0x20000bc8
 80037c8:	20000bd8 	.word	0x20000bd8
 80037cc:	20000bc4 	.word	0x20000bc4
 80037d0:	200006ec 	.word	0x200006ec
 80037d4:	e000ed04 	.word	0xe000ed04

080037d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <vTaskDelay+0x60>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <vTaskDelay+0x30>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60bb      	str	r3, [r7, #8]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003808:	f000 f880 	bl	800390c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800380c:	2100      	movs	r1, #0
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fcea 	bl	80041e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003814:	f000 f888 	bl	8003928 <xTaskResumeAll>
 8003818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <vTaskDelay+0x64>)
 8003822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000be4 	.word	0x20000be4
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800384e:	463a      	mov	r2, r7
 8003850:	1d39      	adds	r1, r7, #4
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff f848 	bl	80028ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	9202      	str	r2, [sp, #8]
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2300      	movs	r3, #0
 800386c:	460a      	mov	r2, r1
 800386e:	4921      	ldr	r1, [pc, #132]	; (80038f4 <vTaskStartScheduler+0xb4>)
 8003870:	4821      	ldr	r0, [pc, #132]	; (80038f8 <vTaskStartScheduler+0xb8>)
 8003872:	f7ff fe0f 	bl	8003494 <xTaskCreateStatic>
 8003876:	4603      	mov	r3, r0
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <vTaskStartScheduler+0xbc>)
 800387a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800387c:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <vTaskStartScheduler+0xbc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e001      	b.n	800388e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003894:	f000 fcfc 	bl	8004290 <xTimerCreateTimerTask>
 8003898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d116      	bne.n	80038ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	613b      	str	r3, [r7, #16]
}
 80038b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <vTaskStartScheduler+0xc0>)
 80038b6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <vTaskStartScheduler+0xc4>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <vTaskStartScheduler+0xc8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038c8:	f001 f8ba 	bl	8004a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038cc:	e00e      	b.n	80038ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d10a      	bne.n	80038ec <vTaskStartScheduler+0xac>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	60fb      	str	r3, [r7, #12]
}
 80038e8:	bf00      	nop
 80038ea:	e7fe      	b.n	80038ea <vTaskStartScheduler+0xaa>
}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	08005240 	.word	0x08005240
 80038f8:	08003f25 	.word	0x08003f25
 80038fc:	20000be0 	.word	0x20000be0
 8003900:	20000bdc 	.word	0x20000bdc
 8003904:	20000bc8 	.word	0x20000bc8
 8003908:	20000bc0 	.word	0x20000bc0

0800390c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <vTaskSuspendAll+0x18>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a03      	ldr	r2, [pc, #12]	; (8003924 <vTaskSuspendAll+0x18>)
 8003918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	20000be4 	.word	0x20000be4

08003928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003936:	4b42      	ldr	r3, [pc, #264]	; (8003a40 <xTaskResumeAll+0x118>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <xTaskResumeAll+0x2c>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	603b      	str	r3, [r7, #0]
}
 8003950:	bf00      	nop
 8003952:	e7fe      	b.n	8003952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003954:	f001 f916 	bl	8004b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <xTaskResumeAll+0x118>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	4a38      	ldr	r2, [pc, #224]	; (8003a40 <xTaskResumeAll+0x118>)
 8003960:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003962:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <xTaskResumeAll+0x118>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d162      	bne.n	8003a30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <xTaskResumeAll+0x11c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d05e      	beq.n	8003a30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003972:	e02f      	b.n	80039d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <xTaskResumeAll+0x120>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3318      	adds	r3, #24
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff f871 	bl	8002a68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3304      	adds	r3, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff f86c 	bl	8002a68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <xTaskResumeAll+0x124>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d903      	bls.n	80039a4 <xTaskResumeAll+0x7c>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <xTaskResumeAll+0x124>)
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <xTaskResumeAll+0x128>)
 80039b2:	441a      	add	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7fe fff7 	bl	80029ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <xTaskResumeAll+0x12c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <xTaskResumeAll+0x130>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <xTaskResumeAll+0x120>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1cb      	bne.n	8003974 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039e2:	f000 fb55 	bl	8004090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039e6:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <xTaskResumeAll+0x134>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039f2:	f000 f847 	bl	8003a84 <xTaskIncrementTick>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <xTaskResumeAll+0x130>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f1      	bne.n	80039f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <xTaskResumeAll+0x134>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <xTaskResumeAll+0x130>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <xTaskResumeAll+0x138>)
 8003a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a30:	f001 f8d8 	bl	8004be4 <vPortExitCritical>

	return xAlreadyYielded;
 8003a34:	68bb      	ldr	r3, [r7, #8]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000be4 	.word	0x20000be4
 8003a44:	20000bbc 	.word	0x20000bbc
 8003a48:	20000b7c 	.word	0x20000b7c
 8003a4c:	20000bc4 	.word	0x20000bc4
 8003a50:	200006ec 	.word	0x200006ec
 8003a54:	200006e8 	.word	0x200006e8
 8003a58:	20000bd0 	.word	0x20000bd0
 8003a5c:	20000bcc 	.word	0x20000bcc
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <xTaskGetTickCount+0x1c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a70:	687b      	ldr	r3, [r7, #4]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000bc0 	.word	0x20000bc0

08003a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8e:	4b4f      	ldr	r3, [pc, #316]	; (8003bcc <xTaskIncrementTick+0x148>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 808f 	bne.w	8003bb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a98:	4b4d      	ldr	r3, [pc, #308]	; (8003bd0 <xTaskIncrementTick+0x14c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <xTaskIncrementTick+0x14c>)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d120      	bne.n	8003aee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003aac:	4b49      	ldr	r3, [pc, #292]	; (8003bd4 <xTaskIncrementTick+0x150>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <xTaskIncrementTick+0x48>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	603b      	str	r3, [r7, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	e7fe      	b.n	8003aca <xTaskIncrementTick+0x46>
 8003acc:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <xTaskIncrementTick+0x150>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <xTaskIncrementTick+0x154>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <xTaskIncrementTick+0x150>)
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4a3f      	ldr	r2, [pc, #252]	; (8003bd8 <xTaskIncrementTick+0x154>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <xTaskIncrementTick+0x158>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	4a3d      	ldr	r2, [pc, #244]	; (8003bdc <xTaskIncrementTick+0x158>)
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	f000 fad1 	bl	8004090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aee:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <xTaskIncrementTick+0x15c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d349      	bcc.n	8003b8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <xTaskIncrementTick+0x150>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <xTaskIncrementTick+0x15c>)
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	601a      	str	r2, [r3, #0]
					break;
 8003b0a:	e03f      	b.n	8003b8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b0c:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <xTaskIncrementTick+0x150>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d203      	bcs.n	8003b2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b24:	4a2e      	ldr	r2, [pc, #184]	; (8003be0 <xTaskIncrementTick+0x15c>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b2a:	e02f      	b.n	8003b8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe ff99 	bl	8002a68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d004      	beq.n	8003b48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3318      	adds	r3, #24
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe ff90 	bl	8002a68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <xTaskIncrementTick+0x160>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d903      	bls.n	8003b5c <xTaskIncrementTick+0xd8>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <xTaskIncrementTick+0x160>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <xTaskIncrementTick+0x164>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7fe ff1b 	bl	80029ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <xTaskIncrementTick+0x168>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3b8      	bcc.n	8003af8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b86:	2301      	movs	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8a:	e7b5      	b.n	8003af8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <xTaskIncrementTick+0x168>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	4915      	ldr	r1, [pc, #84]	; (8003be8 <xTaskIncrementTick+0x164>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d901      	bls.n	8003ba8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <xTaskIncrementTick+0x16c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e004      	b.n	8003bc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <xTaskIncrementTick+0x170>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <xTaskIncrementTick+0x170>)
 8003bbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000be4 	.word	0x20000be4
 8003bd0:	20000bc0 	.word	0x20000bc0
 8003bd4:	20000b74 	.word	0x20000b74
 8003bd8:	20000b78 	.word	0x20000b78
 8003bdc:	20000bd4 	.word	0x20000bd4
 8003be0:	20000bdc 	.word	0x20000bdc
 8003be4:	20000bc4 	.word	0x20000bc4
 8003be8:	200006ec 	.word	0x200006ec
 8003bec:	200006e8 	.word	0x200006e8
 8003bf0:	20000bd0 	.word	0x20000bd0
 8003bf4:	20000bcc 	.word	0x20000bcc

08003bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bfe:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <vTaskSwitchContext+0xa8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c06:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <vTaskSwitchContext+0xac>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c0c:	e041      	b.n	8003c92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <vTaskSwitchContext+0xac>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <vTaskSwitchContext+0xb0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e010      	b.n	8003c3e <vTaskSwitchContext+0x46>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	607b      	str	r3, [r7, #4]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <vTaskSwitchContext+0x3e>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	491b      	ldr	r1, [pc, #108]	; (8003cac <vTaskSwitchContext+0xb4>)
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0e4      	beq.n	8003c1c <vTaskSwitchContext+0x24>
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4a13      	ldr	r2, [pc, #76]	; (8003cac <vTaskSwitchContext+0xb4>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3308      	adds	r3, #8
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d104      	bne.n	8003c82 <vTaskSwitchContext+0x8a>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <vTaskSwitchContext+0xb8>)
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <vTaskSwitchContext+0xb0>)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6013      	str	r3, [r2, #0]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000be4 	.word	0x20000be4
 8003ca4:	20000bd0 	.word	0x20000bd0
 8003ca8:	20000bc4 	.word	0x20000bc4
 8003cac:	200006ec 	.word	0x200006ec
 8003cb0:	200006e8 	.word	0x200006e8

08003cb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60fb      	str	r3, [r7, #12]
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <vTaskPlaceOnEventList+0x44>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3318      	adds	r3, #24
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe fe87 	bl	80029f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ce8:	2101      	movs	r1, #1
 8003cea:	6838      	ldr	r0, [r7, #0]
 8003cec:	f000 fa7c 	bl	80041e8 <prvAddCurrentTaskToDelayedList>
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200006e8 	.word	0x200006e8

08003cfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	617b      	str	r3, [r7, #20]
}
 8003d20:	bf00      	nop
 8003d22:	e7fe      	b.n	8003d22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3318      	adds	r3, #24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7fe fe3e 	bl	80029ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	68b8      	ldr	r0, [r7, #8]
 8003d42:	f000 fa51 	bl	80041e8 <prvAddCurrentTaskToDelayedList>
	}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200006e8 	.word	0x200006e8

08003d54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	60fb      	str	r3, [r7, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3318      	adds	r3, #24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fe6f 	bl	8002a68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d8a:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <xTaskRemoveFromEventList+0xb0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d11d      	bne.n	8003dce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fe66 	bl	8002a68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <xTaskRemoveFromEventList+0xb4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d903      	bls.n	8003db0 <xTaskRemoveFromEventList+0x5c>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <xTaskRemoveFromEventList+0xb4>)
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <xTaskRemoveFromEventList+0xb8>)
 8003dbe:	441a      	add	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7fe fdf1 	bl	80029ae <vListInsertEnd>
 8003dcc:	e005      	b.n	8003dda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	480e      	ldr	r0, [pc, #56]	; (8003e10 <xTaskRemoveFromEventList+0xbc>)
 8003dd6:	f7fe fdea 	bl	80029ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <xTaskRemoveFromEventList+0xc0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d905      	bls.n	8003df4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <xTaskRemoveFromEventList+0xc4>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e001      	b.n	8003df8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003df8:	697b      	ldr	r3, [r7, #20]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000be4 	.word	0x20000be4
 8003e08:	20000bc4 	.word	0x20000bc4
 8003e0c:	200006ec 	.word	0x200006ec
 8003e10:	20000b7c 	.word	0x20000b7c
 8003e14:	200006e8 	.word	0x200006e8
 8003e18:	20000bd0 	.word	0x20000bd0

08003e1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <vTaskInternalSetTimeOutState+0x24>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <vTaskInternalSetTimeOutState+0x28>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	605a      	str	r2, [r3, #4]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	20000bd4 	.word	0x20000bd4
 8003e44:	20000bc0 	.word	0x20000bc0

08003e48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	613b      	str	r3, [r7, #16]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60fb      	str	r3, [r7, #12]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e8a:	f000 fe7b 	bl	8004b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <xTaskCheckForTimeOut+0xbc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d102      	bne.n	8003eae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e023      	b.n	8003ef6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <xTaskCheckForTimeOut+0xc0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d007      	beq.n	8003eca <xTaskCheckForTimeOut+0x82>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	e015      	b.n	8003ef6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d20b      	bcs.n	8003eec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff9b 	bl	8003e1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e004      	b.n	8003ef6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ef6:	f000 fe75 	bl	8004be4 <vPortExitCritical>

	return xReturn;
 8003efa:	69fb      	ldr	r3, [r7, #28]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000bc0 	.word	0x20000bc0
 8003f08:	20000bd4 	.word	0x20000bd4

08003f0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <vTaskMissedYield+0x14>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	20000bd0 	.word	0x20000bd0

08003f24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f2c:	f000 f852 	bl	8003fd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <prvIdleTask+0x28>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d9f9      	bls.n	8003f2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <prvIdleTask+0x2c>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f48:	e7f0      	b.n	8003f2c <prvIdleTask+0x8>
 8003f4a:	bf00      	nop
 8003f4c:	200006ec 	.word	0x200006ec
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	e00c      	b.n	8003f7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4a12      	ldr	r2, [pc, #72]	; (8003fb4 <prvInitialiseTaskLists+0x60>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fcf0 	bl	8002954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3301      	adds	r3, #1
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b37      	cmp	r3, #55	; 0x37
 8003f7e:	d9ef      	bls.n	8003f60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f80:	480d      	ldr	r0, [pc, #52]	; (8003fb8 <prvInitialiseTaskLists+0x64>)
 8003f82:	f7fe fce7 	bl	8002954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f86:	480d      	ldr	r0, [pc, #52]	; (8003fbc <prvInitialiseTaskLists+0x68>)
 8003f88:	f7fe fce4 	bl	8002954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f8c:	480c      	ldr	r0, [pc, #48]	; (8003fc0 <prvInitialiseTaskLists+0x6c>)
 8003f8e:	f7fe fce1 	bl	8002954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f92:	480c      	ldr	r0, [pc, #48]	; (8003fc4 <prvInitialiseTaskLists+0x70>)
 8003f94:	f7fe fcde 	bl	8002954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f98:	480b      	ldr	r0, [pc, #44]	; (8003fc8 <prvInitialiseTaskLists+0x74>)
 8003f9a:	f7fe fcdb 	bl	8002954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <prvInitialiseTaskLists+0x78>)
 8003fa0:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <prvInitialiseTaskLists+0x64>)
 8003fa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <prvInitialiseTaskLists+0x7c>)
 8003fa6:	4a05      	ldr	r2, [pc, #20]	; (8003fbc <prvInitialiseTaskLists+0x68>)
 8003fa8:	601a      	str	r2, [r3, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200006ec 	.word	0x200006ec
 8003fb8:	20000b4c 	.word	0x20000b4c
 8003fbc:	20000b60 	.word	0x20000b60
 8003fc0:	20000b7c 	.word	0x20000b7c
 8003fc4:	20000b90 	.word	0x20000b90
 8003fc8:	20000ba8 	.word	0x20000ba8
 8003fcc:	20000b74 	.word	0x20000b74
 8003fd0:	20000b78 	.word	0x20000b78

08003fd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fda:	e019      	b.n	8004010 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fdc:	f000 fdd2 	bl	8004b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe0:	4b10      	ldr	r3, [pc, #64]	; (8004024 <prvCheckTasksWaitingTermination+0x50>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fd3b 	bl	8002a68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <prvCheckTasksWaitingTermination+0x54>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <prvCheckTasksWaitingTermination+0x54>)
 8003ffa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <prvCheckTasksWaitingTermination+0x58>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3b01      	subs	r3, #1
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <prvCheckTasksWaitingTermination+0x58>)
 8004004:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004006:	f000 fded 	bl	8004be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f810 	bl	8004030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <prvCheckTasksWaitingTermination+0x58>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e1      	bne.n	8003fdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000b90 	.word	0x20000b90
 8004028:	20000bbc 	.word	0x20000bbc
 800402c:	20000ba4 	.word	0x20000ba4

08004030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800403e:	2b00      	cmp	r3, #0
 8004040:	d108      	bne.n	8004054 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4618      	mov	r0, r3
 8004048:	f000 ff8a 	bl	8004f60 <vPortFree>
				vPortFree( pxTCB );
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 ff87 	bl	8004f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004052:	e018      	b.n	8004086 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800405a:	2b01      	cmp	r3, #1
 800405c:	d103      	bne.n	8004066 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 ff7e 	bl	8004f60 <vPortFree>
	}
 8004064:	e00f      	b.n	8004086 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800406c:	2b02      	cmp	r3, #2
 800406e:	d00a      	beq.n	8004086 <prvDeleteTCB+0x56>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	60fb      	str	r3, [r7, #12]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <prvDeleteTCB+0x54>
	}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <prvResetNextTaskUnblockTime+0x38>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <prvResetNextTaskUnblockTime+0x3c>)
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040a8:	e008      	b.n	80040bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <prvResetNextTaskUnblockTime+0x38>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <prvResetNextTaskUnblockTime+0x3c>)
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	20000b74 	.word	0x20000b74
 80040cc:	20000bdc 	.word	0x20000bdc

080040d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <xTaskGetSchedulerState+0x34>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040de:	2301      	movs	r3, #1
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	e008      	b.n	80040f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <xTaskGetSchedulerState+0x38>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040ec:	2302      	movs	r3, #2
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	e001      	b.n	80040f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040f6:	687b      	ldr	r3, [r7, #4]
	}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	20000bc8 	.word	0x20000bc8
 8004108:	20000be4 	.word	0x20000be4

0800410c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d056      	beq.n	80041d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <xTaskPriorityDisinherit+0xd0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	429a      	cmp	r2, r3
 800412a:	d00a      	beq.n	8004142 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60bb      	str	r3, [r7, #8]
}
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004164:	1e5a      	subs	r2, r3, #1
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	429a      	cmp	r2, r3
 8004174:	d02c      	beq.n	80041d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417a:	2b00      	cmp	r3, #0
 800417c:	d128      	bne.n	80041d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3304      	adds	r3, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fc70 	bl	8002a68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <xTaskPriorityDisinherit+0xd4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d903      	bls.n	80041b0 <xTaskPriorityDisinherit+0xa4>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <xTaskPriorityDisinherit+0xd4>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <xTaskPriorityDisinherit+0xd8>)
 80041be:	441a      	add	r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7fe fbf1 	bl	80029ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041d0:	697b      	ldr	r3, [r7, #20]
	}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200006e8 	.word	0x200006e8
 80041e0:	20000bc4 	.word	0x20000bc4
 80041e4:	200006ec 	.word	0x200006ec

080041e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <prvAddCurrentTaskToDelayedList+0x90>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f8:	4b20      	ldr	r3, [pc, #128]	; (800427c <prvAddCurrentTaskToDelayedList+0x94>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fc32 	bl	8002a68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d10a      	bne.n	8004222 <prvAddCurrentTaskToDelayedList+0x3a>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <prvAddCurrentTaskToDelayedList+0x94>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4819      	ldr	r0, [pc, #100]	; (8004280 <prvAddCurrentTaskToDelayedList+0x98>)
 800421c:	f7fe fbc7 	bl	80029ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004220:	e026      	b.n	8004270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800422a:	4b14      	ldr	r3, [pc, #80]	; (800427c <prvAddCurrentTaskToDelayedList+0x94>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	429a      	cmp	r2, r3
 8004238:	d209      	bcs.n	800424e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <prvAddCurrentTaskToDelayedList+0x9c>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <prvAddCurrentTaskToDelayedList+0x94>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f7fe fbd5 	bl	80029f6 <vListInsert>
}
 800424c:	e010      	b.n	8004270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <prvAddCurrentTaskToDelayedList+0x94>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fe fbcb 	bl	80029f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	d202      	bcs.n	8004270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <prvAddCurrentTaskToDelayedList+0xa4>)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6013      	str	r3, [r2, #0]
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000bc0 	.word	0x20000bc0
 800427c:	200006e8 	.word	0x200006e8
 8004280:	20000ba8 	.word	0x20000ba8
 8004284:	20000b78 	.word	0x20000b78
 8004288:	20000b74 	.word	0x20000b74
 800428c:	20000bdc 	.word	0x20000bdc

08004290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800429a:	f000 fb07 	bl	80048ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800429e:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <xTimerCreateTimerTask+0x80>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d021      	beq.n	80042ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042ae:	1d3a      	adds	r2, r7, #4
 80042b0:	f107 0108 	add.w	r1, r7, #8
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fb31 	bl	8002920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	9202      	str	r2, [sp, #8]
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	2302      	movs	r3, #2
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2300      	movs	r3, #0
 80042ce:	460a      	mov	r2, r1
 80042d0:	4910      	ldr	r1, [pc, #64]	; (8004314 <xTimerCreateTimerTask+0x84>)
 80042d2:	4811      	ldr	r0, [pc, #68]	; (8004318 <xTimerCreateTimerTask+0x88>)
 80042d4:	f7ff f8de 	bl	8003494 <xTaskCreateStatic>
 80042d8:	4603      	mov	r3, r0
 80042da:	4a10      	ldr	r2, [pc, #64]	; (800431c <xTimerCreateTimerTask+0x8c>)
 80042dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <xTimerCreateTimerTask+0x8c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042e6:	2301      	movs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	613b      	str	r3, [r7, #16]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004306:	697b      	ldr	r3, [r7, #20]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000c18 	.word	0x20000c18
 8004314:	08005248 	.word	0x08005248
 8004318:	08004455 	.word	0x08004455
 800431c:	20000c1c 	.word	0x20000c1c

08004320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	623b      	str	r3, [r7, #32]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <xTimerGenericCommand+0x98>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02a      	beq.n	80043ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b05      	cmp	r3, #5
 8004366:	dc18      	bgt.n	800439a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004368:	f7ff feb2 	bl	80040d0 <xTaskGetSchedulerState>
 800436c:	4603      	mov	r3, r0
 800436e:	2b02      	cmp	r3, #2
 8004370:	d109      	bne.n	8004386 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <xTimerGenericCommand+0x98>)
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	f107 0110 	add.w	r1, r7, #16
 800437a:	2300      	movs	r3, #0
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	f7fe fca1 	bl	8002cc4 <xQueueGenericSend>
 8004382:	6278      	str	r0, [r7, #36]	; 0x24
 8004384:	e012      	b.n	80043ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <xTimerGenericCommand+0x98>)
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f107 0110 	add.w	r1, r7, #16
 800438e:	2300      	movs	r3, #0
 8004390:	2200      	movs	r2, #0
 8004392:	f7fe fc97 	bl	8002cc4 <xQueueGenericSend>
 8004396:	6278      	str	r0, [r7, #36]	; 0x24
 8004398:	e008      	b.n	80043ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <xTimerGenericCommand+0x98>)
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f107 0110 	add.w	r1, r7, #16
 80043a2:	2300      	movs	r3, #0
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	f7fe fd8b 	bl	8002ec0 <xQueueGenericSendFromISR>
 80043aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000c18 	.word	0x20000c18

080043bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <prvProcessExpiredTimer+0x94>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fe fb47 	bl	8002a68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d022      	beq.n	800442e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	18d1      	adds	r1, r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	6978      	ldr	r0, [r7, #20]
 80043f6:	f000 f8d1 	bl	800459c <prvInsertTimerInActiveList>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01f      	beq.n	8004440 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004400:	2300      	movs	r3, #0
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	2100      	movs	r1, #0
 800440a:	6978      	ldr	r0, [r7, #20]
 800440c:	f7ff ff88 	bl	8004320 <xTimerGenericCommand>
 8004410:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d113      	bne.n	8004440 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60fb      	str	r3, [r7, #12]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	b2da      	uxtb	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	6978      	ldr	r0, [r7, #20]
 8004446:	4798      	blx	r3
}
 8004448:	bf00      	nop
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000c10 	.word	0x20000c10

08004454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f857 	bl	8004514 <prvGetNextExpireTime>
 8004466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f803 	bl	8004478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004472:	f000 f8d5 	bl	8004620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004476:	e7f1      	b.n	800445c <prvTimerTask+0x8>

08004478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004482:	f7ff fa43 	bl	800390c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f866 	bl	800455c <prvSampleTimeNow>
 8004490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d130      	bne.n	80044fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <prvProcessTimerOrBlockTask+0x3c>
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d806      	bhi.n	80044b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044a6:	f7ff fa3f 	bl	8003928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff85 	bl	80043bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044b2:	e024      	b.n	80044fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <prvProcessTimerOrBlockTask+0x90>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <prvProcessTimerOrBlockTask+0x50>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <prvProcessTimerOrBlockTask+0x52>
 80044c8:	2300      	movs	r3, #0
 80044ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <prvProcessTimerOrBlockTask+0x94>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fe ffa7 	bl	800342c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044de:	f7ff fa23 	bl	8003928 <xTaskResumeAll>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <prvProcessTimerOrBlockTask+0x98>)
 80044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	f3bf 8f6f 	isb	sy
}
 80044f8:	e001      	b.n	80044fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044fa:	f7ff fa15 	bl	8003928 <xTaskResumeAll>
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000c14 	.word	0x20000c14
 800450c:	20000c18 	.word	0x20000c18
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <prvGetNextExpireTime+0x44>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <prvGetNextExpireTime+0x16>
 8004526:	2201      	movs	r2, #1
 8004528:	e000      	b.n	800452c <prvGetNextExpireTime+0x18>
 800452a:	2200      	movs	r2, #0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004538:	4b07      	ldr	r3, [pc, #28]	; (8004558 <prvGetNextExpireTime+0x44>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e001      	b.n	8004548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000c10 	.word	0x20000c10

0800455c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004564:	f7ff fa7e 	bl	8003a64 <xTaskGetTickCount>
 8004568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <prvSampleTimeNow+0x3c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	429a      	cmp	r2, r3
 8004572:	d205      	bcs.n	8004580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004574:	f000 f936 	bl	80047e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e002      	b.n	8004586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004586:	4a04      	ldr	r2, [pc, #16]	; (8004598 <prvSampleTimeNow+0x3c>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800458c:	68fb      	ldr	r3, [r7, #12]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000c20 	.word	0x20000c20

0800459c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d812      	bhi.n	80045e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad2      	subs	r2, r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d302      	bcc.n	80045d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e01b      	b.n	800460e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <prvInsertTimerInActiveList+0x7c>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3304      	adds	r3, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f7fe fa08 	bl	80029f6 <vListInsert>
 80045e6:	e012      	b.n	800460e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d206      	bcs.n	80045fe <prvInsertTimerInActiveList+0x62>
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e007      	b.n	800460e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <prvInsertTimerInActiveList+0x80>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3304      	adds	r3, #4
 8004606:	4619      	mov	r1, r3
 8004608:	4610      	mov	r0, r2
 800460a:	f7fe f9f4 	bl	80029f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800460e:	697b      	ldr	r3, [r7, #20]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000c14 	.word	0x20000c14
 800461c:	20000c10 	.word	0x20000c10

08004620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08e      	sub	sp, #56	; 0x38
 8004624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004626:	e0ca      	b.n	80047be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	da18      	bge.n	8004660 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	3304      	adds	r3, #4
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	61fb      	str	r3, [r7, #28]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004656:	6850      	ldr	r0, [r2, #4]
 8004658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800465a:	6892      	ldr	r2, [r2, #8]
 800465c:	4611      	mov	r1, r2
 800465e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f2c0 80aa 	blt.w	80047bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe f9f5 	bl	8002a68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800467e:	463b      	mov	r3, r7
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff6b 	bl	800455c <prvSampleTimeNow>
 8004686:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b09      	cmp	r3, #9
 800468c:	f200 8097 	bhi.w	80047be <prvProcessReceivedCommands+0x19e>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <prvProcessReceivedCommands+0x78>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046c1 	.word	0x080046c1
 80046a4:	08004735 	.word	0x08004735
 80046a8:	08004749 	.word	0x08004749
 80046ac:	08004793 	.word	0x08004793
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046c1 	.word	0x080046c1
 80046b8:	08004735 	.word	0x08004735
 80046bc:	08004749 	.word	0x08004749
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	18d1      	adds	r1, r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e0:	f7ff ff5c 	bl	800459c <prvInsertTimerInActiveList>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d069      	beq.n	80047be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d05e      	beq.n	80047be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	441a      	add	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	2100      	movs	r1, #0
 8004710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004712:	f7ff fe05 	bl	8004320 <xTimerGenericCommand>
 8004716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d14f      	bne.n	80047be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	61bb      	str	r3, [r7, #24]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004746:	e03a      	b.n	80047be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	b2da      	uxtb	r2, r3
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	617b      	str	r3, [r7, #20]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	18d1      	adds	r1, r2, r3
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478c:	f7ff ff06 	bl	800459c <prvInsertTimerInActiveList>
					break;
 8004790:	e015      	b.n	80047be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80047a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a2:	f000 fbdd 	bl	8004f60 <vPortFree>
 80047a6:	e00a      	b.n	80047be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047ba:	e000      	b.n	80047be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80047bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <prvProcessReceivedCommands+0x1c0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1d39      	adds	r1, r7, #4
 80047c4:	2200      	movs	r2, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fc16 	bl	8002ff8 <xQueueReceive>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f47f af2a 	bne.w	8004628 <prvProcessReceivedCommands+0x8>
	}
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3730      	adds	r7, #48	; 0x30
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000c18 	.word	0x20000c18

080047e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047ea:	e048      	b.n	800487e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <prvSwitchTimerLists+0xc0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f6:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <prvSwitchTimerLists+0xc0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe f92f 	bl	8002a68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02e      	beq.n	800487e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	429a      	cmp	r2, r3
 8004830:	d90e      	bls.n	8004850 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800483e:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <prvSwitchTimerLists+0xc0>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7fe f8d4 	bl	80029f6 <vListInsert>
 800484e:	e016      	b.n	800487e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004850:	2300      	movs	r3, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	2100      	movs	r1, #0
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fd60 	bl	8004320 <xTimerGenericCommand>
 8004860:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	603b      	str	r3, [r7, #0]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <prvSwitchTimerLists+0xc0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1b1      	bne.n	80047ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <prvSwitchTimerLists+0xc0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <prvSwitchTimerLists+0xc4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <prvSwitchTimerLists+0xc0>)
 8004894:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004896:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <prvSwitchTimerLists+0xc4>)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	6013      	str	r3, [r2, #0]
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000c10 	.word	0x20000c10
 80048a8:	20000c14 	.word	0x20000c14

080048ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048b2:	f000 f967 	bl	8004b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <prvCheckForValidListAndQueue+0x60>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d120      	bne.n	8004900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048be:	4814      	ldr	r0, [pc, #80]	; (8004910 <prvCheckForValidListAndQueue+0x64>)
 80048c0:	f7fe f848 	bl	8002954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048c4:	4813      	ldr	r0, [pc, #76]	; (8004914 <prvCheckForValidListAndQueue+0x68>)
 80048c6:	f7fe f845 	bl	8002954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <prvCheckForValidListAndQueue+0x6c>)
 80048cc:	4a10      	ldr	r2, [pc, #64]	; (8004910 <prvCheckForValidListAndQueue+0x64>)
 80048ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <prvCheckForValidListAndQueue+0x70>)
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <prvCheckForValidListAndQueue+0x68>)
 80048d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048d6:	2300      	movs	r3, #0
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <prvCheckForValidListAndQueue+0x74>)
 80048dc:	4a11      	ldr	r2, [pc, #68]	; (8004924 <prvCheckForValidListAndQueue+0x78>)
 80048de:	2110      	movs	r1, #16
 80048e0:	200a      	movs	r0, #10
 80048e2:	f7fe f953 	bl	8002b8c <xQueueGenericCreateStatic>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <prvCheckForValidListAndQueue+0x60>)
 80048ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <prvCheckForValidListAndQueue+0x60>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <prvCheckForValidListAndQueue+0x60>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	490b      	ldr	r1, [pc, #44]	; (8004928 <prvCheckForValidListAndQueue+0x7c>)
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fd6c 	bl	80033d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004900:	f000 f970 	bl	8004be4 <vPortExitCritical>
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000c18 	.word	0x20000c18
 8004910:	20000be8 	.word	0x20000be8
 8004914:	20000bfc 	.word	0x20000bfc
 8004918:	20000c10 	.word	0x20000c10
 800491c:	20000c14 	.word	0x20000c14
 8004920:	20000cc4 	.word	0x20000cc4
 8004924:	20000c24 	.word	0x20000c24
 8004928:	08005250 	.word	0x08005250

0800492c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3b04      	subs	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b04      	subs	r3, #4
 800494a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b04      	subs	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800495c:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <pxPortInitialiseStack+0x64>)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b14      	subs	r3, #20
 8004966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b04      	subs	r3, #4
 8004972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f06f 0202 	mvn.w	r2, #2
 800497a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3b20      	subs	r3, #32
 8004980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	08004995 	.word	0x08004995

08004994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <prvTaskExitError+0x54>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d00a      	beq.n	80049be <prvTaskExitError+0x2a>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60fb      	str	r3, [r7, #12]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <prvTaskExitError+0x28>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60bb      	str	r3, [r7, #8]
}
 80049d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049d2:	bf00      	nop
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0fc      	beq.n	80049d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	00000000 	.word	0x00000000

080049f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <pxCurrentTCBConst2>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	6808      	ldr	r0, [r1, #0]
 80049f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	f380 8809 	msr	PSP, r0
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8811 	msr	BASEPRI, r0
 8004a0a:	4770      	bx	lr
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst2>:
 8004a10:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a18:	4808      	ldr	r0, [pc, #32]	; (8004a3c <prvPortStartFirstTask+0x24>)
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	6800      	ldr	r0, [r0, #0]
 8004a1e:	f380 8808 	msr	MSP, r0
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8814 	msr	CONTROL, r0
 8004a2a:	b662      	cpsie	i
 8004a2c:	b661      	cpsie	f
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	df00      	svc	0
 8004a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed08 	.word	0xe000ed08

08004a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a46:	4b46      	ldr	r3, [pc, #280]	; (8004b60 <xPortStartScheduler+0x120>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a46      	ldr	r2, [pc, #280]	; (8004b64 <xPortStartScheduler+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10a      	bne.n	8004a66 <xPortStartScheduler+0x26>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	613b      	str	r3, [r7, #16]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a66:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <xPortStartScheduler+0x120>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3f      	ldr	r2, [pc, #252]	; (8004b68 <xPortStartScheduler+0x128>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10a      	bne.n	8004a86 <xPortStartScheduler+0x46>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60fb      	str	r3, [r7, #12]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a86:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <xPortStartScheduler+0x12c>)
 8004a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	22ff      	movs	r2, #255	; 0xff
 8004a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <xPortStartScheduler+0x130>)
 8004aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <xPortStartScheduler+0x134>)
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ab4:	e009      	b.n	8004aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <xPortStartScheduler+0x134>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	4a2d      	ldr	r2, [pc, #180]	; (8004b74 <xPortStartScheduler+0x134>)
 8004abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d0ef      	beq.n	8004ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <xPortStartScheduler+0x134>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f1c3 0307 	rsb	r3, r3, #7
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d00a      	beq.n	8004af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	60bb      	str	r3, [r7, #8]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <xPortStartScheduler+0x134>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <xPortStartScheduler+0x134>)
 8004b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <xPortStartScheduler+0x134>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <xPortStartScheduler+0x134>)
 8004b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b16:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b2e:	f000 f8dd 	bl	8004cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <xPortStartScheduler+0x13c>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b38:	f000 f8fc 	bl	8004d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <xPortStartScheduler+0x140>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0f      	ldr	r2, [pc, #60]	; (8004b80 <xPortStartScheduler+0x140>)
 8004b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b48:	f7ff ff66 	bl	8004a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b4c:	f7ff f854 	bl	8003bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8004b50:	f7ff ff20 	bl	8004994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	e000ed00 	.word	0xe000ed00
 8004b64:	410fc271 	.word	0x410fc271
 8004b68:	410fc270 	.word	0x410fc270
 8004b6c:	e000e400 	.word	0xe000e400
 8004b70:	20000d14 	.word	0x20000d14
 8004b74:	20000d18 	.word	0x20000d18
 8004b78:	e000ed20 	.word	0xe000ed20
 8004b7c:	2000000c 	.word	0x2000000c
 8004b80:	e000ef34 	.word	0xe000ef34

08004b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	607b      	str	r3, [r7, #4]
}
 8004b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <vPortEnterCritical+0x58>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <vPortEnterCritical+0x58>)
 8004ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <vPortEnterCritical+0x58>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10f      	bne.n	8004bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <vPortEnterCritical+0x5c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	603b      	str	r3, [r7, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <vPortEnterCritical+0x4a>
	}
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	2000000c 	.word	0x2000000c
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <vPortExitCritical+0x50>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <vPortExitCritical+0x24>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	607b      	str	r3, [r7, #4]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <vPortExitCritical+0x50>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <vPortExitCritical+0x50>)
 8004c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <vPortExitCritical+0x50>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <vPortExitCritical+0x42>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f383 8811 	msr	BASEPRI, r3
}
 8004c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c
	...

08004c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c40:	f3ef 8009 	mrs	r0, PSP
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <pxCurrentTCBConst>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f01e 0f10 	tst.w	lr, #16
 8004c50:	bf08      	it	eq
 8004c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	6010      	str	r0, [r2, #0]
 8004c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c64:	f380 8811 	msr	BASEPRI, r0
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f7fe ffc2 	bl	8003bf8 <vTaskSwitchContext>
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f380 8811 	msr	BASEPRI, r0
 8004c7c:	bc09      	pop	{r0, r3}
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	6808      	ldr	r0, [r1, #0]
 8004c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c86:	f01e 0f10 	tst.w	lr, #16
 8004c8a:	bf08      	it	eq
 8004c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c90:	f380 8809 	msr	PSP, r0
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	f3af 8000 	nop.w

08004ca0 <pxCurrentTCBConst>:
 8004ca0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop

08004ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
}
 8004cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cc2:	f7fe fedf 	bl	8003a84 <xTaskIncrementTick>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <xPortSysTickHandler+0x40>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f383 8811 	msr	BASEPRI, r3
}
 8004cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <vPortSetupTimerInterrupt+0x38>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <vPortSetupTimerInterrupt+0x3c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <vPortSetupTimerInterrupt+0x40>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <vPortSetupTimerInterrupt+0x44>)
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010
 8004d24:	e000e018 	.word	0xe000e018
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	10624dd3 	.word	0x10624dd3
 8004d30:	e000e014 	.word	0xe000e014

08004d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d44 <vPortEnableVFP+0x10>
 8004d38:	6801      	ldr	r1, [r0, #0]
 8004d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d3e:	6001      	str	r1, [r0, #0]
 8004d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d42:	bf00      	nop
 8004d44:	e000ed88 	.word	0xe000ed88

08004d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d4e:	f3ef 8305 	mrs	r3, IPSR
 8004d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d914      	bls.n	8004d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <vPortValidateInterruptPriority+0x70>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d64:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <vPortValidateInterruptPriority+0x74>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	7afa      	ldrb	r2, [r7, #11]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d20a      	bcs.n	8004d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d84:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <vPortValidateInterruptPriority+0x78>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <vPortValidateInterruptPriority+0x7c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d90a      	bls.n	8004daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	603b      	str	r3, [r7, #0]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <vPortValidateInterruptPriority+0x60>
	}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e3f0 	.word	0xe000e3f0
 8004dbc:	20000d14 	.word	0x20000d14
 8004dc0:	e000ed0c 	.word	0xe000ed0c
 8004dc4:	20000d18 	.word	0x20000d18

08004dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004dd4:	f7fe fd9a 	bl	800390c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dd8:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <pvPortMalloc+0x180>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004de0:	f000 f920 	bl	8005024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004de4:	4b59      	ldr	r3, [pc, #356]	; (8004f4c <pvPortMalloc+0x184>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f040 8093 	bne.w	8004f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01d      	beq.n	8004e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004df8:	2208      	movs	r2, #8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d014      	beq.n	8004e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f023 0307 	bic.w	r3, r3, #7
 8004e10:	3308      	adds	r3, #8
 8004e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <pvPortMalloc+0x6c>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	617b      	str	r3, [r7, #20]
}
 8004e30:	bf00      	nop
 8004e32:	e7fe      	b.n	8004e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06e      	beq.n	8004f18 <pvPortMalloc+0x150>
 8004e3a:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <pvPortMalloc+0x188>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d869      	bhi.n	8004f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e44:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <pvPortMalloc+0x18c>)
 8004e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e48:	4b42      	ldr	r3, [pc, #264]	; (8004f54 <pvPortMalloc+0x18c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4e:	e004      	b.n	8004e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d903      	bls.n	8004e6c <pvPortMalloc+0xa4>
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f1      	bne.n	8004e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e6c:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <pvPortMalloc+0x180>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d050      	beq.n	8004f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	4413      	add	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	2308      	movs	r3, #8
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d91f      	bls.n	8004ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	613b      	str	r3, [r7, #16]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ed2:	69b8      	ldr	r0, [r7, #24]
 8004ed4:	f000 f908 	bl	80050e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <pvPortMalloc+0x188>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <pvPortMalloc+0x188>)
 8004ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <pvPortMalloc+0x188>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <pvPortMalloc+0x190>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d203      	bcs.n	8004efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <pvPortMalloc+0x188>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <pvPortMalloc+0x190>)
 8004ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <pvPortMalloc+0x184>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <pvPortMalloc+0x194>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a11      	ldr	r2, [pc, #68]	; (8004f5c <pvPortMalloc+0x194>)
 8004f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f18:	f7fe fd06 	bl	8003928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <pvPortMalloc+0x174>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60fb      	str	r3, [r7, #12]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <pvPortMalloc+0x172>
	return pvReturn;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3728      	adds	r7, #40	; 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200018dc 	.word	0x200018dc
 8004f4c:	200018f0 	.word	0x200018f0
 8004f50:	200018e0 	.word	0x200018e0
 8004f54:	200018d4 	.word	0x200018d4
 8004f58:	200018e4 	.word	0x200018e4
 8004f5c:	200018e8 	.word	0x200018e8

08004f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d04d      	beq.n	800500e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f72:	2308      	movs	r3, #8
 8004f74:	425b      	negs	r3, r3
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4413      	add	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	4b24      	ldr	r3, [pc, #144]	; (8005018 <vPortFree+0xb8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <vPortFree+0x44>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60fb      	str	r3, [r7, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <vPortFree+0x62>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <vPortFree+0xb8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01e      	beq.n	800500e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d11a      	bne.n	800500e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <vPortFree+0xb8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fe8:	f7fe fc90 	bl	800390c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <vPortFree+0xbc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <vPortFree+0xbc>)
 8004ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ffa:	6938      	ldr	r0, [r7, #16]
 8004ffc:	f000 f874 	bl	80050e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <vPortFree+0xc0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	4a06      	ldr	r2, [pc, #24]	; (8005020 <vPortFree+0xc0>)
 8005008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800500a:	f7fe fc8d 	bl	8003928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800500e:	bf00      	nop
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200018f0 	.word	0x200018f0
 800501c:	200018e0 	.word	0x200018e0
 8005020:	200018ec 	.word	0x200018ec

08005024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800502a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800502e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005030:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <prvHeapInit+0xac>)
 8005032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3307      	adds	r3, #7
 8005042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0307 	bic.w	r3, r3, #7
 800504a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <prvHeapInit+0xac>)
 8005054:	4413      	add	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <prvHeapInit+0xb0>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <prvHeapInit+0xb0>)
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	4413      	add	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005070:	2208      	movs	r2, #8
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0307 	bic.w	r3, r3, #7
 800507e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <prvHeapInit+0xb4>)
 8005084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <prvHeapInit+0xb4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <prvHeapInit+0xb4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <prvHeapInit+0xb4>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <prvHeapInit+0xb8>)
 80050b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <prvHeapInit+0xbc>)
 80050ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <prvHeapInit+0xc0>)
 80050be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000d1c 	.word	0x20000d1c
 80050d4:	200018d4 	.word	0x200018d4
 80050d8:	200018dc 	.word	0x200018dc
 80050dc:	200018e4 	.word	0x200018e4
 80050e0:	200018e0 	.word	0x200018e0
 80050e4:	200018f0 	.word	0x200018f0

080050e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050f0:	4b28      	ldr	r3, [pc, #160]	; (8005194 <prvInsertBlockIntoFreeList+0xac>)
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e002      	b.n	80050fc <prvInsertBlockIntoFreeList+0x14>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d8f7      	bhi.n	80050f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4413      	add	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d108      	bne.n	800512a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	441a      	add	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d118      	bne.n	8005170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <prvInsertBlockIntoFreeList+0xb0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d00d      	beq.n	8005166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	441a      	add	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e008      	b.n	8005178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <prvInsertBlockIntoFreeList+0xb0>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e003      	b.n	8005178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d002      	beq.n	8005186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	200018d4 	.word	0x200018d4
 8005198:	200018dc 	.word	0x200018dc

0800519c <__libc_init_array>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	4d0d      	ldr	r5, [pc, #52]	; (80051d4 <__libc_init_array+0x38>)
 80051a0:	4c0d      	ldr	r4, [pc, #52]	; (80051d8 <__libc_init_array+0x3c>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	2600      	movs	r6, #0
 80051a8:	42a6      	cmp	r6, r4
 80051aa:	d109      	bne.n	80051c0 <__libc_init_array+0x24>
 80051ac:	4d0b      	ldr	r5, [pc, #44]	; (80051dc <__libc_init_array+0x40>)
 80051ae:	4c0c      	ldr	r4, [pc, #48]	; (80051e0 <__libc_init_array+0x44>)
 80051b0:	f000 f82e 	bl	8005210 <_init>
 80051b4:	1b64      	subs	r4, r4, r5
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	2600      	movs	r6, #0
 80051ba:	42a6      	cmp	r6, r4
 80051bc:	d105      	bne.n	80051ca <__libc_init_array+0x2e>
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c4:	4798      	blx	r3
 80051c6:	3601      	adds	r6, #1
 80051c8:	e7ee      	b.n	80051a8 <__libc_init_array+0xc>
 80051ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ce:	4798      	blx	r3
 80051d0:	3601      	adds	r6, #1
 80051d2:	e7f2      	b.n	80051ba <__libc_init_array+0x1e>
 80051d4:	080052e8 	.word	0x080052e8
 80051d8:	080052e8 	.word	0x080052e8
 80051dc:	080052e8 	.word	0x080052e8
 80051e0:	080052ec 	.word	0x080052ec

080051e4 <memcpy>:
 80051e4:	440a      	add	r2, r1
 80051e6:	4291      	cmp	r1, r2
 80051e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051ec:	d100      	bne.n	80051f0 <memcpy+0xc>
 80051ee:	4770      	bx	lr
 80051f0:	b510      	push	{r4, lr}
 80051f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051fa:	4291      	cmp	r1, r2
 80051fc:	d1f9      	bne.n	80051f2 <memcpy+0xe>
 80051fe:	bd10      	pop	{r4, pc}

08005200 <memset>:
 8005200:	4402      	add	r2, r0
 8005202:	4603      	mov	r3, r0
 8005204:	4293      	cmp	r3, r2
 8005206:	d100      	bne.n	800520a <memset+0xa>
 8005208:	4770      	bx	lr
 800520a:	f803 1b01 	strb.w	r1, [r3], #1
 800520e:	e7f9      	b.n	8005204 <memset+0x4>

08005210 <_init>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	bf00      	nop
 8005214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005216:	bc08      	pop	{r3}
 8005218:	469e      	mov	lr, r3
 800521a:	4770      	bx	lr

0800521c <_fini>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr
