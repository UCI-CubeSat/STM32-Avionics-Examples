
logBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000767c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a8  080079a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b0  080079b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080079b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  20000074  08007a2c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b00  08007a2c  00021b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a0b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396e  00000000  00000000  00040aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00044420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00045b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005028  00000000  00000000  00047108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019754  00000000  00000000  0004c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100574  00000000  00000000  00065884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  00165e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077f4 	.word	0x080077f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080077f4 	.word	0x080077f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000576:	2201      	movs	r2, #1
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057a:	f002 fcbf 	bl	8002efc <HAL_UART_Transmit>

	return ch;
 800057e:	687b      	ldr	r3, [r7, #4]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20001988 	.word	0x20001988

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fb58 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f824 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //ITM_Port32(31) = 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8a4 	bl	80006e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f872 	bl	8000684 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //RetargetInit(&huart2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f003 f9be 	bl	8003920 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <main+0x40>)
 80005a6:	2102      	movs	r1, #2
 80005a8:	2010      	movs	r0, #16
 80005aa:	f003 fab0 	bl	8003b0e <osMessageQueueNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <main+0x44>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <main+0x48>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x4c>)
 80005ba:	f003 f9fb 	bl	80039b4 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <main+0x50>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c4:	f003 f9d0 	bl	8003968 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x3c>
 80005ca:	bf00      	nop
 80005cc:	080078b0 	.word	0x080078b0
 80005d0:	20001984 	.word	0x20001984
 80005d4:	0800788c 	.word	0x0800788c
 80005d8:	080007b1 	.word	0x080007b1
 80005dc:	20001a0c 	.word	0x20001a0c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 f92c 	bl	800684c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000606:	f000 fe29 	bl	800125c <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 f928 	bl	8000864 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062e:	230a      	movs	r3, #10
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fe60 	bl	8001308 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064e:	f000 f909 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fa32 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 f8f5 	bl	8000864 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	; 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_USART2_UART_Init+0x58>)
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <MX_USART2_UART_Init+0x5c>)
 800068c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_USART2_UART_Init+0x58>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006c8:	f002 fbca 	bl	8002e60 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 f8c7 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20001988 	.word	0x20001988
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f000 fd3b 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0xc8>)
 800077e:	f000 fb83 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000782:	2320      	movs	r3, #32
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f000 fb74 	bl	8000e88 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000800 	.word	0x48000800

080007b0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f000 fd25 	bl	800120c <HAL_GPIO_TogglePin>
	  char msg[] = "The LED blinks.\r\n";
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <StartBlink01+0x80>)
 80007c4:	f107 040c 	add.w	r4, r7, #12
 80007c8:	461d      	mov	r5, r3
 80007ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ce:	682b      	ldr	r3, [r5, #0]
 80007d0:	8023      	strh	r3, [r4, #0]
	  printf(msg);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 f840 	bl	800685c <iprintf>
	  if (osMessageQueuePut(myQueue01Handle, msg, 40, 0) == osOK){
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <StartBlink01+0x84>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 010c 	add.w	r1, r7, #12
 80007e4:	2300      	movs	r3, #0
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	f003 fa04 	bl	8003bf4 <osMessageQueuePut>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d118      	bne.n	8000824 <StartBlink01+0x74>
		  printf("Successfully send the message to queue.\r\n");
 80007f2:	4811      	ldr	r0, [pc, #68]	; (8000838 <StartBlink01+0x88>)
 80007f4:	f006 f8b8 	bl	8006968 <puts>
		  char receive_msg;
		  if (osMessageQueueGet(myQueue01Handle, &receive_msg, NULL, 0U) == osOK ){
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <StartBlink01+0x84>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	f107 010b 	add.w	r1, r7, #11
 8000800:	2300      	movs	r3, #0
 8000802:	2200      	movs	r2, #0
 8000804:	f003 fa56 	bl	8003cb4 <osMessageQueueGet>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10a      	bne.n	8000824 <StartBlink01+0x74>
			  printf("Received msg: %s\r\n", &receive_msg);
 800080e:	f107 030b 	add.w	r3, r7, #11
 8000812:	4619      	mov	r1, r3
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <StartBlink01+0x8c>)
 8000816:	f006 f821 	bl	800685c <iprintf>
			  osMessageQueueReset(myQueue01Handle);
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <StartBlink01+0x84>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f003 faa6 	bl	8003d70 <osMessageQueueReset>
		  }
	  }
	  osDelay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000828:	f003 f956 	bl	8003ad8 <osDelay>
  {
 800082c:	e7c4      	b.n	80007b8 <StartBlink01+0x8>
 800082e:	bf00      	nop
 8000830:	08007860 	.word	0x08007860
 8000834:	20001984 	.word	0x20001984
 8000838:	08007820 	.word	0x08007820
 800083c:	0800784c 	.word	0x0800784c

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 fa17 	bl	8000c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40001000 	.word	0x40001000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_MspInit+0x5c>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <HAL_MspInit+0x5c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_MspInit+0x5c>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x5c>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_MspInit+0x5c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x5c>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 fac1 	bl	8000e34 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2105      	movs	r1, #5
 80008b6:	2005      	movs	r0, #5
 80008b8:	f000 fabc 	bl	8000e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008bc:	2005      	movs	r0, #5
 80008be:	f000 fad5 	bl	8000e6c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0ac      	sub	sp, #176	; 0xb0
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2288      	movs	r2, #136	; 0x88
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f005 ffab 	bl	800684c <memset>
  if(huart->Instance==USART2)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a21      	ldr	r2, [pc, #132]	; (8000980 <HAL_UART_MspInit+0xb0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d13b      	bne.n	8000978 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000900:	2302      	movs	r3, #2
 8000902:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000904:	2300      	movs	r3, #0
 8000906:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fb19 	bl	8001f44 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000918:	f7ff ffa4 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_UART_MspInit+0xb4>)
 800091e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <HAL_UART_MspInit+0xb4>)
 8000922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000926:	6593      	str	r3, [r2, #88]	; 0x58
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <HAL_UART_MspInit+0xb4>)
 800092a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <HAL_UART_MspInit+0xb4>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <HAL_UART_MspInit+0xb4>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_UART_MspInit+0xb4>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094c:	230c      	movs	r3, #12
 800094e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000964:	2307      	movs	r3, #7
 8000966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f000 fa88 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	37b0      	adds	r7, #176	; 0xb0
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40004400 	.word	0x40004400
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	2036      	movs	r0, #54	; 0x36
 800099e:	f000 fa49 	bl	8000e34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009a2:	2036      	movs	r0, #54	; 0x36
 80009a4:	f000 fa62 	bl	8000e6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_InitTick+0x9c>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_InitTick+0x9c>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6593      	str	r3, [r2, #88]	; 0x58
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_InitTick+0x9c>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fa28 	bl	8001e20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d0:	f001 f9fa 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80009d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_InitTick+0xa0>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	0c9b      	lsrs	r3, r3, #18
 80009e0:	3b01      	subs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_InitTick+0xa4>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <HAL_InitTick+0xa8>)
 80009e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_InitTick+0xa4>)
 80009ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_InitTick+0xa4>)
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_InitTick+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_InitTick+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <HAL_InitTick+0xa4>)
 8000a06:	f001 ff59 	bl	80028bc <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d104      	bne.n	8000a1a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <HAL_InitTick+0xa4>)
 8000a12:	f001 ffb5 	bl	8002980 <HAL_TIM_Base_Start_IT>
 8000a16:	4603      	mov	r3, r0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3730      	adds	r7, #48	; 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	431bde83 	.word	0x431bde83
 8000a2c:	20001a60 	.word	0x20001a60
 8000a30:	40001000 	.word	0x40001000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM6_DAC_IRQHandler+0x10>)
 8000a76:	f001 fff3 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20001a60 	.word	0x20001a60

08000a84 <_read>:
	while (1) {}		/* Make sure we hang here */
}


__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e00a      	b.n	8000aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf0      	blt.n	8000a96 <_read+0x12>
	}

return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	e009      	b.n	8000ae4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd45 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf1      	blt.n	8000ad0 <_write+0x12>
	}
	return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_close>:

int _close(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
	return -1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_isatty>:

int _isatty(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	return 1;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f005 fe24 	bl	80067dc <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20018000 	.word	0x20018000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	20000090 	.word	0x20000090
 8000bc8:	20001b00 	.word	0x20001b00

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf4:	f7ff ffea 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f005 fde3 	bl	80067e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c22:	f7ff fcb3 	bl	800058c <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c34:	080079b8 	.word	0x080079b8
  ldr r2, =_sbss
 8000c38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c3c:	20001b00 	.word	0x20001b00

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_Init+0x3c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_Init+0x3c>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f8df 	bl	8000e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c60:	200f      	movs	r0, #15
 8000c62:	f7ff fe91 	bl	8000988 <HAL_InitTick>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	e001      	b.n	8000c76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c72:	f7ff fdfd 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20001aac 	.word	0x20001aac

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20001aac 	.word	0x20001aac

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff4c 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e46:	f7ff ff61 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	6978      	ldr	r0, [r7, #20]
 8000e52:	f7ff ffb1 	bl	8000db8 <NVIC_EncodePriority>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff80 	bl	8000d64 <__NVIC_SetPriority>
}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff54 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e17f      	b.n	8001198 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8171 	beq.w	8001192 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d005      	beq.n	8000ec8 <HAL_GPIO_Init+0x40>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f003 0201 	and.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d118      	bne.n	8000f68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	6939      	ldr	r1, [r7, #16]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80ac 	beq.w	8001192 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b5f      	ldr	r3, [pc, #380]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a5e      	ldr	r2, [pc, #376]	; (80011b8 <HAL_GPIO_Init+0x330>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <HAL_GPIO_Init+0x330>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001052:	4a5a      	ldr	r2, [pc, #360]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800107c:	d025      	beq.n	80010ca <HAL_GPIO_Init+0x242>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4f      	ldr	r2, [pc, #316]	; (80011c0 <HAL_GPIO_Init+0x338>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01f      	beq.n	80010c6 <HAL_GPIO_Init+0x23e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4e      	ldr	r2, [pc, #312]	; (80011c4 <HAL_GPIO_Init+0x33c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0x23a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_GPIO_Init+0x340>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x236>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4c      	ldr	r2, [pc, #304]	; (80011cc <HAL_GPIO_Init+0x344>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x232>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <HAL_GPIO_Init+0x348>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x22e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4a      	ldr	r2, [pc, #296]	; (80011d4 <HAL_GPIO_Init+0x34c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x22a>
 80010ae:	2306      	movs	r3, #6
 80010b0:	e00c      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x244>
 80010ca:	2300      	movs	r3, #0
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010dc:	4937      	ldr	r1, [pc, #220]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_Init+0x350>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001138:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x350>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f ae78 	bne.w	8000e98 <HAL_GPIO_Init+0x10>
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	48001000 	.word	0x48001000
 80011d0:	48001400 	.word	0x48001400
 80011d4:	48001800 	.word	0x48001800
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43d9      	mvns	r1, r3
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	400b      	ands	r3, r1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <HAL_PWREx_GetVoltageRange+0x18>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800126a:	d130      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001278:	d038      	beq.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2232      	movs	r2, #50	; 0x32
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a0:	e002      	b.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b4:	d102      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f2      	bne.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c8:	d110      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e00f      	b.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012da:	d007      	beq.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3d4      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131a:	4ba1      	ldr	r3, [pc, #644]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001324:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80e4 	beq.w	8001504 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <HAL_RCC_OscConfig+0x4a>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	f040 808b 	bne.w	8001460 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 8087 	bne.w	8001460 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001352:	4b93      	ldr	r3, [pc, #588]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x62>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e3ac      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1a      	ldr	r2, [r3, #32]
 800136e:	4b8c      	ldr	r3, [pc, #560]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <HAL_RCC_OscConfig+0x7c>
 800137a:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001382:	e005      	b.n	8001390 <HAL_RCC_OscConfig+0x88>
 8001384:	4b86      	ldr	r3, [pc, #536]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001390:	4293      	cmp	r3, r2
 8001392:	d223      	bcs.n	80013dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fd73 	bl	8001e84 <RCC_SetFlashLatencyFromMSIRange>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e38d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a8:	4b7d      	ldr	r3, [pc, #500]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a7c      	ldr	r2, [pc, #496]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4977      	ldr	r1, [pc, #476]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	4972      	ldr	r1, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e025      	b.n	8001428 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013dc:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a6f      	ldr	r2, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	496a      	ldr	r1, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013fa:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4965      	ldr	r1, [pc, #404]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fd33 	bl	8001e84 <RCC_SetFlashLatencyFromMSIRange>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e34d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001428:	f000 fc36 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	495a      	ldr	r1, [pc, #360]	; (80015a4 <HAL_RCC_OscConfig+0x29c>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_RCC_OscConfig+0x2a0>)
 8001446:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001448:	4b58      	ldr	r3, [pc, #352]	; (80015ac <HAL_RCC_OscConfig+0x2a4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fa9b 	bl	8000988 <HAL_InitTick>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d052      	beq.n	8001502 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	e331      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d032      	beq.n	80014ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001468:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a4c      	ldr	r2, [pc, #304]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001474:	f7ff fc1a 	bl	8000cac <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800147c:	f7ff fc16 	bl	8000cac <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e31a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	493b      	ldr	r1, [pc, #236]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4936      	ldr	r1, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e01a      	b.n	8001504 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a33      	ldr	r2, [pc, #204]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014da:	f7ff fbe7 	bl	8000cac <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e2:	f7ff fbe3 	bl	8000cac <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e2e7      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1da>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001502:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d074      	beq.n	80015fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b08      	cmp	r3, #8
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x21a>
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d10e      	bne.n	800153a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d10b      	bne.n	800153a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d064      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d160      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e2c4      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x24a>
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e01d      	b.n	800158e <HAL_RCC_OscConfig+0x286>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155a:	d10c      	bne.n	8001576 <HAL_RCC_OscConfig+0x26e>
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e00b      	b.n	800158e <HAL_RCC_OscConfig+0x286>
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 800157c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_RCC_OscConfig+0x298>)
 8001588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb89 	bl	8000cac <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159c:	e011      	b.n	80015c2 <HAL_RCC_OscConfig+0x2ba>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	080078c8 	.word	0x080078c8
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb7c 	bl	8000cac <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e280      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	4baf      	ldr	r3, [pc, #700]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2a8>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb6c 	bl	8000cac <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb68 	bl	8000cac <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e26c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ea:	4ba5      	ldr	r3, [pc, #660]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2d0>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d060      	beq.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b04      	cmp	r3, #4
 800160a:	d005      	beq.n	8001618 <HAL_RCC_OscConfig+0x310>
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d119      	bne.n	8001646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d116      	bne.n	8001646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	4b99      	ldr	r3, [pc, #612]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_OscConfig+0x328>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e249      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b93      	ldr	r3, [pc, #588]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	4990      	ldr	r1, [pc, #576]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001644:	e040      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d023      	beq.n	8001696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164e:	4b8c      	ldr	r3, [pc, #560]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a8b      	ldr	r2, [pc, #556]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fb27 	bl	8000cac <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fb23 	bl	8000cac <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e227      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001674:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b7f      	ldr	r3, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	497c      	ldr	r1, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
 8001694:	e018      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001696:	4b7a      	ldr	r3, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a79      	ldr	r2, [pc, #484]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 800169c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb03 	bl	8000cac <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff faff 	bl	8000cac <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e203      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016bc:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d03c      	beq.n	800174e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01c      	beq.n	8001716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	4a67      	ldr	r2, [pc, #412]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff fade 	bl	8000cac <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff fada 	bl	8000cac <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1de      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001706:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ef      	beq.n	80016f4 <HAL_RCC_OscConfig+0x3ec>
 8001714:	e01b      	b.n	800174e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001716:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fac1 	bl	8000cac <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fabd 	bl	8000cac <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1c1      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ef      	bne.n	800172e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80a6 	beq.w	80018a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001760:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10d      	bne.n	8001788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	4b44      	ldr	r3, [pc, #272]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a43      	ldr	r2, [pc, #268]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001784:	2301      	movs	r3, #1
 8001786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001788:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <HAL_RCC_OscConfig+0x57c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d118      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x57c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a3a      	ldr	r2, [pc, #232]	; (8001884 <HAL_RCC_OscConfig+0x57c>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa84 	bl	8000cac <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a8:	f7ff fa80 	bl	8000cac <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e184      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x57c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4d8>
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80017d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d4:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017de:	e024      	b.n	800182a <HAL_RCC_OscConfig+0x522>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d110      	bne.n	800180a <HAL_RCC_OscConfig+0x502>
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	4a24      	ldr	r2, [pc, #144]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	4a20      	ldr	r2, [pc, #128]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001808:	e00f      	b.n	800182a <HAL_RCC_OscConfig+0x522>
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001822:	f023 0304 	bic.w	r3, r3, #4
 8001826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d016      	beq.n	8001860 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fa3b 	bl	8000cac <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fa37 	bl	8000cac <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e139      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x578>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ed      	beq.n	800183a <HAL_RCC_OscConfig+0x532>
 800185e:	e01a      	b.n	8001896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fa24 	bl	8000cac <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001866:	e00f      	b.n	8001888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff fa20 	bl	8000cac <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d906      	bls.n	8001888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e122      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001888:	4b90      	ldr	r3, [pc, #576]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e8      	bne.n	8001868 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001896:	7ffb      	ldrb	r3, [r7, #31]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b8b      	ldr	r3, [pc, #556]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	4a8a      	ldr	r2, [pc, #552]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 8108 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	f040 80d0 	bne.w	8001a5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018bc:	4b83      	ldr	r3, [pc, #524]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d130      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	3b01      	subs	r3, #1
 80018dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d127      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d11f      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018fc:	2a07      	cmp	r2, #7
 80018fe:	bf14      	ite	ne
 8001900:	2201      	movne	r2, #1
 8001902:	2200      	moveq	r2, #0
 8001904:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001906:	4293      	cmp	r3, r2
 8001908:	d113      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d109      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d06e      	beq.n	8001a10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	d069      	beq.n	8001a0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001938:	4b64      	ldr	r3, [pc, #400]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001944:	4b61      	ldr	r3, [pc, #388]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b7      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001954:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5c      	ldr	r2, [pc, #368]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 800195a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001960:	f7ff f9a4 	bl	8000cac <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f9a0 	bl	8000cac <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e0a4      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197a:	4b54      	ldr	r3, [pc, #336]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <HAL_RCC_OscConfig+0x7c8>)
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001996:	3a01      	subs	r2, #1
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	4311      	orrs	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019a0:	0212      	lsls	r2, r2, #8
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a8:	0852      	lsrs	r2, r2, #1
 80019aa:	3a01      	subs	r2, #1
 80019ac:	0552      	lsls	r2, r2, #21
 80019ae:	4311      	orrs	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b4:	0852      	lsrs	r2, r2, #1
 80019b6:	3a01      	subs	r2, #1
 80019b8:	0652      	lsls	r2, r2, #25
 80019ba:	4311      	orrs	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019c0:	0912      	lsrs	r2, r2, #4
 80019c2:	0452      	lsls	r2, r2, #17
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4941      	ldr	r1, [pc, #260]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e4:	f7ff f962 	bl	8000cac <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f95e 	bl	8000cac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e062      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b33      	ldr	r3, [pc, #204]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0a:	e05a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e059      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d152      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a27      	ldr	r2, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a34:	f7ff f93a 	bl	8000cac <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f936 	bl	8000cac <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e03a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x734>
 8001a5a:	e032      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d02d      	beq.n	8001abe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a80:	f023 0303 	bic.w	r3, r3, #3
 8001a84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001a8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f909 	bl	8000cac <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f905 	bl	8000cac <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e009      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x7c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x796>
 8001abc:	e001      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	f99d808c 	.word	0xf99d808c

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0c8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d910      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 0207 	bic.w	r2, r3, #7
 8001afe:	4961      	ldr	r1, [pc, #388]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0b0      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d04c      	beq.n	8001bbe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2c:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d121      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e09e      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d115      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e092      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5c:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e086      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e07e      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 0203 	bic.w	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	493f      	ldr	r1, [pc, #252]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b8e:	f7ff f88d 	bl	8000cac <HAL_GetTick>
 8001b92:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f889 	bl	8000cac <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e066      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 020c 	and.w	r2, r3, #12
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d1eb      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	492c      	ldr	r1, [pc, #176]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d210      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4924      	ldr	r1, [pc, #144]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_ClockConfig+0x1b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e036      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4918      	ldr	r1, [pc, #96]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4910      	ldr	r1, [pc, #64]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c4a:	f000 f825 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_RCC_ClockConfig+0x1b4>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490c      	ldr	r1, [pc, #48]	; (8001c8c <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fe8a 	bl	8000988 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c78:	7afb      	ldrb	r3, [r7, #11]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	080078c8 	.word	0x080078c8
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x34>
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d121      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d11e      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cd8:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10d      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	e004      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d134      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d003      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0xac>
 8001d3c:	e005      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d40:	617b      	str	r3, [r7, #20]
      break;
 8001d42:	e005      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_GetSysClockFreq+0x114>)
 8001d46:	617b      	str	r3, [r7, #20]
      break;
 8001d48:	e002      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	617b      	str	r3, [r7, #20]
      break;
 8001d4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	fb02 f203 	mul.w	r2, r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	0e5b      	lsrs	r3, r3, #25
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	3301      	adds	r3, #1
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d90:	69bb      	ldr	r3, [r7, #24]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	080078e0 	.word	0x080078e0
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	007a1200 	.word	0x007a1200

08001db0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dcc:	f7ff fff0 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4904      	ldr	r1, [pc, #16]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	080078d8 	.word	0x080078d8

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001df8:	f7ff ffda 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0adb      	lsrs	r3, r3, #11
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4904      	ldr	r1, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	080078d8 	.word	0x080078d8

08001e20 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_GetClockConfig+0x5c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_GetClockConfig+0x5c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_RCC_GetClockConfig+0x60>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0207 	and.w	r2, r3, #7
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	601a      	str	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40022000 	.word	0x40022000

08001e84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e9c:	f7ff f9d0 	bl	8001240 <HAL_PWREx_GetVoltageRange>
 8001ea0:	6178      	str	r0, [r7, #20]
 8001ea2:	e014      	b.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ebc:	f7ff f9c0 	bl	8001240 <HAL_PWREx_GetVoltageRange>
 8001ec0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed4:	d10b      	bne.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b80      	cmp	r3, #128	; 0x80
 8001eda:	d919      	bls.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee0:	d902      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e013      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee8:	2301      	movs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e010      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b80      	cmp	r3, #128	; 0x80
 8001ef2:	d902      	bls.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e00a      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d102      	bne.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f00:	2302      	movs	r3, #2
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e004      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b70      	cmp	r3, #112	; 0x70
 8001f0a:	d101      	bne.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 0207 	bic.w	r2, r3, #7
 8001f18:	4909      	ldr	r1, [pc, #36]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40022000 	.word	0x40022000

08001f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f50:	2300      	movs	r3, #0
 8001f52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d041      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f68:	d02a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f6e:	d824      	bhi.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f74:	d008      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f7a:	d81e      	bhi.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f84:	d010      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f86:	e018      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f88:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a85      	ldr	r2, [pc, #532]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f94:	e015      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fabb 	bl	8002518 <RCCEx_PLLSAI1_Config>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa6:	e00c      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3320      	adds	r3, #32
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fba6 	bl	8002700 <RCCEx_PLLSAI2_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb8:	e003      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fc8:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd6:	4973      	ldr	r1, [pc, #460]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fde:	e001      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d041      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ff8:	d02a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ffe:	d824      	bhi.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002004:	d008      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800200a:	d81e      	bhi.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002014:	d010      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002016:	e018      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002018:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4a61      	ldr	r2, [pc, #388]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002024:	e015      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fa73 	bl	8002518 <RCCEx_PLLSAI1_Config>
 8002032:	4603      	mov	r3, r0
 8002034:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002036:	e00c      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3320      	adds	r3, #32
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fb5e 	bl	8002700 <RCCEx_PLLSAI2_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002048:	e003      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	74fb      	strb	r3, [r7, #19]
      break;
 800204e:	e000      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002058:	4b52      	ldr	r3, [pc, #328]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002066:	494f      	ldr	r1, [pc, #316]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800206e:	e001      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a0 	beq.w	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002096:	2300      	movs	r3, #0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6593      	str	r3, [r2, #88]	; 0x58
 80020a8:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b8:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3a      	ldr	r2, [pc, #232]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fdf2 	bl	8000cac <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ca:	e009      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7fe fdee 	bl	8000cac <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d902      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	74fb      	strb	r3, [r7, #19]
        break;
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ef      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d15c      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01f      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d019      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d016      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe fdad 	bl	8000cac <HAL_GetTick>
 8002152:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002154:	e00b      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7fe fda9 	bl	8000cac <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d902      	bls.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	74fb      	strb	r3, [r7, #19]
            break;
 800216c:	e006      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ec      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002192:	4904      	ldr	r1, [pc, #16]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800219a:	e009      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
 80021a0:	e006      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b0:	7c7b      	ldrb	r3, [r7, #17]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d105      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b6:	4b9e      	ldr	r3, [pc, #632]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a9d      	ldr	r2, [pc, #628]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ce:	4b98      	ldr	r3, [pc, #608]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	f023 0203 	bic.w	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	4994      	ldr	r1, [pc, #592]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f0:	4b8f      	ldr	r3, [pc, #572]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f023 020c 	bic.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	498c      	ldr	r1, [pc, #560]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002212:	4b87      	ldr	r3, [pc, #540]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4983      	ldr	r1, [pc, #524]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002234:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	497b      	ldr	r1, [pc, #492]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002264:	4972      	ldr	r1, [pc, #456]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002278:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	496a      	ldr	r1, [pc, #424]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	4961      	ldr	r1, [pc, #388]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022bc:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	4959      	ldr	r1, [pc, #356]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022de:	4b54      	ldr	r3, [pc, #336]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ec:	4950      	ldr	r1, [pc, #320]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002300:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	4948      	ldr	r1, [pc, #288]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002322:	4b43      	ldr	r3, [pc, #268]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	493f      	ldr	r1, [pc, #252]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d028      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002344:	4b3a      	ldr	r3, [pc, #232]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002352:	4937      	ldr	r1, [pc, #220]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002362:	d106      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002364:	4b32      	ldr	r3, [pc, #200]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a31      	ldr	r2, [pc, #196]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800236e:	60d3      	str	r3, [r2, #12]
 8002370:	e011      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800237a:	d10c      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	2101      	movs	r1, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f8c8 	bl	8002518 <RCCEx_PLLSAI1_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d028      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023a2:	4b23      	ldr	r3, [pc, #140]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	491f      	ldr	r1, [pc, #124]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c0:	d106      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023cc:	60d3      	str	r3, [r2, #12]
 80023ce:	e011      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	2101      	movs	r1, #1
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f899 	bl	8002518 <RCCEx_PLLSAI1_Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02b      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240e:	4908      	ldr	r1, [pc, #32]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800241e:	d109      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a02      	ldr	r2, [pc, #8]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242a:	60d3      	str	r3, [r2, #12]
 800242c:	e014      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800243c:	d10c      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f867 	bl	8002518 <RCCEx_PLLSAI1_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d02f      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002472:	4928      	ldr	r1, [pc, #160]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002482:	d10d      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3304      	adds	r3, #4
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f844 	bl	8002518 <RCCEx_PLLSAI1_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d014      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	74bb      	strb	r3, [r7, #18]
 800249e:	e011      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3320      	adds	r3, #32
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f925 	bl	8002700 <RCCEx_PLLSAI2_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024de:	490d      	ldr	r1, [pc, #52]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002502:	4904      	ldr	r1, [pc, #16]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800250a:	7cbb      	ldrb	r3, [r7, #18]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000

08002518 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002526:	4b75      	ldr	r3, [pc, #468]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d018      	beq.n	8002564 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002532:	4b72      	ldr	r3, [pc, #456]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0203 	and.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d10d      	bne.n	800255e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
       ||
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800254a:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
       ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d047      	beq.n	80025ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	e044      	b.n	80025ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d018      	beq.n	800259e <RCCEx_PLLSAI1_Config+0x86>
 800256c:	2b03      	cmp	r3, #3
 800256e:	d825      	bhi.n	80025bc <RCCEx_PLLSAI1_Config+0xa4>
 8002570:	2b01      	cmp	r3, #1
 8002572:	d002      	beq.n	800257a <RCCEx_PLLSAI1_Config+0x62>
 8002574:	2b02      	cmp	r3, #2
 8002576:	d009      	beq.n	800258c <RCCEx_PLLSAI1_Config+0x74>
 8002578:	e020      	b.n	80025bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800257a:	4b60      	ldr	r3, [pc, #384]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11d      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258a:	e01a      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800258c:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d116      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259c:	e013      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800259e:	4b57      	ldr	r3, [pc, #348]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10f      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025aa:	4b54      	ldr	r3, [pc, #336]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ba:	e006      	b.n	80025ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      break;
 80025c0:	e004      	b.n	80025cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c2:	bf00      	nop
 80025c4:	e002      	b.n	80025cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	430b      	orrs	r3, r1
 80025e8:	4944      	ldr	r1, [pc, #272]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d17d      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a40      	ldr	r2, [pc, #256]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002600:	f7fe fb54 	bl	8000cac <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002606:	e009      	b.n	800261c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002608:	f7fe fb50 	bl	8000cac <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d902      	bls.n	800261c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	73fb      	strb	r3, [r7, #15]
        break;
 800261a:	e005      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800261c:	4b37      	ldr	r3, [pc, #220]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ef      	bne.n	8002608 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d160      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002634:	4b31      	ldr	r3, [pc, #196]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800263c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6892      	ldr	r2, [r2, #8]
 8002644:	0211      	lsls	r1, r2, #8
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68d2      	ldr	r2, [r2, #12]
 800264a:	0912      	lsrs	r2, r2, #4
 800264c:	0452      	lsls	r2, r2, #17
 800264e:	430a      	orrs	r2, r1
 8002650:	492a      	ldr	r1, [pc, #168]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	610b      	str	r3, [r1, #16]
 8002656:	e027      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d112      	bne.n	8002684 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6892      	ldr	r2, [r2, #8]
 800266e:	0211      	lsls	r1, r2, #8
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6912      	ldr	r2, [r2, #16]
 8002674:	0852      	lsrs	r2, r2, #1
 8002676:	3a01      	subs	r2, #1
 8002678:	0552      	lsls	r2, r2, #21
 800267a:	430a      	orrs	r2, r1
 800267c:	491f      	ldr	r1, [pc, #124]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	610b      	str	r3, [r1, #16]
 8002682:	e011      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800268c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6892      	ldr	r2, [r2, #8]
 8002694:	0211      	lsls	r1, r2, #8
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6952      	ldr	r2, [r2, #20]
 800269a:	0852      	lsrs	r2, r2, #1
 800269c:	3a01      	subs	r2, #1
 800269e:	0652      	lsls	r2, r2, #25
 80026a0:	430a      	orrs	r2, r1
 80026a2:	4916      	ldr	r1, [pc, #88]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a13      	ldr	r2, [pc, #76]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fafa 	bl	8000cac <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ba:	e009      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026bc:	f7fe faf6 	bl	8000cac <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d902      	bls.n	80026d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	73fb      	strb	r3, [r7, #15]
          break;
 80026ce:	e005      	b.n	80026dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ef      	beq.n	80026bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	4904      	ldr	r1, [pc, #16]	; (80026fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000

08002700 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800270e:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d018      	beq.n	800274c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d10d      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
       ||
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
       ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d047      	beq.n	80027d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e044      	b.n	80027d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d018      	beq.n	8002786 <RCCEx_PLLSAI2_Config+0x86>
 8002754:	2b03      	cmp	r3, #3
 8002756:	d825      	bhi.n	80027a4 <RCCEx_PLLSAI2_Config+0xa4>
 8002758:	2b01      	cmp	r3, #1
 800275a:	d002      	beq.n	8002762 <RCCEx_PLLSAI2_Config+0x62>
 800275c:	2b02      	cmp	r3, #2
 800275e:	d009      	beq.n	8002774 <RCCEx_PLLSAI2_Config+0x74>
 8002760:	e020      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002762:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11d      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002772:	e01a      	b.n	80027aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d116      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e013      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a2:	e006      	b.n	80027b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e004      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027aa:	bf00      	nop
 80027ac:	e002      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	430b      	orrs	r3, r1
 80027d0:	4939      	ldr	r1, [pc, #228]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d167      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fa60 	bl	8000cac <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ee:	e009      	b.n	8002804 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027f0:	f7fe fa5c 	bl	8000cac <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	73fb      	strb	r3, [r7, #15]
        break;
 8002802:	e005      	b.n	8002810 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ef      	bne.n	80027f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d14a      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	0211      	lsls	r1, r2, #8
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	0912      	lsrs	r2, r2, #4
 8002834:	0452      	lsls	r2, r2, #17
 8002836:	430a      	orrs	r2, r1
 8002838:	491f      	ldr	r1, [pc, #124]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	614b      	str	r3, [r1, #20]
 800283e:	e011      	b.n	8002864 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002848:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6892      	ldr	r2, [r2, #8]
 8002850:	0211      	lsls	r1, r2, #8
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6912      	ldr	r2, [r2, #16]
 8002856:	0852      	lsrs	r2, r2, #1
 8002858:	3a01      	subs	r2, #1
 800285a:	0652      	lsls	r2, r2, #25
 800285c:	430a      	orrs	r2, r1
 800285e:	4916      	ldr	r1, [pc, #88]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002860:	4313      	orrs	r3, r2
 8002862:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fa1c 	bl	8000cac <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002876:	e009      	b.n	800288c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002878:	f7fe fa18 	bl	8000cac <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d902      	bls.n	800288c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	73fb      	strb	r3, [r7, #15]
          break;
 800288a:	e005      	b.n	8002898 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4904      	ldr	r1, [pc, #16]	; (80028b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e049      	b.n	8002962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f841 	bl	800296a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 f9f8 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d001      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04f      	b.n	8002a38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <HAL_TIM_Base_Start_IT+0xc4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01d      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x76>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d018      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x76>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_TIM_Base_Start_IT+0xc8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x76>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_TIM_Base_Start_IT+0xcc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x76>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d009      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x76>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x76>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d115      	bne.n	8002a22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d015      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0xb4>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0e:	d011      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a20:	e008      	b.n	8002a34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e000      	b.n	8002a36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40000c00 	.word	0x40000c00
 8002a54:	40013400 	.word	0x40013400
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	00010007 	.word	0x00010007

08002a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0202 	mvn.w	r2, #2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f905 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8f7 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f908 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0204 	mvn.w	r2, #4
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8db 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8cd 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8de 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0208 	mvn.w	r2, #8
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8b1 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8a3 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8b4 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0210 	mvn.w	r2, #16
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f887 	bl	8002cb2 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f879 	bl	8002c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f88a 	bl	8002cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0201 	mvn.w	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fe2e 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	2b80      	cmp	r3, #128	; 0x80
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f914 	bl	8002e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	d10e      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d107      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f907 	bl	8002e4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d10e      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f838 	bl	8002cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d10e      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d107      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f06f 0220 	mvn.w	r2, #32
 8002c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f8c7 	bl	8002e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <TIM_Base_SetConfig+0x114>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d00f      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3d      	ldr	r2, [pc, #244]	; (8002e08 <TIM_Base_SetConfig+0x118>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00b      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <TIM_Base_SetConfig+0x11c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <TIM_Base_SetConfig+0x120>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <TIM_Base_SetConfig+0x114>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01f      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d01b      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <TIM_Base_SetConfig+0x118>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d017      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <TIM_Base_SetConfig+0x11c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <TIM_Base_SetConfig+0x120>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00f      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a28      	ldr	r2, [pc, #160]	; (8002e18 <TIM_Base_SetConfig+0x128>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <TIM_Base_SetConfig+0x12c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <TIM_Base_SetConfig+0x9a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <TIM_Base_SetConfig+0x130>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <TIM_Base_SetConfig+0x114>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00f      	beq.n	8002de8 <TIM_Base_SetConfig+0xf8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <TIM_Base_SetConfig+0xf8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a11      	ldr	r2, [pc, #68]	; (8002e18 <TIM_Base_SetConfig+0x128>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <TIM_Base_SetConfig+0xf8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <TIM_Base_SetConfig+0x12c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <TIM_Base_SetConfig+0xf8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <TIM_Base_SetConfig+0x130>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d103      	bne.n	8002df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	615a      	str	r2, [r3, #20]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40013400 	.word	0x40013400
 8002e18:	40014000 	.word	0x40014000
 8002e1c:	40014400 	.word	0x40014400
 8002e20:	40014800 	.word	0x40014800

08002e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e040      	b.n	8002ef4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fd fd24 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	; 0x24
 8002e8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8c0 	bl	8003024 <UART_SetConfig>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e022      	b.n	8002ef4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fb3e 	bl	8003538 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fbc5 	bl	800367c <UART_CheckIdleState>
 8002ef2:	4603      	mov	r3, r0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	f040 8082 	bne.w	800301a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_UART_Transmit+0x26>
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e07a      	b.n	800301c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Transmit+0x38>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e073      	b.n	800301c <HAL_UART_Transmit+0x120>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fd feaf 	bl	8000cac <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x80>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f8c:	e02d      	b.n	8002fea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fbb8 	bl	800370e <UART_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e039      	b.n	800301c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	e008      	b.n	8002fd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b292      	uxth	r2, r2
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1cb      	bne.n	8002f8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2140      	movs	r1, #64	; 0x40
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fb84 	bl	800370e <UART_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e005      	b.n	800301c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3720      	adds	r7, #32
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4313      	orrs	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4bad      	ldr	r3, [pc, #692]	; (8003304 <UART_SetConfig+0x2e0>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	69f9      	ldr	r1, [r7, #28]
 8003058:	430b      	orrs	r3, r1
 800305a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4aa2      	ldr	r2, [pc, #648]	; (8003308 <UART_SetConfig+0x2e4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	4313      	orrs	r3, r2
 800308a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	430a      	orrs	r2, r1
 800309e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a99      	ldr	r2, [pc, #612]	; (800330c <UART_SetConfig+0x2e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d121      	bne.n	80030ee <UART_SetConfig+0xca>
 80030aa:	4b99      	ldr	r3, [pc, #612]	; (8003310 <UART_SetConfig+0x2ec>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d817      	bhi.n	80030e8 <UART_SetConfig+0xc4>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <UART_SetConfig+0x9c>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030d7 	.word	0x080030d7
 80030cc:	080030e3 	.word	0x080030e3
 80030d0:	2301      	movs	r3, #1
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	e0e7      	b.n	80032a6 <UART_SetConfig+0x282>
 80030d6:	2302      	movs	r3, #2
 80030d8:	76fb      	strb	r3, [r7, #27]
 80030da:	e0e4      	b.n	80032a6 <UART_SetConfig+0x282>
 80030dc:	2304      	movs	r3, #4
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	e0e1      	b.n	80032a6 <UART_SetConfig+0x282>
 80030e2:	2308      	movs	r3, #8
 80030e4:	76fb      	strb	r3, [r7, #27]
 80030e6:	e0de      	b.n	80032a6 <UART_SetConfig+0x282>
 80030e8:	2310      	movs	r3, #16
 80030ea:	76fb      	strb	r3, [r7, #27]
 80030ec:	e0db      	b.n	80032a6 <UART_SetConfig+0x282>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a88      	ldr	r2, [pc, #544]	; (8003314 <UART_SetConfig+0x2f0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d132      	bne.n	800315e <UART_SetConfig+0x13a>
 80030f8:	4b85      	ldr	r3, [pc, #532]	; (8003310 <UART_SetConfig+0x2ec>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d828      	bhi.n	8003158 <UART_SetConfig+0x134>
 8003106:	a201      	add	r2, pc, #4	; (adr r2, 800310c <UART_SetConfig+0xe8>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003141 	.word	0x08003141
 8003110:	08003159 	.word	0x08003159
 8003114:	08003159 	.word	0x08003159
 8003118:	08003159 	.word	0x08003159
 800311c:	0800314d 	.word	0x0800314d
 8003120:	08003159 	.word	0x08003159
 8003124:	08003159 	.word	0x08003159
 8003128:	08003159 	.word	0x08003159
 800312c:	08003147 	.word	0x08003147
 8003130:	08003159 	.word	0x08003159
 8003134:	08003159 	.word	0x08003159
 8003138:	08003159 	.word	0x08003159
 800313c:	08003153 	.word	0x08003153
 8003140:	2300      	movs	r3, #0
 8003142:	76fb      	strb	r3, [r7, #27]
 8003144:	e0af      	b.n	80032a6 <UART_SetConfig+0x282>
 8003146:	2302      	movs	r3, #2
 8003148:	76fb      	strb	r3, [r7, #27]
 800314a:	e0ac      	b.n	80032a6 <UART_SetConfig+0x282>
 800314c:	2304      	movs	r3, #4
 800314e:	76fb      	strb	r3, [r7, #27]
 8003150:	e0a9      	b.n	80032a6 <UART_SetConfig+0x282>
 8003152:	2308      	movs	r3, #8
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e0a6      	b.n	80032a6 <UART_SetConfig+0x282>
 8003158:	2310      	movs	r3, #16
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e0a3      	b.n	80032a6 <UART_SetConfig+0x282>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6d      	ldr	r2, [pc, #436]	; (8003318 <UART_SetConfig+0x2f4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d120      	bne.n	80031aa <UART_SetConfig+0x186>
 8003168:	4b69      	ldr	r3, [pc, #420]	; (8003310 <UART_SetConfig+0x2ec>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003172:	2b30      	cmp	r3, #48	; 0x30
 8003174:	d013      	beq.n	800319e <UART_SetConfig+0x17a>
 8003176:	2b30      	cmp	r3, #48	; 0x30
 8003178:	d814      	bhi.n	80031a4 <UART_SetConfig+0x180>
 800317a:	2b20      	cmp	r3, #32
 800317c:	d009      	beq.n	8003192 <UART_SetConfig+0x16e>
 800317e:	2b20      	cmp	r3, #32
 8003180:	d810      	bhi.n	80031a4 <UART_SetConfig+0x180>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <UART_SetConfig+0x168>
 8003186:	2b10      	cmp	r3, #16
 8003188:	d006      	beq.n	8003198 <UART_SetConfig+0x174>
 800318a:	e00b      	b.n	80031a4 <UART_SetConfig+0x180>
 800318c:	2300      	movs	r3, #0
 800318e:	76fb      	strb	r3, [r7, #27]
 8003190:	e089      	b.n	80032a6 <UART_SetConfig+0x282>
 8003192:	2302      	movs	r3, #2
 8003194:	76fb      	strb	r3, [r7, #27]
 8003196:	e086      	b.n	80032a6 <UART_SetConfig+0x282>
 8003198:	2304      	movs	r3, #4
 800319a:	76fb      	strb	r3, [r7, #27]
 800319c:	e083      	b.n	80032a6 <UART_SetConfig+0x282>
 800319e:	2308      	movs	r3, #8
 80031a0:	76fb      	strb	r3, [r7, #27]
 80031a2:	e080      	b.n	80032a6 <UART_SetConfig+0x282>
 80031a4:	2310      	movs	r3, #16
 80031a6:	76fb      	strb	r3, [r7, #27]
 80031a8:	e07d      	b.n	80032a6 <UART_SetConfig+0x282>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5b      	ldr	r2, [pc, #364]	; (800331c <UART_SetConfig+0x2f8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d120      	bne.n	80031f6 <UART_SetConfig+0x1d2>
 80031b4:	4b56      	ldr	r3, [pc, #344]	; (8003310 <UART_SetConfig+0x2ec>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031be:	2bc0      	cmp	r3, #192	; 0xc0
 80031c0:	d013      	beq.n	80031ea <UART_SetConfig+0x1c6>
 80031c2:	2bc0      	cmp	r3, #192	; 0xc0
 80031c4:	d814      	bhi.n	80031f0 <UART_SetConfig+0x1cc>
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d009      	beq.n	80031de <UART_SetConfig+0x1ba>
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d810      	bhi.n	80031f0 <UART_SetConfig+0x1cc>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <UART_SetConfig+0x1b4>
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	d006      	beq.n	80031e4 <UART_SetConfig+0x1c0>
 80031d6:	e00b      	b.n	80031f0 <UART_SetConfig+0x1cc>
 80031d8:	2300      	movs	r3, #0
 80031da:	76fb      	strb	r3, [r7, #27]
 80031dc:	e063      	b.n	80032a6 <UART_SetConfig+0x282>
 80031de:	2302      	movs	r3, #2
 80031e0:	76fb      	strb	r3, [r7, #27]
 80031e2:	e060      	b.n	80032a6 <UART_SetConfig+0x282>
 80031e4:	2304      	movs	r3, #4
 80031e6:	76fb      	strb	r3, [r7, #27]
 80031e8:	e05d      	b.n	80032a6 <UART_SetConfig+0x282>
 80031ea:	2308      	movs	r3, #8
 80031ec:	76fb      	strb	r3, [r7, #27]
 80031ee:	e05a      	b.n	80032a6 <UART_SetConfig+0x282>
 80031f0:	2310      	movs	r3, #16
 80031f2:	76fb      	strb	r3, [r7, #27]
 80031f4:	e057      	b.n	80032a6 <UART_SetConfig+0x282>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a49      	ldr	r2, [pc, #292]	; (8003320 <UART_SetConfig+0x2fc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d125      	bne.n	800324c <UART_SetConfig+0x228>
 8003200:	4b43      	ldr	r3, [pc, #268]	; (8003310 <UART_SetConfig+0x2ec>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320e:	d017      	beq.n	8003240 <UART_SetConfig+0x21c>
 8003210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003214:	d817      	bhi.n	8003246 <UART_SetConfig+0x222>
 8003216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321a:	d00b      	beq.n	8003234 <UART_SetConfig+0x210>
 800321c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003220:	d811      	bhi.n	8003246 <UART_SetConfig+0x222>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <UART_SetConfig+0x20a>
 8003226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322a:	d006      	beq.n	800323a <UART_SetConfig+0x216>
 800322c:	e00b      	b.n	8003246 <UART_SetConfig+0x222>
 800322e:	2300      	movs	r3, #0
 8003230:	76fb      	strb	r3, [r7, #27]
 8003232:	e038      	b.n	80032a6 <UART_SetConfig+0x282>
 8003234:	2302      	movs	r3, #2
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e035      	b.n	80032a6 <UART_SetConfig+0x282>
 800323a:	2304      	movs	r3, #4
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e032      	b.n	80032a6 <UART_SetConfig+0x282>
 8003240:	2308      	movs	r3, #8
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e02f      	b.n	80032a6 <UART_SetConfig+0x282>
 8003246:	2310      	movs	r3, #16
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e02c      	b.n	80032a6 <UART_SetConfig+0x282>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2d      	ldr	r2, [pc, #180]	; (8003308 <UART_SetConfig+0x2e4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d125      	bne.n	80032a2 <UART_SetConfig+0x27e>
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <UART_SetConfig+0x2ec>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003264:	d017      	beq.n	8003296 <UART_SetConfig+0x272>
 8003266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800326a:	d817      	bhi.n	800329c <UART_SetConfig+0x278>
 800326c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003270:	d00b      	beq.n	800328a <UART_SetConfig+0x266>
 8003272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003276:	d811      	bhi.n	800329c <UART_SetConfig+0x278>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <UART_SetConfig+0x260>
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003280:	d006      	beq.n	8003290 <UART_SetConfig+0x26c>
 8003282:	e00b      	b.n	800329c <UART_SetConfig+0x278>
 8003284:	2300      	movs	r3, #0
 8003286:	76fb      	strb	r3, [r7, #27]
 8003288:	e00d      	b.n	80032a6 <UART_SetConfig+0x282>
 800328a:	2302      	movs	r3, #2
 800328c:	76fb      	strb	r3, [r7, #27]
 800328e:	e00a      	b.n	80032a6 <UART_SetConfig+0x282>
 8003290:	2304      	movs	r3, #4
 8003292:	76fb      	strb	r3, [r7, #27]
 8003294:	e007      	b.n	80032a6 <UART_SetConfig+0x282>
 8003296:	2308      	movs	r3, #8
 8003298:	76fb      	strb	r3, [r7, #27]
 800329a:	e004      	b.n	80032a6 <UART_SetConfig+0x282>
 800329c:	2310      	movs	r3, #16
 800329e:	76fb      	strb	r3, [r7, #27]
 80032a0:	e001      	b.n	80032a6 <UART_SetConfig+0x282>
 80032a2:	2310      	movs	r3, #16
 80032a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <UART_SetConfig+0x2e4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	f040 8087 	bne.w	80033c0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032b2:	7efb      	ldrb	r3, [r7, #27]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d837      	bhi.n	8003328 <UART_SetConfig+0x304>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <UART_SetConfig+0x29c>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	08003329 	.word	0x08003329
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	08003329 	.word	0x08003329
 80032d0:	080032f3 	.word	0x080032f3
 80032d4:	08003329 	.word	0x08003329
 80032d8:	08003329 	.word	0x08003329
 80032dc:	08003329 	.word	0x08003329
 80032e0:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7fe fd70 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80032e8:	6178      	str	r0, [r7, #20]
        break;
 80032ea:	e022      	b.n	8003332 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <UART_SetConfig+0x300>)
 80032ee:	617b      	str	r3, [r7, #20]
        break;
 80032f0:	e01f      	b.n	8003332 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7fe fcd1 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 80032f6:	6178      	str	r0, [r7, #20]
        break;
 80032f8:	e01b      	b.n	8003332 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	617b      	str	r3, [r7, #20]
        break;
 8003300:	e017      	b.n	8003332 <UART_SetConfig+0x30e>
 8003302:	bf00      	nop
 8003304:	efff69f3 	.word	0xefff69f3
 8003308:	40008000 	.word	0x40008000
 800330c:	40013800 	.word	0x40013800
 8003310:	40021000 	.word	0x40021000
 8003314:	40004400 	.word	0x40004400
 8003318:	40004800 	.word	0x40004800
 800331c:	40004c00 	.word	0x40004c00
 8003320:	40005000 	.word	0x40005000
 8003324:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	76bb      	strb	r3, [r7, #26]
        break;
 8003330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80f1 	beq.w	800351c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	429a      	cmp	r2, r3
 8003348:	d305      	bcc.n	8003356 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	429a      	cmp	r2, r3
 8003354:	d902      	bls.n	800335c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	76bb      	strb	r3, [r7, #26]
 800335a:	e0df      	b.n	800351c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4618      	mov	r0, r3
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	020b      	lsls	r3, r1, #8
 800336e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003372:	0202      	lsls	r2, r0, #8
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	6849      	ldr	r1, [r1, #4]
 8003378:	0849      	lsrs	r1, r1, #1
 800337a:	4608      	mov	r0, r1
 800337c:	f04f 0100 	mov.w	r1, #0
 8003380:	1814      	adds	r4, r2, r0
 8003382:	eb43 0501 	adc.w	r5, r3, r1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	461a      	mov	r2, r3
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	4620      	mov	r0, r4
 8003392:	4629      	mov	r1, r5
 8003394:	f7fc ff6c 	bl	8000270 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a6:	d308      	bcc.n	80033ba <UART_SetConfig+0x396>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ae:	d204      	bcs.n	80033ba <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	e0b0      	b.n	800351c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	76bb      	strb	r3, [r7, #26]
 80033be:	e0ad      	b.n	800351c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c8:	d15b      	bne.n	8003482 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80033ca:	7efb      	ldrb	r3, [r7, #27]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d828      	bhi.n	8003422 <UART_SetConfig+0x3fe>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <UART_SetConfig+0x3b4>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033fd 	.word	0x080033fd
 80033dc:	08003405 	.word	0x08003405
 80033e0:	0800340d 	.word	0x0800340d
 80033e4:	08003423 	.word	0x08003423
 80033e8:	08003413 	.word	0x08003413
 80033ec:	08003423 	.word	0x08003423
 80033f0:	08003423 	.word	0x08003423
 80033f4:	08003423 	.word	0x08003423
 80033f8:	0800341b 	.word	0x0800341b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033fc:	f7fe fce4 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8003400:	6178      	str	r0, [r7, #20]
        break;
 8003402:	e013      	b.n	800342c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7fe fcf6 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 8003408:	6178      	str	r0, [r7, #20]
        break;
 800340a:	e00f      	b.n	800342c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800340c:	4b49      	ldr	r3, [pc, #292]	; (8003534 <UART_SetConfig+0x510>)
 800340e:	617b      	str	r3, [r7, #20]
        break;
 8003410:	e00c      	b.n	800342c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003412:	f7fe fc41 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8003416:	6178      	str	r0, [r7, #20]
        break;
 8003418:	e008      	b.n	800342c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341e:	617b      	str	r3, [r7, #20]
        break;
 8003420:	e004      	b.n	800342c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	76bb      	strb	r3, [r7, #26]
        break;
 800342a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d074      	beq.n	800351c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d916      	bls.n	800347c <UART_SetConfig+0x458>
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d212      	bcs.n	800347c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	b29b      	uxth	r3, r3
 800345a:	f023 030f 	bic.w	r3, r3, #15
 800345e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	b29a      	uxth	r2, r3
 800346c:	89fb      	ldrh	r3, [r7, #14]
 800346e:	4313      	orrs	r3, r2
 8003470:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	89fa      	ldrh	r2, [r7, #14]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	e04f      	b.n	800351c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	76bb      	strb	r3, [r7, #26]
 8003480:	e04c      	b.n	800351c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003482:	7efb      	ldrb	r3, [r7, #27]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d828      	bhi.n	80034da <UART_SetConfig+0x4b6>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <UART_SetConfig+0x46c>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034c5 	.word	0x080034c5
 800349c:	080034db 	.word	0x080034db
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034db 	.word	0x080034db
 80034a8:	080034db 	.word	0x080034db
 80034ac:	080034db 	.word	0x080034db
 80034b0:	080034d3 	.word	0x080034d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b4:	f7fe fc88 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80034b8:	6178      	str	r0, [r7, #20]
        break;
 80034ba:	e013      	b.n	80034e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7fe fc9a 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 80034c0:	6178      	str	r0, [r7, #20]
        break;
 80034c2:	e00f      	b.n	80034e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <UART_SetConfig+0x510>)
 80034c6:	617b      	str	r3, [r7, #20]
        break;
 80034c8:	e00c      	b.n	80034e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ca:	f7fe fbe5 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 80034ce:	6178      	str	r0, [r7, #20]
        break;
 80034d0:	e008      	b.n	80034e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d6:	617b      	str	r3, [r7, #20]
        break;
 80034d8:	e004      	b.n	80034e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
        break;
 80034e2:	bf00      	nop
    }

    if (pclk != 0U)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d018      	beq.n	800351c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	085a      	lsrs	r2, r3, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	441a      	add	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b0f      	cmp	r3, #15
 8003502:	d909      	bls.n	8003518 <UART_SetConfig+0x4f4>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350a:	d205      	bcs.n	8003518 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	e001      	b.n	800351c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003528:	7ebb      	ldrb	r3, [r7, #26]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bdb0      	pop	{r4, r5, r7, pc}
 8003532:	bf00      	nop
 8003534:	00f42400 	.word	0x00f42400

08003538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01a      	beq.n	800364e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003636:	d10a      	bne.n	800364e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800368c:	f7fd fb0e 	bl	8000cac <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d10e      	bne.n	80036be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f82d 	bl	800370e <UART_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e023      	b.n	8003706 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d10e      	bne.n	80036ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f817 	bl	800370e <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00d      	b.n	8003706 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b09c      	sub	sp, #112	; 0x70
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371e:	e0a5      	b.n	800386c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	f000 80a1 	beq.w	800386c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fd fabf 	bl	8000cac <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <UART_WaitOnFlagUntilTimeout+0x32>
 800373a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800373c:	2b00      	cmp	r3, #0
 800373e:	d13e      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003750:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003754:	667b      	str	r3, [r7, #100]	; 0x64
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800375e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003760:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003764:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800376c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e6      	bne.n	8003740 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3308      	adds	r3, #8
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	663b      	str	r3, [r7, #96]	; 0x60
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3308      	adds	r3, #8
 8003790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003792:	64ba      	str	r2, [r7, #72]	; 0x48
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e5      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e067      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d04f      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037da:	d147      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
 8003806:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800380a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e6      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3308      	adds	r3, #8
 800381e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	613b      	str	r3, [r7, #16]
   return(result);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3308      	adds	r3, #8
 8003836:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003838:	623a      	str	r2, [r7, #32]
 800383a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	69f9      	ldr	r1, [r7, #28]
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	61bb      	str	r3, [r7, #24]
   return(result);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e5      	bne.n	8003818 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e010      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	429a      	cmp	r2, r3
 8003888:	f43f af4a 	beq.w	8003720 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3770      	adds	r7, #112	; 0x70
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <__NVIC_SetPriority>:
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db0a      	blt.n	80038c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	490c      	ldr	r1, [pc, #48]	; (80038e4 <__NVIC_SetPriority+0x4c>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	440b      	add	r3, r1
 80038bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038c0:	e00a      	b.n	80038d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <__NVIC_SetPriority+0x50>)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3b04      	subs	r3, #4
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	440b      	add	r3, r1
 80038d6:	761a      	strb	r2, [r3, #24]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000e100 	.word	0xe000e100
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <SysTick_Handler+0x1c>)
 80038f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80038f4:	f001 ff0a 	bl	800570c <xTaskGetSchedulerState>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d001      	beq.n	8003902 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80038fe:	f002 fcf3 	bl	80062e8 <xPortSysTickHandler>
  }
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003910:	2100      	movs	r1, #0
 8003912:	f06f 0004 	mvn.w	r0, #4
 8003916:	f7ff ffbf 	bl	8003898 <__NVIC_SetPriority>
#endif
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003926:	f3ef 8305 	mrs	r3, IPSR
 800392a:	603b      	str	r3, [r7, #0]
  return(result);
 800392c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003932:	f06f 0305 	mvn.w	r3, #5
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	e00c      	b.n	8003954 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <osKernelInitialize+0x44>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <osKernelInitialize+0x44>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003948:	2300      	movs	r3, #0
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	e002      	b.n	8003954 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003954:	687b      	ldr	r3, [r7, #4]
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000094 	.word	0x20000094

08003968 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800396e:	f3ef 8305 	mrs	r3, IPSR
 8003972:	603b      	str	r3, [r7, #0]
  return(result);
 8003974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <osKernelStart+0x1a>
    stat = osErrorISR;
 800397a:	f06f 0305 	mvn.w	r3, #5
 800397e:	607b      	str	r3, [r7, #4]
 8003980:	e010      	b.n	80039a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <osKernelStart+0x48>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d109      	bne.n	800399e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800398a:	f7ff ffbf 	bl	800390c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <osKernelStart+0x48>)
 8003990:	2202      	movs	r2, #2
 8003992:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003994:	f001 fa72 	bl	8004e7c <vTaskStartScheduler>
      stat = osOK;
 8003998:	2300      	movs	r3, #0
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	e002      	b.n	80039a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800399e:	f04f 33ff 	mov.w	r3, #4294967295
 80039a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039a4:	687b      	ldr	r3, [r7, #4]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000094 	.word	0x20000094

080039b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08e      	sub	sp, #56	; 0x38
 80039b8:	af04      	add	r7, sp, #16
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c4:	f3ef 8305 	mrs	r3, IPSR
 80039c8:	617b      	str	r3, [r7, #20]
  return(result);
 80039ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d17e      	bne.n	8003ace <osThreadNew+0x11a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d07b      	beq.n	8003ace <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039da:	2318      	movs	r3, #24
 80039dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d045      	beq.n	8003a7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <osThreadNew+0x48>
        name = attr->name;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <osThreadNew+0x6e>
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b38      	cmp	r3, #56	; 0x38
 8003a14:	d805      	bhi.n	8003a22 <osThreadNew+0x6e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <osThreadNew+0x72>
        return (NULL);
 8003a22:	2300      	movs	r3, #0
 8003a24:	e054      	b.n	8003ad0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00e      	beq.n	8003a5c <osThreadNew+0xa8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b5b      	cmp	r3, #91	; 0x5b
 8003a44:	d90a      	bls.n	8003a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <osThreadNew+0xa8>
        mem = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e010      	b.n	8003a7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10c      	bne.n	8003a7e <osThreadNew+0xca>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d108      	bne.n	8003a7e <osThreadNew+0xca>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <osThreadNew+0xca>
          mem = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e001      	b.n	8003a7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d110      	bne.n	8003aa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a8c:	9202      	str	r2, [sp, #8]
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f001 f818 	bl	8004ad0 <xTaskCreateStatic>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e013      	b.n	8003ace <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d110      	bne.n	8003ace <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	f107 0310 	add.w	r3, r7, #16
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f001 f863 	bl	8004b8a <xTaskCreate>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <osThreadNew+0x11a>
            hTask = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ace:	693b      	ldr	r3, [r7, #16]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae0:	f3ef 8305 	mrs	r3, IPSR
 8003ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <osDelay+0x1c>
    stat = osErrorISR;
 8003aec:	f06f 0305 	mvn.w	r3, #5
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e007      	b.n	8003b04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 f988 	bl	8004e14 <vTaskDelay>
    }
  }

  return (stat);
 8003b04:	68fb      	ldr	r3, [r7, #12]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08a      	sub	sp, #40	; 0x28
 8003b12:	af02      	add	r7, sp, #8
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b1e:	f3ef 8305 	mrs	r3, IPSR
 8003b22:	613b      	str	r3, [r7, #16]
  return(result);
 8003b24:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d15f      	bne.n	8003bea <osMessageQueueNew+0xdc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05c      	beq.n	8003bea <osMessageQueueNew+0xdc>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d059      	beq.n	8003bea <osMessageQueueNew+0xdc>
    mem = -1;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d029      	beq.n	8003b96 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d012      	beq.n	8003b70 <osMessageQueueNew+0x62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b4f      	cmp	r3, #79	; 0x4f
 8003b50:	d90e      	bls.n	8003b70 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <osMessageQueueNew+0x62>
        mem = 1;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e014      	b.n	8003b9a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d110      	bne.n	8003b9a <osMessageQueueNew+0x8c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10c      	bne.n	8003b9a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <osMessageQueueNew+0x8c>
          mem = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e001      	b.n	8003b9a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10b      	bne.n	8003bb8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	9100      	str	r1, [sp, #0]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fa50 	bl	8004054 <xQueueGenericCreateStatic>
 8003bb4:	61f8      	str	r0, [r7, #28]
 8003bb6:	e008      	b.n	8003bca <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fabe 	bl	8004144 <xQueueGenericCreate>
 8003bc8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <osMessageQueueNew+0xd0>
        name = attr->name;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e001      	b.n	8003be2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	69f8      	ldr	r0, [r7, #28]
 8003be6:	f000 ff15 	bl	8004a14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003bea:	69fb      	ldr	r3, [r7, #28]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	617b      	str	r3, [r7, #20]
  return(result);
 8003c12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d028      	beq.n	8003c6a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <osMessageQueuePut+0x36>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <osMessageQueuePut+0x36>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003c2a:	f06f 0303 	mvn.w	r3, #3
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e038      	b.n	8003ca4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003c36:	f107 0210 	add.w	r2, r7, #16
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	69b8      	ldr	r0, [r7, #24]
 8003c40:	f000 fbdc 	bl	80043fc <xQueueGenericSendFromISR>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d003      	beq.n	8003c52 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003c4a:	f06f 0302 	mvn.w	r3, #2
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e028      	b.n	8003ca4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d025      	beq.n	8003ca4 <osMessageQueuePut+0xb0>
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <osMessageQueuePut+0xbc>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	e01c      	b.n	8003ca4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <osMessageQueuePut+0x82>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003c76:	f06f 0303 	mvn.w	r3, #3
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	e012      	b.n	8003ca4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c7e:	2300      	movs	r3, #0
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	69b8      	ldr	r0, [r7, #24]
 8003c86:	f000 fabb 	bl	8004200 <xQueueGenericSend>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d009      	beq.n	8003ca4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c96:	f06f 0301 	mvn.w	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e002      	b.n	8003ca4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c9e:	f06f 0302 	mvn.w	r3, #2
 8003ca2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cca:	f3ef 8305 	mrs	r3, IPSR
 8003cce:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d028      	beq.n	8003d28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <osMessageQueueGet+0x34>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <osMessageQueueGet+0x34>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003ce8:	f06f 0303 	mvn.w	r3, #3
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e037      	b.n	8003d60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003cf4:	f107 0310 	add.w	r3, r7, #16
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	69b8      	ldr	r0, [r7, #24]
 8003cfe:	f000 fcf9 	bl	80046f4 <xQueueReceiveFromISR>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d003      	beq.n	8003d10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003d08:	f06f 0302 	mvn.w	r3, #2
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e027      	b.n	8003d60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <osMessageQueueGet+0xac>
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <osMessageQueueGet+0xb8>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	e01b      	b.n	8003d60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <osMessageQueueGet+0x80>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003d34:	f06f 0303 	mvn.w	r3, #3
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e011      	b.n	8003d60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	69b8      	ldr	r0, [r7, #24]
 8003d42:	f000 fbf7 	bl	8004534 <xQueueReceive>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d009      	beq.n	8003d60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003d52:	f06f 0301 	mvn.w	r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e002      	b.n	8003d60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003d5a:	f06f 0302 	mvn.w	r3, #2
 8003d5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d60:	69fb      	ldr	r3, [r7, #28]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d7c:	f3ef 8305 	mrs	r3, IPSR
 8003d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d82:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8003d88:	f06f 0305 	mvn.w	r3, #5
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e00c      	b.n	8003daa <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8003d96:	f06f 0303 	mvn.w	r3, #3
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e005      	b.n	8003daa <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8003da2:	2100      	movs	r1, #0
 8003da4:	6938      	ldr	r0, [r7, #16]
 8003da6:	f000 f8ed 	bl	8003f84 <xQueueGenericReset>
  }

  return (stat);
 8003daa:	697b      	ldr	r3, [r7, #20]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <vApplicationGetIdleTaskMemory+0x30>)
 8003dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2280      	movs	r2, #128	; 0x80
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000098 	.word	0x20000098
 8003de4:	200000f4 	.word	0x200000f4

08003de8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <vApplicationGetTimerTaskMemory+0x2c>)
 8003df8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4a06      	ldr	r2, [pc, #24]	; (8003e18 <vApplicationGetTimerTaskMemory+0x30>)
 8003dfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e06:	601a      	str	r2, [r3, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	200002f4 	.word	0x200002f4
 8003e18:	20000350 	.word	0x20000350

08003e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 0208 	add.w	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f103 0208 	add.w	r2, r3, #8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f103 0208 	add.w	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d103      	bne.n	8003ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e00c      	b.n	8003ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e002      	b.n	8003eec <vListInsert+0x2e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d2f6      	bcs.n	8003ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6892      	ldr	r2, [r2, #8]
 8003f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6852      	ldr	r2, [r2, #4]
 8003f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d103      	bne.n	8003f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fae:	f002 f909 	bl	80061c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	441a      	add	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d114      	bne.n	800402e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01a      	beq.n	8004042 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3310      	adds	r3, #16
 8004010:	4618      	mov	r0, r3
 8004012:	f001 f9bd 	bl	8005390 <xTaskRemoveFromEventList>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d012      	beq.n	8004042 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <xQueueGenericReset+0xcc>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	e009      	b.n	8004042 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3310      	adds	r3, #16
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fef2 	bl	8003e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3324      	adds	r3, #36	; 0x24
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff feed 	bl	8003e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004042:	f002 f8ef 	bl	8006224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004046:	2301      	movs	r3, #1
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08e      	sub	sp, #56	; 0x38
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <xQueueGenericCreateStatic+0x52>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <xQueueGenericCreateStatic+0x56>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <xQueueGenericCreateStatic+0x58>
 80040aa:	2300      	movs	r3, #0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	623b      	str	r3, [r7, #32]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <xQueueGenericCreateStatic+0x7e>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <xQueueGenericCreateStatic+0x82>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <xQueueGenericCreateStatic+0x84>
 80040d6:	2300      	movs	r3, #0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	61fb      	str	r3, [r7, #28]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040f2:	2350      	movs	r3, #80	; 0x50
 80040f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b50      	cmp	r3, #80	; 0x50
 80040fa:	d00a      	beq.n	8004112 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	61bb      	str	r3, [r7, #24]
}
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004112:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004126:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f83f 	bl	80041b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800413c:	4618      	mov	r0, r3
 800413e:	3730      	adds	r7, #48	; 0x30
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	613b      	str	r3, [r7, #16]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3350      	adds	r3, #80	; 0x50
 800417c:	4618      	mov	r0, r3
 800417e:	f002 f943 	bl	8006408 <pvPortMalloc>
 8004182:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d011      	beq.n	80041ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3350      	adds	r3, #80	; 0x50
 8004192:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800419c:	79fa      	ldrb	r2, [r7, #7]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	4613      	mov	r3, r2
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f805 	bl	80041b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041ae:	69bb      	ldr	r3, [r7, #24]
	}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e002      	b.n	80041da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041e6:	2101      	movs	r1, #1
 80041e8:	69b8      	ldr	r0, [r7, #24]
 80041ea:	f7ff fecb 	bl	8003f84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08e      	sub	sp, #56	; 0x38
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <xQueueGenericSend+0x32>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <xQueueGenericSend+0x40>
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <xQueueGenericSend+0x44>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <xQueueGenericSend+0x46>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <xQueueGenericSend+0x60>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d103      	bne.n	800426e <xQueueGenericSend+0x6e>
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <xQueueGenericSend+0x72>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <xQueueGenericSend+0x74>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xQueueGenericSend+0x8e>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	623b      	str	r3, [r7, #32]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800428e:	f001 fa3d 	bl	800570c <xTaskGetSchedulerState>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <xQueueGenericSend+0x9e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <xQueueGenericSend+0xa2>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <xQueueGenericSend+0xa4>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <xQueueGenericSend+0xbe>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	61fb      	str	r3, [r7, #28]
}
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042be:	f001 ff81 	bl	80061c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <xQueueGenericSend+0xd4>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d129      	bne.n	8004328 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042da:	f000 fa8b 	bl	80047f4 <prvCopyDataToQueue>
 80042de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	3324      	adds	r3, #36	; 0x24
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f84f 	bl	8005390 <xTaskRemoveFromEventList>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042f8:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <xQueueGenericSend+0x1f8>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	e00a      	b.n	8004320 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004310:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <xQueueGenericSend+0x1f8>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004320:	f001 ff80 	bl	8006224 <vPortExitCritical>
				return pdPASS;
 8004324:	2301      	movs	r3, #1
 8004326:	e063      	b.n	80043f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800432e:	f001 ff79 	bl	8006224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004332:	2300      	movs	r3, #0
 8004334:	e05c      	b.n	80043f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4618      	mov	r0, r3
 8004342:	f001 f889 	bl	8005458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004346:	2301      	movs	r3, #1
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800434a:	f001 ff6b 	bl	8006224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800434e:	f000 fdfb 	bl	8004f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004352:	f001 ff37 	bl	80061c4 <vPortEnterCritical>
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800435c:	b25b      	sxtb	r3, r3
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d103      	bne.n	800436c <xQueueGenericSend+0x16c>
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004372:	b25b      	sxtb	r3, r3
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d103      	bne.n	8004382 <xQueueGenericSend+0x182>
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004382:	f001 ff4f 	bl	8006224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004386:	1d3a      	adds	r2, r7, #4
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	4611      	mov	r1, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f001 f878 	bl	8005484 <xTaskCheckForTimeOut>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d124      	bne.n	80043e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800439a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439c:	f000 fb22 	bl	80049e4 <prvIsQueueFull>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d018      	beq.n	80043d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	3310      	adds	r3, #16
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ff9e 	bl	80052f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043b6:	f000 faad 	bl	8004914 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ba:	f000 fdd3 	bl	8004f64 <xTaskResumeAll>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f af7c 	bne.w	80042be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <xQueueGenericSend+0x1f8>)
 80043c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	e772      	b.n	80042be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043da:	f000 fa9b 	bl	8004914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043de:	f000 fdc1 	bl	8004f64 <xTaskResumeAll>
 80043e2:	e76c      	b.n	80042be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043e6:	f000 fa95 	bl	8004914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043ea:	f000 fdbb 	bl	8004f64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3738      	adds	r7, #56	; 0x38
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b090      	sub	sp, #64	; 0x40
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <xQueueGenericSendFromISR+0x3c>
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <xQueueGenericSendFromISR+0x40>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <xQueueGenericSendFromISR+0x42>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d103      	bne.n	8004466 <xQueueGenericSendFromISR+0x6a>
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <xQueueGenericSendFromISR+0x6e>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <xQueueGenericSendFromISR+0x70>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	623b      	str	r3, [r7, #32]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004486:	f001 ff7f 	bl	8006388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800448a:	f3ef 8211 	mrs	r2, BASEPRI
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	61fa      	str	r2, [r7, #28]
 80044a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <xQueueGenericSendFromISR+0xbc>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d12f      	bne.n	8004518 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044ce:	f000 f991 	bl	80047f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d112      	bne.n	8004502 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d016      	beq.n	8004512 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	3324      	adds	r3, #36	; 0x24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 ff51 	bl	8005390 <xTaskRemoveFromEventList>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e007      	b.n	8004512 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004502:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004506:	3301      	adds	r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	b25a      	sxtb	r2, r3
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004512:	2301      	movs	r3, #1
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004516:	e001      	b.n	800451c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004518:	2300      	movs	r3, #0
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004526:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800452a:	4618      	mov	r0, r3
 800452c:	3740      	adds	r7, #64	; 0x40
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <xQueueReceive+0x30>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	623b      	str	r3, [r7, #32]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <xQueueReceive+0x3e>
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <xQueueReceive+0x42>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <xQueueReceive+0x44>
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueReceive+0x5e>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	61fb      	str	r3, [r7, #28]
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004592:	f001 f8bb 	bl	800570c <xTaskGetSchedulerState>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <xQueueReceive+0x6e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <xQueueReceive+0x72>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <xQueueReceive+0x74>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueReceive+0x8e>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	61bb      	str	r3, [r7, #24]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045c2:	f001 fdff 	bl	80061c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01f      	beq.n	8004612 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d6:	f000 f977 	bl	80048c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00f      	beq.n	800460a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	3310      	adds	r3, #16
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fece 	bl	8005390 <xTaskRemoveFromEventList>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045fa:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <xQueueReceive+0x1bc>)
 80045fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800460a:	f001 fe0b 	bl	8006224 <vPortExitCritical>
				return pdPASS;
 800460e:	2301      	movs	r3, #1
 8004610:	e069      	b.n	80046e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004618:	f001 fe04 	bl	8006224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800461c:	2300      	movs	r3, #0
 800461e:	e062      	b.n	80046e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004626:	f107 0310 	add.w	r3, r7, #16
 800462a:	4618      	mov	r0, r3
 800462c:	f000 ff14 	bl	8005458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004634:	f001 fdf6 	bl	8006224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004638:	f000 fc86 	bl	8004f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800463c:	f001 fdc2 	bl	80061c4 <vPortEnterCritical>
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004646:	b25b      	sxtb	r3, r3
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d103      	bne.n	8004656 <xQueueReceive+0x122>
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465c:	b25b      	sxtb	r3, r3
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d103      	bne.n	800466c <xQueueReceive+0x138>
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800466c:	f001 fdda 	bl	8006224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004670:	1d3a      	adds	r2, r7, #4
 8004672:	f107 0310 	add.w	r3, r7, #16
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f000 ff03 	bl	8005484 <xTaskCheckForTimeOut>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d123      	bne.n	80046cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004686:	f000 f997 	bl	80049b8 <prvIsQueueEmpty>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d017      	beq.n	80046c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	3324      	adds	r3, #36	; 0x24
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fe29 	bl	80052f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800469e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a0:	f000 f938 	bl	8004914 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046a4:	f000 fc5e 	bl	8004f64 <xTaskResumeAll>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d189      	bne.n	80045c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <xQueueReceive+0x1bc>)
 80046b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	e780      	b.n	80045c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c2:	f000 f927 	bl	8004914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046c6:	f000 fc4d 	bl	8004f64 <xTaskResumeAll>
 80046ca:	e77a      	b.n	80045c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ce:	f000 f921 	bl	8004914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046d2:	f000 fc47 	bl	8004f64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d8:	f000 f96e 	bl	80049b8 <prvIsQueueEmpty>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f43f af6f 	beq.w	80045c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3730      	adds	r7, #48	; 0x30
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	; 0x38
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	623b      	str	r3, [r7, #32]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <xQueueReceiveFromISR+0x3a>
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <xQueueReceiveFromISR+0x3e>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <xQueueReceiveFromISR+0x40>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	61fb      	str	r3, [r7, #28]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800474e:	f001 fe1b 	bl	8006388 <vPortValidateInterruptPriority>
	__asm volatile
 8004752:	f3ef 8211 	mrs	r2, BASEPRI
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	61ba      	str	r2, [r7, #24]
 8004768:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800476a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	d02f      	beq.n	80047da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004788:	f000 f89e 	bl	80048c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	1e5a      	subs	r2, r3, #1
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004794:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d112      	bne.n	80047c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	3310      	adds	r3, #16
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fdf0 	bl	8005390 <xTaskRemoveFromEventList>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00b      	beq.n	80047d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e007      	b.n	80047d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80047c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047c8:	3301      	adds	r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	b25a      	sxtb	r2, r3
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80047d4:	2301      	movs	r3, #1
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
 80047d8:	e001      	b.n	80047de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80047da:	2300      	movs	r3, #0
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f383 8811 	msr	BASEPRI, r3
}
 80047e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3738      	adds	r7, #56	; 0x38
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10d      	bne.n	800482e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d14d      	bne.n	80048b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 ff92 	bl	8005748 <xTaskPriorityDisinherit>
 8004824:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	e043      	b.n	80048b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d119      	bne.n	8004868 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6858      	ldr	r0, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	461a      	mov	r2, r3
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	f001 fff6 	bl	8006830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	441a      	add	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d32b      	bcc.n	80048b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	e026      	b.n	80048b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68d8      	ldr	r0, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	461a      	mov	r2, r3
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	f001 ffdc 	bl	8006830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	425b      	negs	r3, r3
 8004882:	441a      	add	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d207      	bcs.n	80048a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	425b      	negs	r3, r3
 800489e:	441a      	add	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d105      	bne.n	80048b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048be:	697b      	ldr	r3, [r7, #20]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d303      	bcc.n	80048fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68d9      	ldr	r1, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	461a      	mov	r2, r3
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f001 ff92 	bl	8006830 <memcpy>
	}
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800491c:	f001 fc52 	bl	80061c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004926:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004928:	e011      	b.n	800494e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d012      	beq.n	8004958 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3324      	adds	r3, #36	; 0x24
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fd2a 	bl	8005390 <xTaskRemoveFromEventList>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004942:	f000 fe01 	bl	8005548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	3b01      	subs	r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800494e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dce9      	bgt.n	800492a <prvUnlockQueue+0x16>
 8004956:	e000      	b.n	800495a <prvUnlockQueue+0x46>
					break;
 8004958:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004962:	f001 fc5f 	bl	8006224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004966:	f001 fc2d 	bl	80061c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004970:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004972:	e011      	b.n	8004998 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3310      	adds	r3, #16
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fd05 	bl	8005390 <xTaskRemoveFromEventList>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800498c:	f000 fddc 	bl	8005548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	3b01      	subs	r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800499c:	2b00      	cmp	r3, #0
 800499e:	dce9      	bgt.n	8004974 <prvUnlockQueue+0x60>
 80049a0:	e000      	b.n	80049a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049ac:	f001 fc3a 	bl	8006224 <vPortExitCritical>
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c0:	f001 fc00 	bl	80061c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e001      	b.n	80049d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049d6:	f001 fc25 	bl	8006224 <vPortExitCritical>

	return xReturn;
 80049da:	68fb      	ldr	r3, [r7, #12]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049ec:	f001 fbea 	bl	80061c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d102      	bne.n	8004a02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e001      	b.n	8004a06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a06:	f001 fc0d 	bl	8006224 <vPortExitCritical>

	return xReturn;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e014      	b.n	8004a4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a24:	4a0f      	ldr	r2, [pc, #60]	; (8004a64 <vQueueAddToRegistry+0x50>)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a30:	490c      	ldr	r1, [pc, #48]	; (8004a64 <vQueueAddToRegistry+0x50>)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <vQueueAddToRegistry+0x50>)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a46:	e006      	b.n	8004a56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b07      	cmp	r3, #7
 8004a52:	d9e7      	bls.n	8004a24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20001ab0 	.word	0x20001ab0

08004a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a78:	f001 fba4 	bl	80061c4 <vPortEnterCritical>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d103      	bne.n	8004a92 <vQueueWaitForMessageRestricted+0x2a>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d103      	bne.n	8004aa8 <vQueueWaitForMessageRestricted+0x40>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa8:	f001 fbbc 	bl	8006224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3324      	adds	r3, #36	; 0x24
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fc3b 	bl	8005338 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff26 	bl	8004914 <prvUnlockQueue>
	}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	61fb      	str	r3, [r7, #28]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b16:	235c      	movs	r3, #92	; 0x5c
 8004b18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b5c      	cmp	r3, #92	; 0x5c
 8004b1e:	d00a      	beq.n	8004b36 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	61bb      	str	r3, [r7, #24]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01e      	beq.n	8004b7c <xTaskCreateStatic+0xac>
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b56:	2300      	movs	r3, #0
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	9302      	str	r3, [sp, #8]
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f850 	bl	8004c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b76:	f000 f8dd 	bl	8004d34 <prvAddNewTaskToReadyList>
 8004b7a:	e001      	b.n	8004b80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b80:	697b      	ldr	r3, [r7, #20]
	}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3728      	adds	r7, #40	; 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b08c      	sub	sp, #48	; 0x30
 8004b8e:	af04      	add	r7, sp, #16
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 fc32 	bl	8006408 <pvPortMalloc>
 8004ba4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00e      	beq.n	8004bca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bac:	205c      	movs	r0, #92	; 0x5c
 8004bae:	f001 fc2b 	bl	8006408 <pvPortMalloc>
 8004bb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8004bc0:	e005      	b.n	8004bce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f001 fcec 	bl	80065a0 <vPortFree>
 8004bc8:	e001      	b.n	8004bce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	9302      	str	r3, [sp, #8]
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f80e 	bl	8004c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf8:	69f8      	ldr	r0, [r7, #28]
 8004bfa:	f000 f89b 	bl	8004d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e002      	b.n	8004c0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3720      	adds	r7, #32
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	21a5      	movs	r1, #165	; 0xa5
 8004c2e:	f001 fe0d 	bl	800684c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	617b      	str	r3, [r7, #20]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01f      	beq.n	8004cb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	e012      	b.n	8004c9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	7819      	ldrb	r1, [r3, #0]
 8004c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	3334      	adds	r3, #52	; 0x34
 8004c88:	460a      	mov	r2, r1
 8004c8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d9e9      	bls.n	8004c78 <prvInitialiseNewTask+0x64>
 8004ca4:	e000      	b.n	8004ca8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004ca6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	e003      	b.n	8004cba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	2b37      	cmp	r3, #55	; 0x37
 8004cbe:	d901      	bls.n	8004cc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cc0:	2337      	movs	r3, #55	; 0x37
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f8be 	bl	8003e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	3318      	adds	r3, #24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f8b9 	bl	8003e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2200      	movs	r2, #0
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	68f9      	ldr	r1, [r7, #12]
 8004d12:	69b8      	ldr	r0, [r7, #24]
 8004d14:	f001 f928 	bl	8005f68 <pxPortInitialiseStack>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d2a:	bf00      	nop
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d3c:	f001 fa42 	bl	80061c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d40:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <prvAddNewTaskToReadyList+0xc4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	4a2c      	ldr	r2, [pc, #176]	; (8004df8 <prvAddNewTaskToReadyList+0xc4>)
 8004d48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d4a:	4b2c      	ldr	r3, [pc, #176]	; (8004dfc <prvAddNewTaskToReadyList+0xc8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d52:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <prvAddNewTaskToReadyList+0xc8>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <prvAddNewTaskToReadyList+0xc4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d110      	bne.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d60:	f000 fc16 	bl	8005590 <prvInitialiseTaskLists>
 8004d64:	e00d      	b.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d66:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <prvAddNewTaskToReadyList+0xcc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d6e:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <prvAddNewTaskToReadyList+0xc8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d802      	bhi.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <prvAddNewTaskToReadyList+0xc8>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d82:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <prvAddNewTaskToReadyList+0xd0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <prvAddNewTaskToReadyList+0xd0>)
 8004d8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <prvAddNewTaskToReadyList+0xd0>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <prvAddNewTaskToReadyList+0xd4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d903      	bls.n	8004da8 <prvAddNewTaskToReadyList+0x74>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <prvAddNewTaskToReadyList+0xd4>)
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <prvAddNewTaskToReadyList+0xd8>)
 8004db6:	441a      	add	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7ff f859 	bl	8003e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dc4:	f001 fa2e 	bl	8006224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <prvAddNewTaskToReadyList+0xcc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <prvAddNewTaskToReadyList+0xc8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d207      	bcs.n	8004dee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dde:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <prvAddNewTaskToReadyList+0xdc>)
 8004de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000c24 	.word	0x20000c24
 8004dfc:	20000750 	.word	0x20000750
 8004e00:	20000c30 	.word	0x20000c30
 8004e04:	20000c40 	.word	0x20000c40
 8004e08:	20000c2c 	.word	0x20000c2c
 8004e0c:	20000754 	.word	0x20000754
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <vTaskDelay+0x60>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <vTaskDelay+0x30>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60bb      	str	r3, [r7, #8]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e44:	f000 f880 	bl	8004f48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e48:	2100      	movs	r1, #0
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fcea 	bl	8005824 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e50:	f000 f888 	bl	8004f64 <xTaskResumeAll>
 8004e54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d107      	bne.n	8004e6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <vTaskDelay+0x64>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000c4c 	.word	0x20000c4c
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e8a:	463a      	mov	r2, r7
 8004e8c:	1d39      	adds	r1, r7, #4
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe ff8e 	bl	8003db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	9202      	str	r2, [sp, #8]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	4921      	ldr	r1, [pc, #132]	; (8004f30 <vTaskStartScheduler+0xb4>)
 8004eac:	4821      	ldr	r0, [pc, #132]	; (8004f34 <vTaskStartScheduler+0xb8>)
 8004eae:	f7ff fe0f 	bl	8004ad0 <xTaskCreateStatic>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a20      	ldr	r2, [pc, #128]	; (8004f38 <vTaskStartScheduler+0xbc>)
 8004eb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <vTaskStartScheduler+0xbc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e001      	b.n	8004eca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d102      	bne.n	8004ed6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ed0:	f000 fcfc 	bl	80058cc <xTimerCreateTimerTask>
 8004ed4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d116      	bne.n	8004f0a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	613b      	str	r3, [r7, #16]
}
 8004eee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef0:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <vTaskStartScheduler+0xc0>)
 8004ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <vTaskStartScheduler+0xc4>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004efe:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <vTaskStartScheduler+0xc8>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f04:	f001 f8bc 	bl	8006080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f08:	e00e      	b.n	8004f28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d10a      	bne.n	8004f28 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	60fb      	str	r3, [r7, #12]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <vTaskStartScheduler+0xaa>
}
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08007874 	.word	0x08007874
 8004f34:	08005561 	.word	0x08005561
 8004f38:	20000c48 	.word	0x20000c48
 8004f3c:	20000c44 	.word	0x20000c44
 8004f40:	20000c30 	.word	0x20000c30
 8004f44:	20000c28 	.word	0x20000c28

08004f48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <vTaskSuspendAll+0x18>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	4a03      	ldr	r2, [pc, #12]	; (8004f60 <vTaskSuspendAll+0x18>)
 8004f54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	20000c4c 	.word	0x20000c4c

08004f64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f72:	4b42      	ldr	r3, [pc, #264]	; (800507c <xTaskResumeAll+0x118>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f90:	f001 f918 	bl	80061c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f94:	4b39      	ldr	r3, [pc, #228]	; (800507c <xTaskResumeAll+0x118>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	4a38      	ldr	r2, [pc, #224]	; (800507c <xTaskResumeAll+0x118>)
 8004f9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f9e:	4b37      	ldr	r3, [pc, #220]	; (800507c <xTaskResumeAll+0x118>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d162      	bne.n	800506c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fa6:	4b36      	ldr	r3, [pc, #216]	; (8005080 <xTaskResumeAll+0x11c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d05e      	beq.n	800506c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fae:	e02f      	b.n	8005010 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb0:	4b34      	ldr	r3, [pc, #208]	; (8005084 <xTaskResumeAll+0x120>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3318      	adds	r3, #24
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe ffb7 	bl	8003f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe ffb2 	bl	8003f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <xTaskResumeAll+0x124>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d903      	bls.n	8004fe0 <xTaskResumeAll+0x7c>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <xTaskResumeAll+0x124>)
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4a27      	ldr	r2, [pc, #156]	; (800508c <xTaskResumeAll+0x128>)
 8004fee:	441a      	add	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fe ff3d 	bl	8003e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4b23      	ldr	r3, [pc, #140]	; (8005090 <xTaskResumeAll+0x12c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	429a      	cmp	r2, r3
 8005008:	d302      	bcc.n	8005010 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <xTaskResumeAll+0x130>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005010:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <xTaskResumeAll+0x120>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1cb      	bne.n	8004fb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800501e:	f000 fb55 	bl	80056cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <xTaskResumeAll+0x134>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d010      	beq.n	8005050 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800502e:	f000 f847 	bl	80050c0 <xTaskIncrementTick>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005038:	4b16      	ldr	r3, [pc, #88]	; (8005094 <xTaskResumeAll+0x130>)
 800503a:	2201      	movs	r2, #1
 800503c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3b01      	subs	r3, #1
 8005042:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f1      	bne.n	800502e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <xTaskResumeAll+0x134>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005050:	4b10      	ldr	r3, [pc, #64]	; (8005094 <xTaskResumeAll+0x130>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <xTaskResumeAll+0x138>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506c:	f001 f8da 	bl	8006224 <vPortExitCritical>

	return xAlreadyYielded;
 8005070:	68bb      	ldr	r3, [r7, #8]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000c4c 	.word	0x20000c4c
 8005080:	20000c24 	.word	0x20000c24
 8005084:	20000be4 	.word	0x20000be4
 8005088:	20000c2c 	.word	0x20000c2c
 800508c:	20000754 	.word	0x20000754
 8005090:	20000750 	.word	0x20000750
 8005094:	20000c38 	.word	0x20000c38
 8005098:	20000c34 	.word	0x20000c34
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <xTaskGetTickCount+0x1c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050ac:	687b      	ldr	r3, [r7, #4]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000c28 	.word	0x20000c28

080050c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ca:	4b4f      	ldr	r3, [pc, #316]	; (8005208 <xTaskIncrementTick+0x148>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 808f 	bne.w	80051f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050d4:	4b4d      	ldr	r3, [pc, #308]	; (800520c <xTaskIncrementTick+0x14c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050dc:	4a4b      	ldr	r2, [pc, #300]	; (800520c <xTaskIncrementTick+0x14c>)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d120      	bne.n	800512a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050e8:	4b49      	ldr	r3, [pc, #292]	; (8005210 <xTaskIncrementTick+0x150>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <xTaskIncrementTick+0x48>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	603b      	str	r3, [r7, #0]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <xTaskIncrementTick+0x46>
 8005108:	4b41      	ldr	r3, [pc, #260]	; (8005210 <xTaskIncrementTick+0x150>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	4b41      	ldr	r3, [pc, #260]	; (8005214 <xTaskIncrementTick+0x154>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3f      	ldr	r2, [pc, #252]	; (8005210 <xTaskIncrementTick+0x150>)
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4a3f      	ldr	r2, [pc, #252]	; (8005214 <xTaskIncrementTick+0x154>)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <xTaskIncrementTick+0x158>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a3d      	ldr	r2, [pc, #244]	; (8005218 <xTaskIncrementTick+0x158>)
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	f000 fad1 	bl	80056cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800512a:	4b3c      	ldr	r3, [pc, #240]	; (800521c <xTaskIncrementTick+0x15c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	429a      	cmp	r2, r3
 8005132:	d349      	bcc.n	80051c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005134:	4b36      	ldr	r3, [pc, #216]	; (8005210 <xTaskIncrementTick+0x150>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513e:	4b37      	ldr	r3, [pc, #220]	; (800521c <xTaskIncrementTick+0x15c>)
 8005140:	f04f 32ff 	mov.w	r2, #4294967295
 8005144:	601a      	str	r2, [r3, #0]
					break;
 8005146:	e03f      	b.n	80051c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005148:	4b31      	ldr	r3, [pc, #196]	; (8005210 <xTaskIncrementTick+0x150>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	d203      	bcs.n	8005168 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005160:	4a2e      	ldr	r2, [pc, #184]	; (800521c <xTaskIncrementTick+0x15c>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005166:	e02f      	b.n	80051c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	3304      	adds	r3, #4
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe fedf 	bl	8003f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3318      	adds	r3, #24
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fed6 	bl	8003f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <xTaskIncrementTick+0x160>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d903      	bls.n	8005198 <xTaskIncrementTick+0xd8>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	4a22      	ldr	r2, [pc, #136]	; (8005220 <xTaskIncrementTick+0x160>)
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <xTaskIncrementTick+0x164>)
 80051a6:	441a      	add	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f7fe fe61 	bl	8003e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <xTaskIncrementTick+0x168>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	429a      	cmp	r2, r3
 80051c0:	d3b8      	bcc.n	8005134 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c6:	e7b5      	b.n	8005134 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051c8:	4b17      	ldr	r3, [pc, #92]	; (8005228 <xTaskIncrementTick+0x168>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ce:	4915      	ldr	r1, [pc, #84]	; (8005224 <xTaskIncrementTick+0x164>)
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d901      	bls.n	80051e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051e4:	4b11      	ldr	r3, [pc, #68]	; (800522c <xTaskIncrementTick+0x16c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e004      	b.n	80051fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051f2:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <xTaskIncrementTick+0x170>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3301      	adds	r3, #1
 80051f8:	4a0d      	ldr	r2, [pc, #52]	; (8005230 <xTaskIncrementTick+0x170>)
 80051fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051fc:	697b      	ldr	r3, [r7, #20]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000c4c 	.word	0x20000c4c
 800520c:	20000c28 	.word	0x20000c28
 8005210:	20000bdc 	.word	0x20000bdc
 8005214:	20000be0 	.word	0x20000be0
 8005218:	20000c3c 	.word	0x20000c3c
 800521c:	20000c44 	.word	0x20000c44
 8005220:	20000c2c 	.word	0x20000c2c
 8005224:	20000754 	.word	0x20000754
 8005228:	20000750 	.word	0x20000750
 800522c:	20000c38 	.word	0x20000c38
 8005230:	20000c34 	.word	0x20000c34

08005234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800523a:	4b28      	ldr	r3, [pc, #160]	; (80052dc <vTaskSwitchContext+0xa8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005242:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <vTaskSwitchContext+0xac>)
 8005244:	2201      	movs	r2, #1
 8005246:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005248:	e041      	b.n	80052ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800524a:	4b25      	ldr	r3, [pc, #148]	; (80052e0 <vTaskSwitchContext+0xac>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005250:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <vTaskSwitchContext+0xb0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e010      	b.n	800527a <vTaskSwitchContext+0x46>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <vTaskSwitchContext+0x40>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <vTaskSwitchContext+0x3e>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b01      	subs	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	491b      	ldr	r1, [pc, #108]	; (80052e8 <vTaskSwitchContext+0xb4>)
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0e4      	beq.n	8005258 <vTaskSwitchContext+0x24>
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <vTaskSwitchContext+0xb4>)
 800529a:	4413      	add	r3, r2
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	605a      	str	r2, [r3, #4]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	3308      	adds	r3, #8
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d104      	bne.n	80052be <vTaskSwitchContext+0x8a>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a09      	ldr	r2, [pc, #36]	; (80052ec <vTaskSwitchContext+0xb8>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <vTaskSwitchContext+0xb0>)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6013      	str	r3, [r2, #0]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000c4c 	.word	0x20000c4c
 80052e0:	20000c38 	.word	0x20000c38
 80052e4:	20000c2c 	.word	0x20000c2c
 80052e8:	20000754 	.word	0x20000754
 80052ec:	20000750 	.word	0x20000750

080052f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	60fb      	str	r3, [r7, #12]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <vTaskPlaceOnEventList+0x44>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3318      	adds	r3, #24
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fe fdcd 	bl	8003ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005324:	2101      	movs	r1, #1
 8005326:	6838      	ldr	r0, [r7, #0]
 8005328:	f000 fa7c 	bl	8005824 <prvAddCurrentTaskToDelayedList>
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000750 	.word	0x20000750

08005338 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	617b      	str	r3, [r7, #20]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <vTaskPlaceOnEventListRestricted+0x54>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3318      	adds	r3, #24
 8005366:	4619      	mov	r1, r3
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7fe fd84 	bl	8003e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005374:	f04f 33ff 	mov.w	r3, #4294967295
 8005378:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68b8      	ldr	r0, [r7, #8]
 800537e:	f000 fa51 	bl	8005824 <prvAddCurrentTaskToDelayedList>
	}
 8005382:	bf00      	nop
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000750 	.word	0x20000750

08005390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60fb      	str	r3, [r7, #12]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	3318      	adds	r3, #24
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fe fdb5 	bl	8003f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c6:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <xTaskRemoveFromEventList+0xb0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d11d      	bne.n	800540a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fdac 	bl	8003f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <xTaskRemoveFromEventList+0xb4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d903      	bls.n	80053ec <xTaskRemoveFromEventList+0x5c>
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4a16      	ldr	r2, [pc, #88]	; (8005444 <xTaskRemoveFromEventList+0xb4>)
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <xTaskRemoveFromEventList+0xb8>)
 80053fa:	441a      	add	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3304      	adds	r3, #4
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f7fe fd37 	bl	8003e76 <vListInsertEnd>
 8005408:	e005      	b.n	8005416 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	3318      	adds	r3, #24
 800540e:	4619      	mov	r1, r3
 8005410:	480e      	ldr	r0, [pc, #56]	; (800544c <xTaskRemoveFromEventList+0xbc>)
 8005412:	f7fe fd30 	bl	8003e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <xTaskRemoveFromEventList+0xc0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	429a      	cmp	r2, r3
 8005422:	d905      	bls.n	8005430 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <xTaskRemoveFromEventList+0xc4>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e001      	b.n	8005434 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005434:	697b      	ldr	r3, [r7, #20]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000c4c 	.word	0x20000c4c
 8005444:	20000c2c 	.word	0x20000c2c
 8005448:	20000754 	.word	0x20000754
 800544c:	20000be4 	.word	0x20000be4
 8005450:	20000750 	.word	0x20000750
 8005454:	20000c38 	.word	0x20000c38

08005458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <vTaskInternalSetTimeOutState+0x24>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <vTaskInternalSetTimeOutState+0x28>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	605a      	str	r2, [r3, #4]
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	20000c3c 	.word	0x20000c3c
 8005480:	20000c28 	.word	0x20000c28

08005484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	613b      	str	r3, [r7, #16]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054c6:	f000 fe7d 	bl	80061c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054ca:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <xTaskCheckForTimeOut+0xbc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d102      	bne.n	80054ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	e023      	b.n	8005532 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b15      	ldr	r3, [pc, #84]	; (8005544 <xTaskCheckForTimeOut+0xc0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d007      	beq.n	8005506 <xTaskCheckForTimeOut+0x82>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e015      	b.n	8005532 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	d20b      	bcs.n	8005528 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff9b 	bl	8005458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	e004      	b.n	8005532 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800552e:	2301      	movs	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005532:	f000 fe77 	bl	8006224 <vPortExitCritical>

	return xReturn;
 8005536:	69fb      	ldr	r3, [r7, #28]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000c28 	.word	0x20000c28
 8005544:	20000c3c 	.word	0x20000c3c

08005548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <vTaskMissedYield+0x14>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20000c38 	.word	0x20000c38

08005560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005568:	f000 f852 	bl	8005610 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <prvIdleTask+0x28>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d9f9      	bls.n	8005568 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <prvIdleTask+0x2c>)
 8005576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005584:	e7f0      	b.n	8005568 <prvIdleTask+0x8>
 8005586:	bf00      	nop
 8005588:	20000754 	.word	0x20000754
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005596:	2300      	movs	r3, #0
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	e00c      	b.n	80055b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a12      	ldr	r2, [pc, #72]	; (80055f0 <prvInitialiseTaskLists+0x60>)
 80055a8:	4413      	add	r3, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fc36 	bl	8003e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3301      	adds	r3, #1
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b37      	cmp	r3, #55	; 0x37
 80055ba:	d9ef      	bls.n	800559c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055bc:	480d      	ldr	r0, [pc, #52]	; (80055f4 <prvInitialiseTaskLists+0x64>)
 80055be:	f7fe fc2d 	bl	8003e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055c2:	480d      	ldr	r0, [pc, #52]	; (80055f8 <prvInitialiseTaskLists+0x68>)
 80055c4:	f7fe fc2a 	bl	8003e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055c8:	480c      	ldr	r0, [pc, #48]	; (80055fc <prvInitialiseTaskLists+0x6c>)
 80055ca:	f7fe fc27 	bl	8003e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055ce:	480c      	ldr	r0, [pc, #48]	; (8005600 <prvInitialiseTaskLists+0x70>)
 80055d0:	f7fe fc24 	bl	8003e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055d4:	480b      	ldr	r0, [pc, #44]	; (8005604 <prvInitialiseTaskLists+0x74>)
 80055d6:	f7fe fc21 	bl	8003e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <prvInitialiseTaskLists+0x78>)
 80055dc:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <prvInitialiseTaskLists+0x64>)
 80055de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <prvInitialiseTaskLists+0x7c>)
 80055e2:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <prvInitialiseTaskLists+0x68>)
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000754 	.word	0x20000754
 80055f4:	20000bb4 	.word	0x20000bb4
 80055f8:	20000bc8 	.word	0x20000bc8
 80055fc:	20000be4 	.word	0x20000be4
 8005600:	20000bf8 	.word	0x20000bf8
 8005604:	20000c10 	.word	0x20000c10
 8005608:	20000bdc 	.word	0x20000bdc
 800560c:	20000be0 	.word	0x20000be0

08005610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005616:	e019      	b.n	800564c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005618:	f000 fdd4 	bl	80061c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800561c:	4b10      	ldr	r3, [pc, #64]	; (8005660 <prvCheckTasksWaitingTermination+0x50>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe fc81 	bl	8003f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <prvCheckTasksWaitingTermination+0x54>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3b01      	subs	r3, #1
 8005634:	4a0b      	ldr	r2, [pc, #44]	; (8005664 <prvCheckTasksWaitingTermination+0x54>)
 8005636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <prvCheckTasksWaitingTermination+0x58>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3b01      	subs	r3, #1
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <prvCheckTasksWaitingTermination+0x58>)
 8005640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005642:	f000 fdef 	bl	8006224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f810 	bl	800566c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <prvCheckTasksWaitingTermination+0x58>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e1      	bne.n	8005618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000bf8 	.word	0x20000bf8
 8005664:	20000c24 	.word	0x20000c24
 8005668:	20000c0c 	.word	0x20000c0c

0800566c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800567a:	2b00      	cmp	r3, #0
 800567c:	d108      	bne.n	8005690 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	4618      	mov	r0, r3
 8005684:	f000 ff8c 	bl	80065a0 <vPortFree>
				vPortFree( pxTCB );
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 ff89 	bl	80065a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800568e:	e018      	b.n	80056c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005696:	2b01      	cmp	r3, #1
 8005698:	d103      	bne.n	80056a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 ff80 	bl	80065a0 <vPortFree>
	}
 80056a0:	e00f      	b.n	80056c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d00a      	beq.n	80056c2 <prvDeleteTCB+0x56>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60fb      	str	r3, [r7, #12]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <prvDeleteTCB+0x54>
	}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <prvResetNextTaskUnblockTime+0x38>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <prvResetNextTaskUnblockTime+0x3c>)
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056e4:	e008      	b.n	80056f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <prvResetNextTaskUnblockTime+0x38>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <prvResetNextTaskUnblockTime+0x3c>)
 80056f6:	6013      	str	r3, [r2, #0]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000bdc 	.word	0x20000bdc
 8005708:	20000c44 	.word	0x20000c44

0800570c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <xTaskGetSchedulerState+0x34>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800571a:	2301      	movs	r3, #1
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	e008      	b.n	8005732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005720:	4b08      	ldr	r3, [pc, #32]	; (8005744 <xTaskGetSchedulerState+0x38>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005728:	2302      	movs	r3, #2
 800572a:	607b      	str	r3, [r7, #4]
 800572c:	e001      	b.n	8005732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005732:	687b      	ldr	r3, [r7, #4]
	}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000c30 	.word	0x20000c30
 8005744:	20000c4c 	.word	0x20000c4c

08005748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d056      	beq.n	800580c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800575e:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <xTaskPriorityDisinherit+0xd0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	429a      	cmp	r2, r3
 8005766:	d00a      	beq.n	800577e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	60fb      	str	r3, [r7, #12]
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60bb      	str	r3, [r7, #8]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d02c      	beq.n	800580c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d128      	bne.n	800580c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fbb6 	bl	8003f30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	4b0f      	ldr	r3, [pc, #60]	; (800581c <xTaskPriorityDisinherit+0xd4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d903      	bls.n	80057ec <xTaskPriorityDisinherit+0xa4>
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a0c      	ldr	r2, [pc, #48]	; (800581c <xTaskPriorityDisinherit+0xd4>)
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4a09      	ldr	r2, [pc, #36]	; (8005820 <xTaskPriorityDisinherit+0xd8>)
 80057fa:	441a      	add	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3304      	adds	r3, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7fe fb37 	bl	8003e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800580c:	697b      	ldr	r3, [r7, #20]
	}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000750 	.word	0x20000750
 800581c:	20000c2c 	.word	0x20000c2c
 8005820:	20000754 	.word	0x20000754

08005824 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005834:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3304      	adds	r3, #4
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fb78 	bl	8003f30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d10a      	bne.n	800585e <prvAddCurrentTaskToDelayedList+0x3a>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800584e:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4819      	ldr	r0, [pc, #100]	; (80058bc <prvAddCurrentTaskToDelayedList+0x98>)
 8005858:	f7fe fb0d 	bl	8003e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800585c:	e026      	b.n	80058ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	429a      	cmp	r2, r3
 8005874:	d209      	bcs.n	800588a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7fe fb1b 	bl	8003ebe <vListInsert>
}
 8005888:	e010      	b.n	80058ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	4610      	mov	r0, r2
 8005898:	f7fe fb11 	bl	8003ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d202      	bcs.n	80058ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058a6:	4a08      	ldr	r2, [pc, #32]	; (80058c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6013      	str	r3, [r2, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000c28 	.word	0x20000c28
 80058b8:	20000750 	.word	0x20000750
 80058bc:	20000c10 	.word	0x20000c10
 80058c0:	20000be0 	.word	0x20000be0
 80058c4:	20000bdc 	.word	0x20000bdc
 80058c8:	20000c44 	.word	0x20000c44

080058cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058d6:	f000 fb07 	bl	8005ee8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058da:	4b1c      	ldr	r3, [pc, #112]	; (800594c <xTimerCreateTimerTask+0x80>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d021      	beq.n	8005926 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058ea:	1d3a      	adds	r2, r7, #4
 80058ec:	f107 0108 	add.w	r1, r7, #8
 80058f0:	f107 030c 	add.w	r3, r7, #12
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe fa77 	bl	8003de8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	9202      	str	r2, [sp, #8]
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	2302      	movs	r3, #2
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2300      	movs	r3, #0
 800590a:	460a      	mov	r2, r1
 800590c:	4910      	ldr	r1, [pc, #64]	; (8005950 <xTimerCreateTimerTask+0x84>)
 800590e:	4811      	ldr	r0, [pc, #68]	; (8005954 <xTimerCreateTimerTask+0x88>)
 8005910:	f7ff f8de 	bl	8004ad0 <xTaskCreateStatic>
 8005914:	4603      	mov	r3, r0
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <xTimerCreateTimerTask+0x8c>)
 8005918:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <xTimerCreateTimerTask+0x8c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005922:	2301      	movs	r3, #1
 8005924:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	613b      	str	r3, [r7, #16]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005942:	697b      	ldr	r3, [r7, #20]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000c80 	.word	0x20000c80
 8005950:	0800787c 	.word	0x0800787c
 8005954:	08005a91 	.word	0x08005a91
 8005958:	20000c84 	.word	0x20000c84

0800595c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	623b      	str	r3, [r7, #32]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800598a:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <xTimerGenericCommand+0x98>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d02a      	beq.n	80059e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b05      	cmp	r3, #5
 80059a2:	dc18      	bgt.n	80059d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059a4:	f7ff feb2 	bl	800570c <xTaskGetSchedulerState>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d109      	bne.n	80059c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <xTimerGenericCommand+0x98>)
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	f107 0110 	add.w	r1, r7, #16
 80059b6:	2300      	movs	r3, #0
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	f7fe fc21 	bl	8004200 <xQueueGenericSend>
 80059be:	6278      	str	r0, [r7, #36]	; 0x24
 80059c0:	e012      	b.n	80059e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059c2:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <xTimerGenericCommand+0x98>)
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	f107 0110 	add.w	r1, r7, #16
 80059ca:	2300      	movs	r3, #0
 80059cc:	2200      	movs	r2, #0
 80059ce:	f7fe fc17 	bl	8004200 <xQueueGenericSend>
 80059d2:	6278      	str	r0, [r7, #36]	; 0x24
 80059d4:	e008      	b.n	80059e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <xTimerGenericCommand+0x98>)
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f107 0110 	add.w	r1, r7, #16
 80059de:	2300      	movs	r3, #0
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	f7fe fd0b 	bl	80043fc <xQueueGenericSendFromISR>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3728      	adds	r7, #40	; 0x28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000c80 	.word	0x20000c80

080059f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a02:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <prvProcessExpiredTimer+0x94>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe fa8d 	bl	8003f30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d022      	beq.n	8005a6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	18d1      	adds	r1, r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	6978      	ldr	r0, [r7, #20]
 8005a32:	f000 f8d1 	bl	8005bd8 <prvInsertTimerInActiveList>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01f      	beq.n	8005a7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	2300      	movs	r3, #0
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	2100      	movs	r1, #0
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff88 	bl	800595c <xTimerGenericCommand>
 8005a4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d113      	bne.n	8005a7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60fb      	str	r3, [r7, #12]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	6978      	ldr	r0, [r7, #20]
 8005a82:	4798      	blx	r3
}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000c78 	.word	0x20000c78

08005a90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a98:	f107 0308 	add.w	r3, r7, #8
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f857 	bl	8005b50 <prvGetNextExpireTime>
 8005aa2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f803 	bl	8005ab4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005aae:	f000 f8d5 	bl	8005c5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ab2:	e7f1      	b.n	8005a98 <prvTimerTask+0x8>

08005ab4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005abe:	f7ff fa43 	bl	8004f48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ac2:	f107 0308 	add.w	r3, r7, #8
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f866 	bl	8005b98 <prvSampleTimeNow>
 8005acc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d130      	bne.n	8005b36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <prvProcessTimerOrBlockTask+0x3c>
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d806      	bhi.n	8005af0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ae2:	f7ff fa3f 	bl	8004f64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff ff85 	bl	80059f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005aee:	e024      	b.n	8005b3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <prvProcessTimerOrBlockTask+0x90>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <prvProcessTimerOrBlockTask+0x50>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <prvProcessTimerOrBlockTask+0x52>
 8005b04:	2300      	movs	r3, #0
 8005b06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b08:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <prvProcessTimerOrBlockTask+0x94>)
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	4619      	mov	r1, r3
 8005b16:	f7fe ffa7 	bl	8004a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b1a:	f7ff fa23 	bl	8004f64 <xTaskResumeAll>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <prvProcessTimerOrBlockTask+0x98>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
}
 8005b34:	e001      	b.n	8005b3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b36:	f7ff fa15 	bl	8004f64 <xTaskResumeAll>
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000c7c 	.word	0x20000c7c
 8005b48:	20000c80 	.word	0x20000c80
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <prvGetNextExpireTime+0x44>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <prvGetNextExpireTime+0x16>
 8005b62:	2201      	movs	r2, #1
 8005b64:	e000      	b.n	8005b68 <prvGetNextExpireTime+0x18>
 8005b66:	2200      	movs	r2, #0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b74:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <prvGetNextExpireTime+0x44>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	e001      	b.n	8005b84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b84:	68fb      	ldr	r3, [r7, #12]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000c78 	.word	0x20000c78

08005b98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ba0:	f7ff fa7e 	bl	80050a0 <xTaskGetTickCount>
 8005ba4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <prvSampleTimeNow+0x3c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d205      	bcs.n	8005bbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bb0:	f000 f936 	bl	8005e20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bc2:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <prvSampleTimeNow+0x3c>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000c88 	.word	0x20000c88

08005bd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d812      	bhi.n	8005c24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d302      	bcc.n	8005c12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e01b      	b.n	8005c4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <prvInsertTimerInActiveList+0x7c>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f7fe f94e 	bl	8003ebe <vListInsert>
 8005c22:	e012      	b.n	8005c4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d206      	bcs.n	8005c3a <prvInsertTimerInActiveList+0x62>
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d302      	bcc.n	8005c3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e007      	b.n	8005c4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <prvInsertTimerInActiveList+0x80>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f7fe f93a 	bl	8003ebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c4a:	697b      	ldr	r3, [r7, #20]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000c7c 	.word	0x20000c7c
 8005c58:	20000c78 	.word	0x20000c78

08005c5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08e      	sub	sp, #56	; 0x38
 8005c60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c62:	e0ca      	b.n	8005dfa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da18      	bge.n	8005c9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	61fb      	str	r3, [r7, #28]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c92:	6850      	ldr	r0, [r2, #4]
 8005c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c96:	6892      	ldr	r2, [r2, #8]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f2c0 80aa 	blt.w	8005df8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe f93b 	bl	8003f30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cba:	463b      	mov	r3, r7
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ff6b 	bl	8005b98 <prvSampleTimeNow>
 8005cc2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	f200 8097 	bhi.w	8005dfa <prvProcessReceivedCommands+0x19e>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <prvProcessReceivedCommands+0x78>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005d71 	.word	0x08005d71
 8005ce4:	08005d85 	.word	0x08005d85
 8005ce8:	08005dcf 	.word	0x08005dcf
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005cfd 	.word	0x08005cfd
 8005cf4:	08005d71 	.word	0x08005d71
 8005cf8:	08005d85 	.word	0x08005d85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	18d1      	adds	r1, r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d1c:	f7ff ff5c 	bl	8005bd8 <prvInsertTimerInActiveList>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d069      	beq.n	8005dfa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05e      	beq.n	8005dfa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	441a      	add	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4e:	f7ff fe05 	bl	800595c <xTimerGenericCommand>
 8005d52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d14f      	bne.n	8005dfa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	61bb      	str	r3, [r7, #24]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d76:	f023 0301 	bic.w	r3, r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d82:	e03a      	b.n	8005dfa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	617b      	str	r3, [r7, #20]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	18d1      	adds	r1, r2, r3
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc8:	f7ff ff06 	bl	8005bd8 <prvInsertTimerInActiveList>
					break;
 8005dcc:	e015      	b.n	8005dfa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dde:	f000 fbdf 	bl	80065a0 <vPortFree>
 8005de2:	e00a      	b.n	8005dfa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005df6:	e000      	b.n	8005dfa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005df8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dfa:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <prvProcessReceivedCommands+0x1c0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	1d39      	adds	r1, r7, #4
 8005e00:	2200      	movs	r2, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fb96 	bl	8004534 <xQueueReceive>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f47f af2a 	bne.w	8005c64 <prvProcessReceivedCommands+0x8>
	}
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	3730      	adds	r7, #48	; 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000c80 	.word	0x20000c80

08005e20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e26:	e048      	b.n	8005eba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e28:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e32:	4b2b      	ldr	r3, [pc, #172]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe f875 	bl	8003f30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d02e      	beq.n	8005eba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d90e      	bls.n	8005e8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e7a:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f7fe f81a 	bl	8003ebe <vListInsert>
 8005e8a:	e016      	b.n	8005eba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2300      	movs	r3, #0
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	2100      	movs	r1, #0
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff fd60 	bl	800595c <xTimerGenericCommand>
 8005e9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	603b      	str	r3, [r7, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1b1      	bne.n	8005e28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <prvSwitchTimerLists+0xc4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005ed0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ed2:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <prvSwitchTimerLists+0xc4>)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	6013      	str	r3, [r2, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000c78 	.word	0x20000c78
 8005ee4:	20000c7c 	.word	0x20000c7c

08005ee8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eee:	f000 f969 	bl	80061c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <prvCheckForValidListAndQueue+0x60>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d120      	bne.n	8005f3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005efa:	4814      	ldr	r0, [pc, #80]	; (8005f4c <prvCheckForValidListAndQueue+0x64>)
 8005efc:	f7fd ff8e 	bl	8003e1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f00:	4813      	ldr	r0, [pc, #76]	; (8005f50 <prvCheckForValidListAndQueue+0x68>)
 8005f02:	f7fd ff8b 	bl	8003e1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <prvCheckForValidListAndQueue+0x6c>)
 8005f08:	4a10      	ldr	r2, [pc, #64]	; (8005f4c <prvCheckForValidListAndQueue+0x64>)
 8005f0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <prvCheckForValidListAndQueue+0x70>)
 8005f0e:	4a10      	ldr	r2, [pc, #64]	; (8005f50 <prvCheckForValidListAndQueue+0x68>)
 8005f10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f12:	2300      	movs	r3, #0
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <prvCheckForValidListAndQueue+0x74>)
 8005f18:	4a11      	ldr	r2, [pc, #68]	; (8005f60 <prvCheckForValidListAndQueue+0x78>)
 8005f1a:	2110      	movs	r1, #16
 8005f1c:	200a      	movs	r0, #10
 8005f1e:	f7fe f899 	bl	8004054 <xQueueGenericCreateStatic>
 8005f22:	4603      	mov	r3, r0
 8005f24:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <prvCheckForValidListAndQueue+0x60>)
 8005f26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f28:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <prvCheckForValidListAndQueue+0x60>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <prvCheckForValidListAndQueue+0x60>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	490b      	ldr	r1, [pc, #44]	; (8005f64 <prvCheckForValidListAndQueue+0x7c>)
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe fd6c 	bl	8004a14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f3c:	f000 f972 	bl	8006224 <vPortExitCritical>
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000c80 	.word	0x20000c80
 8005f4c:	20000c50 	.word	0x20000c50
 8005f50:	20000c64 	.word	0x20000c64
 8005f54:	20000c78 	.word	0x20000c78
 8005f58:	20000c7c 	.word	0x20000c7c
 8005f5c:	20000d2c 	.word	0x20000d2c
 8005f60:	20000c8c 	.word	0x20000c8c
 8005f64:	08007884 	.word	0x08007884

08005f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3b04      	subs	r3, #4
 8005f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b04      	subs	r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f98:	4a0c      	ldr	r2, [pc, #48]	; (8005fcc <pxPortInitialiseStack+0x64>)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3b14      	subs	r3, #20
 8005fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f06f 0202 	mvn.w	r2, #2
 8005fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b20      	subs	r3, #32
 8005fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	08005fd1 	.word	0x08005fd1

08005fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <prvTaskExitError+0x54>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d00a      	beq.n	8005ffa <prvTaskExitError+0x2a>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <prvTaskExitError+0x28>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
}
 800600c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800600e:	bf00      	nop
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0fc      	beq.n	8006010 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	2000000c 	.word	0x2000000c
	...

08006030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <pxCurrentTCBConst2>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6808      	ldr	r0, [r1, #0]
 8006036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	f380 8809 	msr	PSP, r0
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	4770      	bx	lr
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst2>:
 8006050:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006058:	4808      	ldr	r0, [pc, #32]	; (800607c <prvPortStartFirstTask+0x24>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f380 8808 	msr	MSP, r0
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8814 	msr	CONTROL, r0
 800606a:	b662      	cpsie	i
 800606c:	b661      	cpsie	f
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	df00      	svc	0
 8006078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800607a:	bf00      	nop
 800607c:	e000ed08 	.word	0xe000ed08

08006080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006086:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <xPortStartScheduler+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a46      	ldr	r2, [pc, #280]	; (80061a4 <xPortStartScheduler+0x124>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10a      	bne.n	80060a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060a6:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <xPortStartScheduler+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3f      	ldr	r2, [pc, #252]	; (80061a8 <xPortStartScheduler+0x128>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10a      	bne.n	80060c6 <xPortStartScheduler+0x46>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <xPortStartScheduler+0x12c>)
 80060c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <xPortStartScheduler+0x130>)
 80060ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f4:	e009      	b.n	800610a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060f6:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <xPortStartScheduler+0x134>)
 80060fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d0ef      	beq.n	80060f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <xPortStartScheduler+0x134>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1c3 0307 	rsb	r3, r3, #7
 800611e:	2b04      	cmp	r3, #4
 8006120:	d00a      	beq.n	8006138 <xPortStartScheduler+0xb8>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <xPortStartScheduler+0x134>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <xPortStartScheduler+0x134>)
 8006140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xPortStartScheduler+0x134>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <xPortStartScheduler+0x134>)
 800614c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006156:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <xPortStartScheduler+0x138>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <xPortStartScheduler+0x138>)
 800615c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <xPortStartScheduler+0x138>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <xPortStartScheduler+0x138>)
 8006168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800616c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800616e:	f000 f8dd 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <xPortStartScheduler+0x13c>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006178:	f000 f8fc 	bl	8006374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <xPortStartScheduler+0x140>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <xPortStartScheduler+0x140>)
 8006182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006188:	f7ff ff66 	bl	8006058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800618c:	f7ff f852 	bl	8005234 <vTaskSwitchContext>
	prvTaskExitError();
 8006190:	f7ff ff1e 	bl	8005fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	e000ed00 	.word	0xe000ed00
 80061a4:	410fc271 	.word	0x410fc271
 80061a8:	410fc270 	.word	0x410fc270
 80061ac:	e000e400 	.word	0xe000e400
 80061b0:	20000d7c 	.word	0x20000d7c
 80061b4:	20000d80 	.word	0x20000d80
 80061b8:	e000ed20 	.word	0xe000ed20
 80061bc:	2000000c 	.word	0x2000000c
 80061c0:	e000ef34 	.word	0xe000ef34

080061c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	607b      	str	r3, [r7, #4]
}
 80061dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <vPortEnterCritical+0x58>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <vPortEnterCritical+0x58>)
 80061e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <vPortEnterCritical+0x58>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10f      	bne.n	8006210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortEnterCritical+0x5c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <vPortEnterCritical+0x4c>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	603b      	str	r3, [r7, #0]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vPortEnterCritical+0x4a>
	}
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	2000000c 	.word	0x2000000c
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <vPortExitCritical+0x50>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <vPortExitCritical+0x24>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <vPortExitCritical+0x50>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <vPortExitCritical+0x50>)
 8006250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <vPortExitCritical+0x50>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <vPortExitCritical+0x42>
 800625a:	2300      	movs	r3, #0
 800625c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f383 8811 	msr	BASEPRI, r3
}
 8006264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000000c 	.word	0x2000000c
	...

08006280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062a4:	f380 8811 	msr	BASEPRI, r0
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f7fe ffc0 	bl	8005234 <vTaskSwitchContext>
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f380 8811 	msr	BASEPRI, r0
 80062bc:	bc09      	pop	{r0, r3}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c6:	f01e 0f10 	tst.w	lr, #16
 80062ca:	bf08      	it	eq
 80062cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d0:	f380 8809 	msr	PSP, r0
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst>:
 80062e0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006302:	f7fe fedd 	bl	80050c0 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <xPortSysTickHandler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <vPortSetupTimerInterrupt+0x38>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <vPortSetupTimerInterrupt+0x40>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <vPortSetupTimerInterrupt+0x44>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e010 	.word	0xe000e010
 8006364:	e000e018 	.word	0xe000e018
 8006368:	20000000 	.word	0x20000000
 800636c:	10624dd3 	.word	0x10624dd3
 8006370:	e000e014 	.word	0xe000e014

08006374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006384 <vPortEnableVFP+0x10>
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006382:	bf00      	nop
 8006384:	e000ed88 	.word	0xe000ed88

08006388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800638e:	f3ef 8305 	mrs	r3, IPSR
 8006392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d914      	bls.n	80063c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <vPortValidateInterruptPriority+0x70>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063a4:	4b15      	ldr	r3, [pc, #84]	; (80063fc <vPortValidateInterruptPriority+0x74>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	7afa      	ldrb	r2, [r7, #11]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20a      	bcs.n	80063c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <vPortValidateInterruptPriority+0x78>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063cc:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <vPortValidateInterruptPriority+0x7c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d90a      	bls.n	80063ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	603b      	str	r3, [r7, #0]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <vPortValidateInterruptPriority+0x60>
	}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	e000e3f0 	.word	0xe000e3f0
 80063fc:	20000d7c 	.word	0x20000d7c
 8006400:	e000ed0c 	.word	0xe000ed0c
 8006404:	20000d80 	.word	0x20000d80

08006408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006414:	f7fe fd98 	bl	8004f48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006418:	4b5b      	ldr	r3, [pc, #364]	; (8006588 <pvPortMalloc+0x180>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006420:	f000 f920 	bl	8006664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006424:	4b59      	ldr	r3, [pc, #356]	; (800658c <pvPortMalloc+0x184>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 8093 	bne.w	8006558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01d      	beq.n	8006474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006438:	2208      	movs	r2, #8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b00      	cmp	r3, #0
 8006448:	d014      	beq.n	8006474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	3308      	adds	r3, #8
 8006452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <pvPortMalloc+0x6c>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	617b      	str	r3, [r7, #20]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d06e      	beq.n	8006558 <pvPortMalloc+0x150>
 800647a:	4b45      	ldr	r3, [pc, #276]	; (8006590 <pvPortMalloc+0x188>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d869      	bhi.n	8006558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006484:	4b43      	ldr	r3, [pc, #268]	; (8006594 <pvPortMalloc+0x18c>)
 8006486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006488:	4b42      	ldr	r3, [pc, #264]	; (8006594 <pvPortMalloc+0x18c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800648e:	e004      	b.n	800649a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d903      	bls.n	80064ac <pvPortMalloc+0xa4>
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f1      	bne.n	8006490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064ac:	4b36      	ldr	r3, [pc, #216]	; (8006588 <pvPortMalloc+0x180>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d050      	beq.n	8006558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2208      	movs	r2, #8
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	2308      	movs	r3, #8
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d91f      	bls.n	8006518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <pvPortMalloc+0xf8>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	613b      	str	r3, [r7, #16]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	1ad2      	subs	r2, r2, r3
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006512:	69b8      	ldr	r0, [r7, #24]
 8006514:	f000 f908 	bl	8006728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <pvPortMalloc+0x188>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <pvPortMalloc+0x188>)
 8006524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <pvPortMalloc+0x188>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <pvPortMalloc+0x190>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d203      	bcs.n	800653a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <pvPortMalloc+0x188>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a18      	ldr	r2, [pc, #96]	; (8006598 <pvPortMalloc+0x190>)
 8006538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <pvPortMalloc+0x184>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	431a      	orrs	r2, r3
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <pvPortMalloc+0x194>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3301      	adds	r3, #1
 8006554:	4a11      	ldr	r2, [pc, #68]	; (800659c <pvPortMalloc+0x194>)
 8006556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006558:	f7fe fd04 	bl	8004f64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <pvPortMalloc+0x174>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60fb      	str	r3, [r7, #12]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <pvPortMalloc+0x172>
	return pvReturn;
 800657c:	69fb      	ldr	r3, [r7, #28]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3728      	adds	r7, #40	; 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20001944 	.word	0x20001944
 800658c:	20001958 	.word	0x20001958
 8006590:	20001948 	.word	0x20001948
 8006594:	2000193c 	.word	0x2000193c
 8006598:	2000194c 	.word	0x2000194c
 800659c:	20001950 	.word	0x20001950

080065a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d04d      	beq.n	800664e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065b2:	2308      	movs	r3, #8
 80065b4:	425b      	negs	r3, r3
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	4b24      	ldr	r3, [pc, #144]	; (8006658 <vPortFree+0xb8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <vPortFree+0x44>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60fb      	str	r3, [r7, #12]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <vPortFree+0x62>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60bb      	str	r3, [r7, #8]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <vPortFree+0xb8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01e      	beq.n	800664e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11a      	bne.n	800664e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <vPortFree+0xb8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	43db      	mvns	r3, r3
 8006622:	401a      	ands	r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006628:	f7fe fc8e 	bl	8004f48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <vPortFree+0xbc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4413      	add	r3, r2
 8006636:	4a09      	ldr	r2, [pc, #36]	; (800665c <vPortFree+0xbc>)
 8006638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800663a:	6938      	ldr	r0, [r7, #16]
 800663c:	f000 f874 	bl	8006728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006640:	4b07      	ldr	r3, [pc, #28]	; (8006660 <vPortFree+0xc0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	4a06      	ldr	r2, [pc, #24]	; (8006660 <vPortFree+0xc0>)
 8006648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800664a:	f7fe fc8b 	bl	8004f64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800664e:	bf00      	nop
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20001958 	.word	0x20001958
 800665c:	20001948 	.word	0x20001948
 8006660:	20001954 	.word	0x20001954

08006664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800666a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800666e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006670:	4b27      	ldr	r3, [pc, #156]	; (8006710 <prvHeapInit+0xac>)
 8006672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3307      	adds	r3, #7
 8006682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0307 	bic.w	r3, r3, #7
 800668a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <prvHeapInit+0xac>)
 8006694:	4413      	add	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <prvHeapInit+0xb0>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066a2:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <prvHeapInit+0xb0>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4413      	add	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066b0:	2208      	movs	r2, #8
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0307 	bic.w	r3, r3, #7
 80066be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a15      	ldr	r2, [pc, #84]	; (8006718 <prvHeapInit+0xb4>)
 80066c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066c6:	4b14      	ldr	r3, [pc, #80]	; (8006718 <prvHeapInit+0xb4>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ce:	4b12      	ldr	r3, [pc, #72]	; (8006718 <prvHeapInit+0xb4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <prvHeapInit+0xb4>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <prvHeapInit+0xb8>)
 80066f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <prvHeapInit+0xbc>)
 80066fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <prvHeapInit+0xc0>)
 80066fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000d84 	.word	0x20000d84
 8006714:	2000193c 	.word	0x2000193c
 8006718:	20001944 	.word	0x20001944
 800671c:	2000194c 	.word	0x2000194c
 8006720:	20001948 	.word	0x20001948
 8006724:	20001958 	.word	0x20001958

08006728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006730:	4b28      	ldr	r3, [pc, #160]	; (80067d4 <prvInsertBlockIntoFreeList+0xac>)
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e002      	b.n	800673c <prvInsertBlockIntoFreeList+0x14>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d8f7      	bhi.n	8006736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4413      	add	r3, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d108      	bne.n	800676a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	441a      	add	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d118      	bne.n	80067b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d00d      	beq.n	80067a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	441a      	add	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e008      	b.n	80067b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <prvInsertBlockIntoFreeList+0xb0>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e003      	b.n	80067b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d002      	beq.n	80067c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	2000193c 	.word	0x2000193c
 80067d8:	20001944 	.word	0x20001944

080067dc <__errno>:
 80067dc:	4b01      	ldr	r3, [pc, #4]	; (80067e4 <__errno+0x8>)
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000010 	.word	0x20000010

080067e8 <__libc_init_array>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	4d0d      	ldr	r5, [pc, #52]	; (8006820 <__libc_init_array+0x38>)
 80067ec:	4c0d      	ldr	r4, [pc, #52]	; (8006824 <__libc_init_array+0x3c>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	2600      	movs	r6, #0
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	d109      	bne.n	800680c <__libc_init_array+0x24>
 80067f8:	4d0b      	ldr	r5, [pc, #44]	; (8006828 <__libc_init_array+0x40>)
 80067fa:	4c0c      	ldr	r4, [pc, #48]	; (800682c <__libc_init_array+0x44>)
 80067fc:	f000 fffa 	bl	80077f4 <_init>
 8006800:	1b64      	subs	r4, r4, r5
 8006802:	10a4      	asrs	r4, r4, #2
 8006804:	2600      	movs	r6, #0
 8006806:	42a6      	cmp	r6, r4
 8006808:	d105      	bne.n	8006816 <__libc_init_array+0x2e>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006810:	4798      	blx	r3
 8006812:	3601      	adds	r6, #1
 8006814:	e7ee      	b.n	80067f4 <__libc_init_array+0xc>
 8006816:	f855 3b04 	ldr.w	r3, [r5], #4
 800681a:	4798      	blx	r3
 800681c:	3601      	adds	r6, #1
 800681e:	e7f2      	b.n	8006806 <__libc_init_array+0x1e>
 8006820:	080079b0 	.word	0x080079b0
 8006824:	080079b0 	.word	0x080079b0
 8006828:	080079b0 	.word	0x080079b0
 800682c:	080079b4 	.word	0x080079b4

08006830 <memcpy>:
 8006830:	440a      	add	r2, r1
 8006832:	4291      	cmp	r1, r2
 8006834:	f100 33ff 	add.w	r3, r0, #4294967295
 8006838:	d100      	bne.n	800683c <memcpy+0xc>
 800683a:	4770      	bx	lr
 800683c:	b510      	push	{r4, lr}
 800683e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006846:	4291      	cmp	r1, r2
 8006848:	d1f9      	bne.n	800683e <memcpy+0xe>
 800684a:	bd10      	pop	{r4, pc}

0800684c <memset>:
 800684c:	4402      	add	r2, r0
 800684e:	4603      	mov	r3, r0
 8006850:	4293      	cmp	r3, r2
 8006852:	d100      	bne.n	8006856 <memset+0xa>
 8006854:	4770      	bx	lr
 8006856:	f803 1b01 	strb.w	r1, [r3], #1
 800685a:	e7f9      	b.n	8006850 <memset+0x4>

0800685c <iprintf>:
 800685c:	b40f      	push	{r0, r1, r2, r3}
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <iprintf+0x2c>)
 8006860:	b513      	push	{r0, r1, r4, lr}
 8006862:	681c      	ldr	r4, [r3, #0]
 8006864:	b124      	cbz	r4, 8006870 <iprintf+0x14>
 8006866:	69a3      	ldr	r3, [r4, #24]
 8006868:	b913      	cbnz	r3, 8006870 <iprintf+0x14>
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fa5e 	bl	8006d2c <__sinit>
 8006870:	ab05      	add	r3, sp, #20
 8006872:	9a04      	ldr	r2, [sp, #16]
 8006874:	68a1      	ldr	r1, [r4, #8]
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fc2f 	bl	80070dc <_vfiprintf_r>
 800687e:	b002      	add	sp, #8
 8006880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006884:	b004      	add	sp, #16
 8006886:	4770      	bx	lr
 8006888:	20000010 	.word	0x20000010

0800688c <_puts_r>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	460e      	mov	r6, r1
 8006890:	4605      	mov	r5, r0
 8006892:	b118      	cbz	r0, 800689c <_puts_r+0x10>
 8006894:	6983      	ldr	r3, [r0, #24]
 8006896:	b90b      	cbnz	r3, 800689c <_puts_r+0x10>
 8006898:	f000 fa48 	bl	8006d2c <__sinit>
 800689c:	69ab      	ldr	r3, [r5, #24]
 800689e:	68ac      	ldr	r4, [r5, #8]
 80068a0:	b913      	cbnz	r3, 80068a8 <_puts_r+0x1c>
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 fa42 	bl	8006d2c <__sinit>
 80068a8:	4b2c      	ldr	r3, [pc, #176]	; (800695c <_puts_r+0xd0>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d120      	bne.n	80068f0 <_puts_r+0x64>
 80068ae:	686c      	ldr	r4, [r5, #4]
 80068b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068b2:	07db      	lsls	r3, r3, #31
 80068b4:	d405      	bmi.n	80068c2 <_puts_r+0x36>
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	0598      	lsls	r0, r3, #22
 80068ba:	d402      	bmi.n	80068c2 <_puts_r+0x36>
 80068bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068be:	f000 fad3 	bl	8006e68 <__retarget_lock_acquire_recursive>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	0719      	lsls	r1, r3, #28
 80068c6:	d51d      	bpl.n	8006904 <_puts_r+0x78>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	b1db      	cbz	r3, 8006904 <_puts_r+0x78>
 80068cc:	3e01      	subs	r6, #1
 80068ce:	68a3      	ldr	r3, [r4, #8]
 80068d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068d4:	3b01      	subs	r3, #1
 80068d6:	60a3      	str	r3, [r4, #8]
 80068d8:	bb39      	cbnz	r1, 800692a <_puts_r+0x9e>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da38      	bge.n	8006950 <_puts_r+0xc4>
 80068de:	4622      	mov	r2, r4
 80068e0:	210a      	movs	r1, #10
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f848 	bl	8006978 <__swbuf_r>
 80068e8:	3001      	adds	r0, #1
 80068ea:	d011      	beq.n	8006910 <_puts_r+0x84>
 80068ec:	250a      	movs	r5, #10
 80068ee:	e011      	b.n	8006914 <_puts_r+0x88>
 80068f0:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <_puts_r+0xd4>)
 80068f2:	429c      	cmp	r4, r3
 80068f4:	d101      	bne.n	80068fa <_puts_r+0x6e>
 80068f6:	68ac      	ldr	r4, [r5, #8]
 80068f8:	e7da      	b.n	80068b0 <_puts_r+0x24>
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <_puts_r+0xd8>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	bf08      	it	eq
 8006900:	68ec      	ldreq	r4, [r5, #12]
 8006902:	e7d5      	b.n	80068b0 <_puts_r+0x24>
 8006904:	4621      	mov	r1, r4
 8006906:	4628      	mov	r0, r5
 8006908:	f000 f888 	bl	8006a1c <__swsetup_r>
 800690c:	2800      	cmp	r0, #0
 800690e:	d0dd      	beq.n	80068cc <_puts_r+0x40>
 8006910:	f04f 35ff 	mov.w	r5, #4294967295
 8006914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006916:	07da      	lsls	r2, r3, #31
 8006918:	d405      	bmi.n	8006926 <_puts_r+0x9a>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	059b      	lsls	r3, r3, #22
 800691e:	d402      	bmi.n	8006926 <_puts_r+0x9a>
 8006920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006922:	f000 faa2 	bl	8006e6a <__retarget_lock_release_recursive>
 8006926:	4628      	mov	r0, r5
 8006928:	bd70      	pop	{r4, r5, r6, pc}
 800692a:	2b00      	cmp	r3, #0
 800692c:	da04      	bge.n	8006938 <_puts_r+0xac>
 800692e:	69a2      	ldr	r2, [r4, #24]
 8006930:	429a      	cmp	r2, r3
 8006932:	dc06      	bgt.n	8006942 <_puts_r+0xb6>
 8006934:	290a      	cmp	r1, #10
 8006936:	d004      	beq.n	8006942 <_puts_r+0xb6>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	6022      	str	r2, [r4, #0]
 800693e:	7019      	strb	r1, [r3, #0]
 8006940:	e7c5      	b.n	80068ce <_puts_r+0x42>
 8006942:	4622      	mov	r2, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f817 	bl	8006978 <__swbuf_r>
 800694a:	3001      	adds	r0, #1
 800694c:	d1bf      	bne.n	80068ce <_puts_r+0x42>
 800694e:	e7df      	b.n	8006910 <_puts_r+0x84>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	250a      	movs	r5, #10
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	6022      	str	r2, [r4, #0]
 8006958:	701d      	strb	r5, [r3, #0]
 800695a:	e7db      	b.n	8006914 <_puts_r+0x88>
 800695c:	08007934 	.word	0x08007934
 8006960:	08007954 	.word	0x08007954
 8006964:	08007914 	.word	0x08007914

08006968 <puts>:
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <puts+0xc>)
 800696a:	4601      	mov	r1, r0
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	f7ff bf8d 	b.w	800688c <_puts_r>
 8006972:	bf00      	nop
 8006974:	20000010 	.word	0x20000010

08006978 <__swbuf_r>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	460e      	mov	r6, r1
 800697c:	4614      	mov	r4, r2
 800697e:	4605      	mov	r5, r0
 8006980:	b118      	cbz	r0, 800698a <__swbuf_r+0x12>
 8006982:	6983      	ldr	r3, [r0, #24]
 8006984:	b90b      	cbnz	r3, 800698a <__swbuf_r+0x12>
 8006986:	f000 f9d1 	bl	8006d2c <__sinit>
 800698a:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <__swbuf_r+0x98>)
 800698c:	429c      	cmp	r4, r3
 800698e:	d12b      	bne.n	80069e8 <__swbuf_r+0x70>
 8006990:	686c      	ldr	r4, [r5, #4]
 8006992:	69a3      	ldr	r3, [r4, #24]
 8006994:	60a3      	str	r3, [r4, #8]
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	071a      	lsls	r2, r3, #28
 800699a:	d52f      	bpl.n	80069fc <__swbuf_r+0x84>
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	b36b      	cbz	r3, 80069fc <__swbuf_r+0x84>
 80069a0:	6923      	ldr	r3, [r4, #16]
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	1ac0      	subs	r0, r0, r3
 80069a6:	6963      	ldr	r3, [r4, #20]
 80069a8:	b2f6      	uxtb	r6, r6
 80069aa:	4283      	cmp	r3, r0
 80069ac:	4637      	mov	r7, r6
 80069ae:	dc04      	bgt.n	80069ba <__swbuf_r+0x42>
 80069b0:	4621      	mov	r1, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 f926 	bl	8006c04 <_fflush_r>
 80069b8:	bb30      	cbnz	r0, 8006a08 <__swbuf_r+0x90>
 80069ba:	68a3      	ldr	r3, [r4, #8]
 80069bc:	3b01      	subs	r3, #1
 80069be:	60a3      	str	r3, [r4, #8]
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	6022      	str	r2, [r4, #0]
 80069c6:	701e      	strb	r6, [r3, #0]
 80069c8:	6963      	ldr	r3, [r4, #20]
 80069ca:	3001      	adds	r0, #1
 80069cc:	4283      	cmp	r3, r0
 80069ce:	d004      	beq.n	80069da <__swbuf_r+0x62>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	07db      	lsls	r3, r3, #31
 80069d4:	d506      	bpl.n	80069e4 <__swbuf_r+0x6c>
 80069d6:	2e0a      	cmp	r6, #10
 80069d8:	d104      	bne.n	80069e4 <__swbuf_r+0x6c>
 80069da:	4621      	mov	r1, r4
 80069dc:	4628      	mov	r0, r5
 80069de:	f000 f911 	bl	8006c04 <_fflush_r>
 80069e2:	b988      	cbnz	r0, 8006a08 <__swbuf_r+0x90>
 80069e4:	4638      	mov	r0, r7
 80069e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <__swbuf_r+0x9c>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d101      	bne.n	80069f2 <__swbuf_r+0x7a>
 80069ee:	68ac      	ldr	r4, [r5, #8]
 80069f0:	e7cf      	b.n	8006992 <__swbuf_r+0x1a>
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <__swbuf_r+0xa0>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	bf08      	it	eq
 80069f8:	68ec      	ldreq	r4, [r5, #12]
 80069fa:	e7ca      	b.n	8006992 <__swbuf_r+0x1a>
 80069fc:	4621      	mov	r1, r4
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f80c 	bl	8006a1c <__swsetup_r>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d0cb      	beq.n	80069a0 <__swbuf_r+0x28>
 8006a08:	f04f 37ff 	mov.w	r7, #4294967295
 8006a0c:	e7ea      	b.n	80069e4 <__swbuf_r+0x6c>
 8006a0e:	bf00      	nop
 8006a10:	08007934 	.word	0x08007934
 8006a14:	08007954 	.word	0x08007954
 8006a18:	08007914 	.word	0x08007914

08006a1c <__swsetup_r>:
 8006a1c:	4b32      	ldr	r3, [pc, #200]	; (8006ae8 <__swsetup_r+0xcc>)
 8006a1e:	b570      	push	{r4, r5, r6, lr}
 8006a20:	681d      	ldr	r5, [r3, #0]
 8006a22:	4606      	mov	r6, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	b125      	cbz	r5, 8006a32 <__swsetup_r+0x16>
 8006a28:	69ab      	ldr	r3, [r5, #24]
 8006a2a:	b913      	cbnz	r3, 8006a32 <__swsetup_r+0x16>
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f000 f97d 	bl	8006d2c <__sinit>
 8006a32:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <__swsetup_r+0xd0>)
 8006a34:	429c      	cmp	r4, r3
 8006a36:	d10f      	bne.n	8006a58 <__swsetup_r+0x3c>
 8006a38:	686c      	ldr	r4, [r5, #4]
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a40:	0719      	lsls	r1, r3, #28
 8006a42:	d42c      	bmi.n	8006a9e <__swsetup_r+0x82>
 8006a44:	06dd      	lsls	r5, r3, #27
 8006a46:	d411      	bmi.n	8006a6c <__swsetup_r+0x50>
 8006a48:	2309      	movs	r3, #9
 8006a4a:	6033      	str	r3, [r6, #0]
 8006a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a50:	81a3      	strh	r3, [r4, #12]
 8006a52:	f04f 30ff 	mov.w	r0, #4294967295
 8006a56:	e03e      	b.n	8006ad6 <__swsetup_r+0xba>
 8006a58:	4b25      	ldr	r3, [pc, #148]	; (8006af0 <__swsetup_r+0xd4>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d101      	bne.n	8006a62 <__swsetup_r+0x46>
 8006a5e:	68ac      	ldr	r4, [r5, #8]
 8006a60:	e7eb      	b.n	8006a3a <__swsetup_r+0x1e>
 8006a62:	4b24      	ldr	r3, [pc, #144]	; (8006af4 <__swsetup_r+0xd8>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	bf08      	it	eq
 8006a68:	68ec      	ldreq	r4, [r5, #12]
 8006a6a:	e7e6      	b.n	8006a3a <__swsetup_r+0x1e>
 8006a6c:	0758      	lsls	r0, r3, #29
 8006a6e:	d512      	bpl.n	8006a96 <__swsetup_r+0x7a>
 8006a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a72:	b141      	cbz	r1, 8006a86 <__swsetup_r+0x6a>
 8006a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a78:	4299      	cmp	r1, r3
 8006a7a:	d002      	beq.n	8006a82 <__swsetup_r+0x66>
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f000 fa59 	bl	8006f34 <_free_r>
 8006a82:	2300      	movs	r3, #0
 8006a84:	6363      	str	r3, [r4, #52]	; 0x34
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6063      	str	r3, [r4, #4]
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f043 0308 	orr.w	r3, r3, #8
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	b94b      	cbnz	r3, 8006ab6 <__swsetup_r+0x9a>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aac:	d003      	beq.n	8006ab6 <__swsetup_r+0x9a>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 f9ff 	bl	8006eb4 <__smakebuf_r>
 8006ab6:	89a0      	ldrh	r0, [r4, #12]
 8006ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006abc:	f010 0301 	ands.w	r3, r0, #1
 8006ac0:	d00a      	beq.n	8006ad8 <__swsetup_r+0xbc>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	6963      	ldr	r3, [r4, #20]
 8006ac8:	425b      	negs	r3, r3
 8006aca:	61a3      	str	r3, [r4, #24]
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	b943      	cbnz	r3, 8006ae2 <__swsetup_r+0xc6>
 8006ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ad4:	d1ba      	bne.n	8006a4c <__swsetup_r+0x30>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	0781      	lsls	r1, r0, #30
 8006ada:	bf58      	it	pl
 8006adc:	6963      	ldrpl	r3, [r4, #20]
 8006ade:	60a3      	str	r3, [r4, #8]
 8006ae0:	e7f4      	b.n	8006acc <__swsetup_r+0xb0>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e7f7      	b.n	8006ad6 <__swsetup_r+0xba>
 8006ae6:	bf00      	nop
 8006ae8:	20000010 	.word	0x20000010
 8006aec:	08007934 	.word	0x08007934
 8006af0:	08007954 	.word	0x08007954
 8006af4:	08007914 	.word	0x08007914

08006af8 <__sflush_r>:
 8006af8:	898a      	ldrh	r2, [r1, #12]
 8006afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afe:	4605      	mov	r5, r0
 8006b00:	0710      	lsls	r0, r2, #28
 8006b02:	460c      	mov	r4, r1
 8006b04:	d458      	bmi.n	8006bb8 <__sflush_r+0xc0>
 8006b06:	684b      	ldr	r3, [r1, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	dc05      	bgt.n	8006b18 <__sflush_r+0x20>
 8006b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc02      	bgt.n	8006b18 <__sflush_r+0x20>
 8006b12:	2000      	movs	r0, #0
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d0f9      	beq.n	8006b12 <__sflush_r+0x1a>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b24:	682f      	ldr	r7, [r5, #0]
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	d032      	beq.n	8006b90 <__sflush_r+0x98>
 8006b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	075a      	lsls	r2, r3, #29
 8006b30:	d505      	bpl.n	8006b3e <__sflush_r+0x46>
 8006b32:	6863      	ldr	r3, [r4, #4]
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b38:	b10b      	cbz	r3, 8006b3e <__sflush_r+0x46>
 8006b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b3c:	1ac0      	subs	r0, r0, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4602      	mov	r2, r0
 8006b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b44:	6a21      	ldr	r1, [r4, #32]
 8006b46:	4628      	mov	r0, r5
 8006b48:	47b0      	blx	r6
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	d106      	bne.n	8006b5e <__sflush_r+0x66>
 8006b50:	6829      	ldr	r1, [r5, #0]
 8006b52:	291d      	cmp	r1, #29
 8006b54:	d82c      	bhi.n	8006bb0 <__sflush_r+0xb8>
 8006b56:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <__sflush_r+0x108>)
 8006b58:	40ca      	lsrs	r2, r1
 8006b5a:	07d6      	lsls	r6, r2, #31
 8006b5c:	d528      	bpl.n	8006bb0 <__sflush_r+0xb8>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	6062      	str	r2, [r4, #4]
 8006b62:	04d9      	lsls	r1, r3, #19
 8006b64:	6922      	ldr	r2, [r4, #16]
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	d504      	bpl.n	8006b74 <__sflush_r+0x7c>
 8006b6a:	1c42      	adds	r2, r0, #1
 8006b6c:	d101      	bne.n	8006b72 <__sflush_r+0x7a>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	b903      	cbnz	r3, 8006b74 <__sflush_r+0x7c>
 8006b72:	6560      	str	r0, [r4, #84]	; 0x54
 8006b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b76:	602f      	str	r7, [r5, #0]
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	d0ca      	beq.n	8006b12 <__sflush_r+0x1a>
 8006b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b80:	4299      	cmp	r1, r3
 8006b82:	d002      	beq.n	8006b8a <__sflush_r+0x92>
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 f9d5 	bl	8006f34 <_free_r>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b8e:	e7c1      	b.n	8006b14 <__sflush_r+0x1c>
 8006b90:	6a21      	ldr	r1, [r4, #32]
 8006b92:	2301      	movs	r3, #1
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	1c41      	adds	r1, r0, #1
 8006b9a:	d1c7      	bne.n	8006b2c <__sflush_r+0x34>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0c4      	beq.n	8006b2c <__sflush_r+0x34>
 8006ba2:	2b1d      	cmp	r3, #29
 8006ba4:	d001      	beq.n	8006baa <__sflush_r+0xb2>
 8006ba6:	2b16      	cmp	r3, #22
 8006ba8:	d101      	bne.n	8006bae <__sflush_r+0xb6>
 8006baa:	602f      	str	r7, [r5, #0]
 8006bac:	e7b1      	b.n	8006b12 <__sflush_r+0x1a>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	e7ad      	b.n	8006b14 <__sflush_r+0x1c>
 8006bb8:	690f      	ldr	r7, [r1, #16]
 8006bba:	2f00      	cmp	r7, #0
 8006bbc:	d0a9      	beq.n	8006b12 <__sflush_r+0x1a>
 8006bbe:	0793      	lsls	r3, r2, #30
 8006bc0:	680e      	ldr	r6, [r1, #0]
 8006bc2:	bf08      	it	eq
 8006bc4:	694b      	ldreq	r3, [r1, #20]
 8006bc6:	600f      	str	r7, [r1, #0]
 8006bc8:	bf18      	it	ne
 8006bca:	2300      	movne	r3, #0
 8006bcc:	eba6 0807 	sub.w	r8, r6, r7
 8006bd0:	608b      	str	r3, [r1, #8]
 8006bd2:	f1b8 0f00 	cmp.w	r8, #0
 8006bd6:	dd9c      	ble.n	8006b12 <__sflush_r+0x1a>
 8006bd8:	6a21      	ldr	r1, [r4, #32]
 8006bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bdc:	4643      	mov	r3, r8
 8006bde:	463a      	mov	r2, r7
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b0      	blx	r6
 8006be4:	2800      	cmp	r0, #0
 8006be6:	dc06      	bgt.n	8006bf6 <__sflush_r+0xfe>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	e78e      	b.n	8006b14 <__sflush_r+0x1c>
 8006bf6:	4407      	add	r7, r0
 8006bf8:	eba8 0800 	sub.w	r8, r8, r0
 8006bfc:	e7e9      	b.n	8006bd2 <__sflush_r+0xda>
 8006bfe:	bf00      	nop
 8006c00:	20400001 	.word	0x20400001

08006c04 <_fflush_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	690b      	ldr	r3, [r1, #16]
 8006c08:	4605      	mov	r5, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	b913      	cbnz	r3, 8006c14 <_fflush_r+0x10>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	4628      	mov	r0, r5
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	b118      	cbz	r0, 8006c1e <_fflush_r+0x1a>
 8006c16:	6983      	ldr	r3, [r0, #24]
 8006c18:	b90b      	cbnz	r3, 8006c1e <_fflush_r+0x1a>
 8006c1a:	f000 f887 	bl	8006d2c <__sinit>
 8006c1e:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <_fflush_r+0x6c>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d11b      	bne.n	8006c5c <_fflush_r+0x58>
 8006c24:	686c      	ldr	r4, [r5, #4]
 8006c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ef      	beq.n	8006c0e <_fflush_r+0xa>
 8006c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c30:	07d0      	lsls	r0, r2, #31
 8006c32:	d404      	bmi.n	8006c3e <_fflush_r+0x3a>
 8006c34:	0599      	lsls	r1, r3, #22
 8006c36:	d402      	bmi.n	8006c3e <_fflush_r+0x3a>
 8006c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c3a:	f000 f915 	bl	8006e68 <__retarget_lock_acquire_recursive>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	4621      	mov	r1, r4
 8006c42:	f7ff ff59 	bl	8006af8 <__sflush_r>
 8006c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c48:	07da      	lsls	r2, r3, #31
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	d4e0      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	059b      	lsls	r3, r3, #22
 8006c52:	d4dd      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c56:	f000 f908 	bl	8006e6a <__retarget_lock_release_recursive>
 8006c5a:	e7d9      	b.n	8006c10 <_fflush_r+0xc>
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <_fflush_r+0x70>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d101      	bne.n	8006c66 <_fflush_r+0x62>
 8006c62:	68ac      	ldr	r4, [r5, #8]
 8006c64:	e7df      	b.n	8006c26 <_fflush_r+0x22>
 8006c66:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <_fflush_r+0x74>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	bf08      	it	eq
 8006c6c:	68ec      	ldreq	r4, [r5, #12]
 8006c6e:	e7da      	b.n	8006c26 <_fflush_r+0x22>
 8006c70:	08007934 	.word	0x08007934
 8006c74:	08007954 	.word	0x08007954
 8006c78:	08007914 	.word	0x08007914

08006c7c <std>:
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	4604      	mov	r4, r0
 8006c82:	e9c0 3300 	strd	r3, r3, [r0]
 8006c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c8a:	6083      	str	r3, [r0, #8]
 8006c8c:	8181      	strh	r1, [r0, #12]
 8006c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c90:	81c2      	strh	r2, [r0, #14]
 8006c92:	6183      	str	r3, [r0, #24]
 8006c94:	4619      	mov	r1, r3
 8006c96:	2208      	movs	r2, #8
 8006c98:	305c      	adds	r0, #92	; 0x5c
 8006c9a:	f7ff fdd7 	bl	800684c <memset>
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <std+0x38>)
 8006ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <std+0x3c>)
 8006ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <std+0x40>)
 8006ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006caa:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <std+0x44>)
 8006cac:	6224      	str	r4, [r4, #32]
 8006cae:	6323      	str	r3, [r4, #48]	; 0x30
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08007685 	.word	0x08007685
 8006cb8:	080076a7 	.word	0x080076a7
 8006cbc:	080076df 	.word	0x080076df
 8006cc0:	08007703 	.word	0x08007703

08006cc4 <_cleanup_r>:
 8006cc4:	4901      	ldr	r1, [pc, #4]	; (8006ccc <_cleanup_r+0x8>)
 8006cc6:	f000 b8af 	b.w	8006e28 <_fwalk_reent>
 8006cca:	bf00      	nop
 8006ccc:	08006c05 	.word	0x08006c05

08006cd0 <__sfmoreglue>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	1e4a      	subs	r2, r1, #1
 8006cd4:	2568      	movs	r5, #104	; 0x68
 8006cd6:	4355      	muls	r5, r2
 8006cd8:	460e      	mov	r6, r1
 8006cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cde:	f000 f979 	bl	8006fd4 <_malloc_r>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	b140      	cbz	r0, 8006cf8 <__sfmoreglue+0x28>
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cec:	300c      	adds	r0, #12
 8006cee:	60a0      	str	r0, [r4, #8]
 8006cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cf4:	f7ff fdaa 	bl	800684c <memset>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}

08006cfc <__sfp_lock_acquire>:
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <__sfp_lock_acquire+0x8>)
 8006cfe:	f000 b8b3 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006d02:	bf00      	nop
 8006d04:	20001af8 	.word	0x20001af8

08006d08 <__sfp_lock_release>:
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <__sfp_lock_release+0x8>)
 8006d0a:	f000 b8ae 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006d0e:	bf00      	nop
 8006d10:	20001af8 	.word	0x20001af8

08006d14 <__sinit_lock_acquire>:
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <__sinit_lock_acquire+0x8>)
 8006d16:	f000 b8a7 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	20001af3 	.word	0x20001af3

08006d20 <__sinit_lock_release>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__sinit_lock_release+0x8>)
 8006d22:	f000 b8a2 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006d26:	bf00      	nop
 8006d28:	20001af3 	.word	0x20001af3

08006d2c <__sinit>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4604      	mov	r4, r0
 8006d30:	f7ff fff0 	bl	8006d14 <__sinit_lock_acquire>
 8006d34:	69a3      	ldr	r3, [r4, #24]
 8006d36:	b11b      	cbz	r3, 8006d40 <__sinit+0x14>
 8006d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d3c:	f7ff bff0 	b.w	8006d20 <__sinit_lock_release>
 8006d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d44:	6523      	str	r3, [r4, #80]	; 0x50
 8006d46:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <__sinit+0x68>)
 8006d48:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <__sinit+0x6c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	bf04      	itt	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	61a3      	streq	r3, [r4, #24]
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f820 	bl	8006d9c <__sfp>
 8006d5c:	6060      	str	r0, [r4, #4]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 f81c 	bl	8006d9c <__sfp>
 8006d64:	60a0      	str	r0, [r4, #8]
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 f818 	bl	8006d9c <__sfp>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	60e0      	str	r0, [r4, #12]
 8006d70:	2104      	movs	r1, #4
 8006d72:	6860      	ldr	r0, [r4, #4]
 8006d74:	f7ff ff82 	bl	8006c7c <std>
 8006d78:	68a0      	ldr	r0, [r4, #8]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	2109      	movs	r1, #9
 8006d7e:	f7ff ff7d 	bl	8006c7c <std>
 8006d82:	68e0      	ldr	r0, [r4, #12]
 8006d84:	2202      	movs	r2, #2
 8006d86:	2112      	movs	r1, #18
 8006d88:	f7ff ff78 	bl	8006c7c <std>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	61a3      	str	r3, [r4, #24]
 8006d90:	e7d2      	b.n	8006d38 <__sinit+0xc>
 8006d92:	bf00      	nop
 8006d94:	08007910 	.word	0x08007910
 8006d98:	08006cc5 	.word	0x08006cc5

08006d9c <__sfp>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	4607      	mov	r7, r0
 8006da0:	f7ff ffac 	bl	8006cfc <__sfp_lock_acquire>
 8006da4:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <__sfp+0x84>)
 8006da6:	681e      	ldr	r6, [r3, #0]
 8006da8:	69b3      	ldr	r3, [r6, #24]
 8006daa:	b913      	cbnz	r3, 8006db2 <__sfp+0x16>
 8006dac:	4630      	mov	r0, r6
 8006dae:	f7ff ffbd 	bl	8006d2c <__sinit>
 8006db2:	3648      	adds	r6, #72	; 0x48
 8006db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	d503      	bpl.n	8006dc4 <__sfp+0x28>
 8006dbc:	6833      	ldr	r3, [r6, #0]
 8006dbe:	b30b      	cbz	r3, 8006e04 <__sfp+0x68>
 8006dc0:	6836      	ldr	r6, [r6, #0]
 8006dc2:	e7f7      	b.n	8006db4 <__sfp+0x18>
 8006dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dc8:	b9d5      	cbnz	r5, 8006e00 <__sfp+0x64>
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <__sfp+0x88>)
 8006dcc:	60e3      	str	r3, [r4, #12]
 8006dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8006dd4:	f000 f847 	bl	8006e66 <__retarget_lock_init_recursive>
 8006dd8:	f7ff ff96 	bl	8006d08 <__sfp_lock_release>
 8006ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006de4:	6025      	str	r5, [r4, #0]
 8006de6:	61a5      	str	r5, [r4, #24]
 8006de8:	2208      	movs	r2, #8
 8006dea:	4629      	mov	r1, r5
 8006dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006df0:	f7ff fd2c 	bl	800684c <memset>
 8006df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e00:	3468      	adds	r4, #104	; 0x68
 8006e02:	e7d9      	b.n	8006db8 <__sfp+0x1c>
 8006e04:	2104      	movs	r1, #4
 8006e06:	4638      	mov	r0, r7
 8006e08:	f7ff ff62 	bl	8006cd0 <__sfmoreglue>
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	6030      	str	r0, [r6, #0]
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1d5      	bne.n	8006dc0 <__sfp+0x24>
 8006e14:	f7ff ff78 	bl	8006d08 <__sfp_lock_release>
 8006e18:	230c      	movs	r3, #12
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	e7ee      	b.n	8006dfc <__sfp+0x60>
 8006e1e:	bf00      	nop
 8006e20:	08007910 	.word	0x08007910
 8006e24:	ffff0001 	.word	0xffff0001

08006e28 <_fwalk_reent>:
 8006e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	4688      	mov	r8, r1
 8006e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e34:	2700      	movs	r7, #0
 8006e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e3e:	d505      	bpl.n	8006e4c <_fwalk_reent+0x24>
 8006e40:	6824      	ldr	r4, [r4, #0]
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	d1f7      	bne.n	8006e36 <_fwalk_reent+0xe>
 8006e46:	4638      	mov	r0, r7
 8006e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4c:	89ab      	ldrh	r3, [r5, #12]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d907      	bls.n	8006e62 <_fwalk_reent+0x3a>
 8006e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e56:	3301      	adds	r3, #1
 8006e58:	d003      	beq.n	8006e62 <_fwalk_reent+0x3a>
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	47c0      	blx	r8
 8006e60:	4307      	orrs	r7, r0
 8006e62:	3568      	adds	r5, #104	; 0x68
 8006e64:	e7e9      	b.n	8006e3a <_fwalk_reent+0x12>

08006e66 <__retarget_lock_init_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_acquire_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <__retarget_lock_release_recursive>:
 8006e6a:	4770      	bx	lr

08006e6c <__swhatbuf_r>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	460e      	mov	r6, r1
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	2900      	cmp	r1, #0
 8006e76:	b096      	sub	sp, #88	; 0x58
 8006e78:	4614      	mov	r4, r2
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	da07      	bge.n	8006e8e <__swhatbuf_r+0x22>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	602b      	str	r3, [r5, #0]
 8006e82:	89b3      	ldrh	r3, [r6, #12]
 8006e84:	061a      	lsls	r2, r3, #24
 8006e86:	d410      	bmi.n	8006eaa <__swhatbuf_r+0x3e>
 8006e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e8c:	e00e      	b.n	8006eac <__swhatbuf_r+0x40>
 8006e8e:	466a      	mov	r2, sp
 8006e90:	f000 fc5e 	bl	8007750 <_fstat_r>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	dbf2      	blt.n	8006e7e <__swhatbuf_r+0x12>
 8006e98:	9a01      	ldr	r2, [sp, #4]
 8006e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ea2:	425a      	negs	r2, r3
 8006ea4:	415a      	adcs	r2, r3
 8006ea6:	602a      	str	r2, [r5, #0]
 8006ea8:	e7ee      	b.n	8006e88 <__swhatbuf_r+0x1c>
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	2000      	movs	r0, #0
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	b016      	add	sp, #88	; 0x58
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}

08006eb4 <__smakebuf_r>:
 8006eb4:	898b      	ldrh	r3, [r1, #12]
 8006eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eb8:	079d      	lsls	r5, r3, #30
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	d507      	bpl.n	8006ed0 <__smakebuf_r+0x1c>
 8006ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	6123      	str	r3, [r4, #16]
 8006ec8:	2301      	movs	r3, #1
 8006eca:	6163      	str	r3, [r4, #20]
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	ab01      	add	r3, sp, #4
 8006ed2:	466a      	mov	r2, sp
 8006ed4:	f7ff ffca 	bl	8006e6c <__swhatbuf_r>
 8006ed8:	9900      	ldr	r1, [sp, #0]
 8006eda:	4605      	mov	r5, r0
 8006edc:	4630      	mov	r0, r6
 8006ede:	f000 f879 	bl	8006fd4 <_malloc_r>
 8006ee2:	b948      	cbnz	r0, 8006ef8 <__smakebuf_r+0x44>
 8006ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee8:	059a      	lsls	r2, r3, #22
 8006eea:	d4ef      	bmi.n	8006ecc <__smakebuf_r+0x18>
 8006eec:	f023 0303 	bic.w	r3, r3, #3
 8006ef0:	f043 0302 	orr.w	r3, r3, #2
 8006ef4:	81a3      	strh	r3, [r4, #12]
 8006ef6:	e7e3      	b.n	8006ec0 <__smakebuf_r+0xc>
 8006ef8:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <__smakebuf_r+0x7c>)
 8006efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	6020      	str	r0, [r4, #0]
 8006f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	9b00      	ldr	r3, [sp, #0]
 8006f08:	6163      	str	r3, [r4, #20]
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	6120      	str	r0, [r4, #16]
 8006f0e:	b15b      	cbz	r3, 8006f28 <__smakebuf_r+0x74>
 8006f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 fc2d 	bl	8007774 <_isatty_r>
 8006f1a:	b128      	cbz	r0, 8006f28 <__smakebuf_r+0x74>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	89a0      	ldrh	r0, [r4, #12]
 8006f2a:	4305      	orrs	r5, r0
 8006f2c:	81a5      	strh	r5, [r4, #12]
 8006f2e:	e7cd      	b.n	8006ecc <__smakebuf_r+0x18>
 8006f30:	08006cc5 	.word	0x08006cc5

08006f34 <_free_r>:
 8006f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d048      	beq.n	8006fcc <_free_r+0x98>
 8006f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f1a1 0404 	sub.w	r4, r1, #4
 8006f46:	bfb8      	it	lt
 8006f48:	18e4      	addlt	r4, r4, r3
 8006f4a:	f000 fc35 	bl	80077b8 <__malloc_lock>
 8006f4e:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <_free_r+0x9c>)
 8006f50:	9801      	ldr	r0, [sp, #4]
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	4615      	mov	r5, r2
 8006f56:	b933      	cbnz	r3, 8006f66 <_free_r+0x32>
 8006f58:	6063      	str	r3, [r4, #4]
 8006f5a:	6014      	str	r4, [r2, #0]
 8006f5c:	b003      	add	sp, #12
 8006f5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f62:	f000 bc2f 	b.w	80077c4 <__malloc_unlock>
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	d90b      	bls.n	8006f82 <_free_r+0x4e>
 8006f6a:	6821      	ldr	r1, [r4, #0]
 8006f6c:	1862      	adds	r2, r4, r1
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	bf04      	itt	eq
 8006f72:	681a      	ldreq	r2, [r3, #0]
 8006f74:	685b      	ldreq	r3, [r3, #4]
 8006f76:	6063      	str	r3, [r4, #4]
 8006f78:	bf04      	itt	eq
 8006f7a:	1852      	addeq	r2, r2, r1
 8006f7c:	6022      	streq	r2, [r4, #0]
 8006f7e:	602c      	str	r4, [r5, #0]
 8006f80:	e7ec      	b.n	8006f5c <_free_r+0x28>
 8006f82:	461a      	mov	r2, r3
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	b10b      	cbz	r3, 8006f8c <_free_r+0x58>
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d9fa      	bls.n	8006f82 <_free_r+0x4e>
 8006f8c:	6811      	ldr	r1, [r2, #0]
 8006f8e:	1855      	adds	r5, r2, r1
 8006f90:	42a5      	cmp	r5, r4
 8006f92:	d10b      	bne.n	8006fac <_free_r+0x78>
 8006f94:	6824      	ldr	r4, [r4, #0]
 8006f96:	4421      	add	r1, r4
 8006f98:	1854      	adds	r4, r2, r1
 8006f9a:	42a3      	cmp	r3, r4
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	d1dd      	bne.n	8006f5c <_free_r+0x28>
 8006fa0:	681c      	ldr	r4, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	6053      	str	r3, [r2, #4]
 8006fa6:	4421      	add	r1, r4
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	e7d7      	b.n	8006f5c <_free_r+0x28>
 8006fac:	d902      	bls.n	8006fb4 <_free_r+0x80>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	6003      	str	r3, [r0, #0]
 8006fb2:	e7d3      	b.n	8006f5c <_free_r+0x28>
 8006fb4:	6825      	ldr	r5, [r4, #0]
 8006fb6:	1961      	adds	r1, r4, r5
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	bf04      	itt	eq
 8006fbc:	6819      	ldreq	r1, [r3, #0]
 8006fbe:	685b      	ldreq	r3, [r3, #4]
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	bf04      	itt	eq
 8006fc4:	1949      	addeq	r1, r1, r5
 8006fc6:	6021      	streq	r1, [r4, #0]
 8006fc8:	6054      	str	r4, [r2, #4]
 8006fca:	e7c7      	b.n	8006f5c <_free_r+0x28>
 8006fcc:	b003      	add	sp, #12
 8006fce:	bd30      	pop	{r4, r5, pc}
 8006fd0:	2000195c 	.word	0x2000195c

08006fd4 <_malloc_r>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	1ccd      	adds	r5, r1, #3
 8006fd8:	f025 0503 	bic.w	r5, r5, #3
 8006fdc:	3508      	adds	r5, #8
 8006fde:	2d0c      	cmp	r5, #12
 8006fe0:	bf38      	it	cc
 8006fe2:	250c      	movcc	r5, #12
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	db01      	blt.n	8006fee <_malloc_r+0x1a>
 8006fea:	42a9      	cmp	r1, r5
 8006fec:	d903      	bls.n	8006ff6 <_malloc_r+0x22>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	6033      	str	r3, [r6, #0]
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff6:	f000 fbdf 	bl	80077b8 <__malloc_lock>
 8006ffa:	4921      	ldr	r1, [pc, #132]	; (8007080 <_malloc_r+0xac>)
 8006ffc:	680a      	ldr	r2, [r1, #0]
 8006ffe:	4614      	mov	r4, r2
 8007000:	b99c      	cbnz	r4, 800702a <_malloc_r+0x56>
 8007002:	4f20      	ldr	r7, [pc, #128]	; (8007084 <_malloc_r+0xb0>)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	b923      	cbnz	r3, 8007012 <_malloc_r+0x3e>
 8007008:	4621      	mov	r1, r4
 800700a:	4630      	mov	r0, r6
 800700c:	f000 fb2a 	bl	8007664 <_sbrk_r>
 8007010:	6038      	str	r0, [r7, #0]
 8007012:	4629      	mov	r1, r5
 8007014:	4630      	mov	r0, r6
 8007016:	f000 fb25 	bl	8007664 <_sbrk_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d123      	bne.n	8007066 <_malloc_r+0x92>
 800701e:	230c      	movs	r3, #12
 8007020:	6033      	str	r3, [r6, #0]
 8007022:	4630      	mov	r0, r6
 8007024:	f000 fbce 	bl	80077c4 <__malloc_unlock>
 8007028:	e7e3      	b.n	8006ff2 <_malloc_r+0x1e>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	1b5b      	subs	r3, r3, r5
 800702e:	d417      	bmi.n	8007060 <_malloc_r+0x8c>
 8007030:	2b0b      	cmp	r3, #11
 8007032:	d903      	bls.n	800703c <_malloc_r+0x68>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	441c      	add	r4, r3
 8007038:	6025      	str	r5, [r4, #0]
 800703a:	e004      	b.n	8007046 <_malloc_r+0x72>
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	42a2      	cmp	r2, r4
 8007040:	bf0c      	ite	eq
 8007042:	600b      	streq	r3, [r1, #0]
 8007044:	6053      	strne	r3, [r2, #4]
 8007046:	4630      	mov	r0, r6
 8007048:	f000 fbbc 	bl	80077c4 <__malloc_unlock>
 800704c:	f104 000b 	add.w	r0, r4, #11
 8007050:	1d23      	adds	r3, r4, #4
 8007052:	f020 0007 	bic.w	r0, r0, #7
 8007056:	1ac2      	subs	r2, r0, r3
 8007058:	d0cc      	beq.n	8006ff4 <_malloc_r+0x20>
 800705a:	1a1b      	subs	r3, r3, r0
 800705c:	50a3      	str	r3, [r4, r2]
 800705e:	e7c9      	b.n	8006ff4 <_malloc_r+0x20>
 8007060:	4622      	mov	r2, r4
 8007062:	6864      	ldr	r4, [r4, #4]
 8007064:	e7cc      	b.n	8007000 <_malloc_r+0x2c>
 8007066:	1cc4      	adds	r4, r0, #3
 8007068:	f024 0403 	bic.w	r4, r4, #3
 800706c:	42a0      	cmp	r0, r4
 800706e:	d0e3      	beq.n	8007038 <_malloc_r+0x64>
 8007070:	1a21      	subs	r1, r4, r0
 8007072:	4630      	mov	r0, r6
 8007074:	f000 faf6 	bl	8007664 <_sbrk_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d1dd      	bne.n	8007038 <_malloc_r+0x64>
 800707c:	e7cf      	b.n	800701e <_malloc_r+0x4a>
 800707e:	bf00      	nop
 8007080:	2000195c 	.word	0x2000195c
 8007084:	20001960 	.word	0x20001960

08007088 <__sfputc_r>:
 8007088:	6893      	ldr	r3, [r2, #8]
 800708a:	3b01      	subs	r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	b410      	push	{r4}
 8007090:	6093      	str	r3, [r2, #8]
 8007092:	da08      	bge.n	80070a6 <__sfputc_r+0x1e>
 8007094:	6994      	ldr	r4, [r2, #24]
 8007096:	42a3      	cmp	r3, r4
 8007098:	db01      	blt.n	800709e <__sfputc_r+0x16>
 800709a:	290a      	cmp	r1, #10
 800709c:	d103      	bne.n	80070a6 <__sfputc_r+0x1e>
 800709e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070a2:	f7ff bc69 	b.w	8006978 <__swbuf_r>
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	1c58      	adds	r0, r3, #1
 80070aa:	6010      	str	r0, [r2, #0]
 80070ac:	7019      	strb	r1, [r3, #0]
 80070ae:	4608      	mov	r0, r1
 80070b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <__sfputs_r>:
 80070b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b8:	4606      	mov	r6, r0
 80070ba:	460f      	mov	r7, r1
 80070bc:	4614      	mov	r4, r2
 80070be:	18d5      	adds	r5, r2, r3
 80070c0:	42ac      	cmp	r4, r5
 80070c2:	d101      	bne.n	80070c8 <__sfputs_r+0x12>
 80070c4:	2000      	movs	r0, #0
 80070c6:	e007      	b.n	80070d8 <__sfputs_r+0x22>
 80070c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070cc:	463a      	mov	r2, r7
 80070ce:	4630      	mov	r0, r6
 80070d0:	f7ff ffda 	bl	8007088 <__sfputc_r>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d1f3      	bne.n	80070c0 <__sfputs_r+0xa>
 80070d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070dc <_vfiprintf_r>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	460d      	mov	r5, r1
 80070e2:	b09d      	sub	sp, #116	; 0x74
 80070e4:	4614      	mov	r4, r2
 80070e6:	4698      	mov	r8, r3
 80070e8:	4606      	mov	r6, r0
 80070ea:	b118      	cbz	r0, 80070f4 <_vfiprintf_r+0x18>
 80070ec:	6983      	ldr	r3, [r0, #24]
 80070ee:	b90b      	cbnz	r3, 80070f4 <_vfiprintf_r+0x18>
 80070f0:	f7ff fe1c 	bl	8006d2c <__sinit>
 80070f4:	4b89      	ldr	r3, [pc, #548]	; (800731c <_vfiprintf_r+0x240>)
 80070f6:	429d      	cmp	r5, r3
 80070f8:	d11b      	bne.n	8007132 <_vfiprintf_r+0x56>
 80070fa:	6875      	ldr	r5, [r6, #4]
 80070fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070fe:	07d9      	lsls	r1, r3, #31
 8007100:	d405      	bmi.n	800710e <_vfiprintf_r+0x32>
 8007102:	89ab      	ldrh	r3, [r5, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d402      	bmi.n	800710e <_vfiprintf_r+0x32>
 8007108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800710a:	f7ff fead 	bl	8006e68 <__retarget_lock_acquire_recursive>
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	071b      	lsls	r3, r3, #28
 8007112:	d501      	bpl.n	8007118 <_vfiprintf_r+0x3c>
 8007114:	692b      	ldr	r3, [r5, #16]
 8007116:	b9eb      	cbnz	r3, 8007154 <_vfiprintf_r+0x78>
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff fc7e 	bl	8006a1c <__swsetup_r>
 8007120:	b1c0      	cbz	r0, 8007154 <_vfiprintf_r+0x78>
 8007122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007124:	07dc      	lsls	r4, r3, #31
 8007126:	d50e      	bpl.n	8007146 <_vfiprintf_r+0x6a>
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	b01d      	add	sp, #116	; 0x74
 800712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007132:	4b7b      	ldr	r3, [pc, #492]	; (8007320 <_vfiprintf_r+0x244>)
 8007134:	429d      	cmp	r5, r3
 8007136:	d101      	bne.n	800713c <_vfiprintf_r+0x60>
 8007138:	68b5      	ldr	r5, [r6, #8]
 800713a:	e7df      	b.n	80070fc <_vfiprintf_r+0x20>
 800713c:	4b79      	ldr	r3, [pc, #484]	; (8007324 <_vfiprintf_r+0x248>)
 800713e:	429d      	cmp	r5, r3
 8007140:	bf08      	it	eq
 8007142:	68f5      	ldreq	r5, [r6, #12]
 8007144:	e7da      	b.n	80070fc <_vfiprintf_r+0x20>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	0598      	lsls	r0, r3, #22
 800714a:	d4ed      	bmi.n	8007128 <_vfiprintf_r+0x4c>
 800714c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800714e:	f7ff fe8c 	bl	8006e6a <__retarget_lock_release_recursive>
 8007152:	e7e9      	b.n	8007128 <_vfiprintf_r+0x4c>
 8007154:	2300      	movs	r3, #0
 8007156:	9309      	str	r3, [sp, #36]	; 0x24
 8007158:	2320      	movs	r3, #32
 800715a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007162:	2330      	movs	r3, #48	; 0x30
 8007164:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007328 <_vfiprintf_r+0x24c>
 8007168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800716c:	f04f 0901 	mov.w	r9, #1
 8007170:	4623      	mov	r3, r4
 8007172:	469a      	mov	sl, r3
 8007174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007178:	b10a      	cbz	r2, 800717e <_vfiprintf_r+0xa2>
 800717a:	2a25      	cmp	r2, #37	; 0x25
 800717c:	d1f9      	bne.n	8007172 <_vfiprintf_r+0x96>
 800717e:	ebba 0b04 	subs.w	fp, sl, r4
 8007182:	d00b      	beq.n	800719c <_vfiprintf_r+0xc0>
 8007184:	465b      	mov	r3, fp
 8007186:	4622      	mov	r2, r4
 8007188:	4629      	mov	r1, r5
 800718a:	4630      	mov	r0, r6
 800718c:	f7ff ff93 	bl	80070b6 <__sfputs_r>
 8007190:	3001      	adds	r0, #1
 8007192:	f000 80aa 	beq.w	80072ea <_vfiprintf_r+0x20e>
 8007196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007198:	445a      	add	r2, fp
 800719a:	9209      	str	r2, [sp, #36]	; 0x24
 800719c:	f89a 3000 	ldrb.w	r3, [sl]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80a2 	beq.w	80072ea <_vfiprintf_r+0x20e>
 80071a6:	2300      	movs	r3, #0
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071b0:	f10a 0a01 	add.w	sl, sl, #1
 80071b4:	9304      	str	r3, [sp, #16]
 80071b6:	9307      	str	r3, [sp, #28]
 80071b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071bc:	931a      	str	r3, [sp, #104]	; 0x68
 80071be:	4654      	mov	r4, sl
 80071c0:	2205      	movs	r2, #5
 80071c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c6:	4858      	ldr	r0, [pc, #352]	; (8007328 <_vfiprintf_r+0x24c>)
 80071c8:	f7f9 f802 	bl	80001d0 <memchr>
 80071cc:	9a04      	ldr	r2, [sp, #16]
 80071ce:	b9d8      	cbnz	r0, 8007208 <_vfiprintf_r+0x12c>
 80071d0:	06d1      	lsls	r1, r2, #27
 80071d2:	bf44      	itt	mi
 80071d4:	2320      	movmi	r3, #32
 80071d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071da:	0713      	lsls	r3, r2, #28
 80071dc:	bf44      	itt	mi
 80071de:	232b      	movmi	r3, #43	; 0x2b
 80071e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e4:	f89a 3000 	ldrb.w	r3, [sl]
 80071e8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ea:	d015      	beq.n	8007218 <_vfiprintf_r+0x13c>
 80071ec:	9a07      	ldr	r2, [sp, #28]
 80071ee:	4654      	mov	r4, sl
 80071f0:	2000      	movs	r0, #0
 80071f2:	f04f 0c0a 	mov.w	ip, #10
 80071f6:	4621      	mov	r1, r4
 80071f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071fc:	3b30      	subs	r3, #48	; 0x30
 80071fe:	2b09      	cmp	r3, #9
 8007200:	d94e      	bls.n	80072a0 <_vfiprintf_r+0x1c4>
 8007202:	b1b0      	cbz	r0, 8007232 <_vfiprintf_r+0x156>
 8007204:	9207      	str	r2, [sp, #28]
 8007206:	e014      	b.n	8007232 <_vfiprintf_r+0x156>
 8007208:	eba0 0308 	sub.w	r3, r0, r8
 800720c:	fa09 f303 	lsl.w	r3, r9, r3
 8007210:	4313      	orrs	r3, r2
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	46a2      	mov	sl, r4
 8007216:	e7d2      	b.n	80071be <_vfiprintf_r+0xe2>
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	1d19      	adds	r1, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	9103      	str	r1, [sp, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	bfbb      	ittet	lt
 8007224:	425b      	neglt	r3, r3
 8007226:	f042 0202 	orrlt.w	r2, r2, #2
 800722a:	9307      	strge	r3, [sp, #28]
 800722c:	9307      	strlt	r3, [sp, #28]
 800722e:	bfb8      	it	lt
 8007230:	9204      	strlt	r2, [sp, #16]
 8007232:	7823      	ldrb	r3, [r4, #0]
 8007234:	2b2e      	cmp	r3, #46	; 0x2e
 8007236:	d10c      	bne.n	8007252 <_vfiprintf_r+0x176>
 8007238:	7863      	ldrb	r3, [r4, #1]
 800723a:	2b2a      	cmp	r3, #42	; 0x2a
 800723c:	d135      	bne.n	80072aa <_vfiprintf_r+0x1ce>
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	1d1a      	adds	r2, r3, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	9203      	str	r2, [sp, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfb8      	it	lt
 800724a:	f04f 33ff 	movlt.w	r3, #4294967295
 800724e:	3402      	adds	r4, #2
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007338 <_vfiprintf_r+0x25c>
 8007256:	7821      	ldrb	r1, [r4, #0]
 8007258:	2203      	movs	r2, #3
 800725a:	4650      	mov	r0, sl
 800725c:	f7f8 ffb8 	bl	80001d0 <memchr>
 8007260:	b140      	cbz	r0, 8007274 <_vfiprintf_r+0x198>
 8007262:	2340      	movs	r3, #64	; 0x40
 8007264:	eba0 000a 	sub.w	r0, r0, sl
 8007268:	fa03 f000 	lsl.w	r0, r3, r0
 800726c:	9b04      	ldr	r3, [sp, #16]
 800726e:	4303      	orrs	r3, r0
 8007270:	3401      	adds	r4, #1
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007278:	482c      	ldr	r0, [pc, #176]	; (800732c <_vfiprintf_r+0x250>)
 800727a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800727e:	2206      	movs	r2, #6
 8007280:	f7f8 ffa6 	bl	80001d0 <memchr>
 8007284:	2800      	cmp	r0, #0
 8007286:	d03f      	beq.n	8007308 <_vfiprintf_r+0x22c>
 8007288:	4b29      	ldr	r3, [pc, #164]	; (8007330 <_vfiprintf_r+0x254>)
 800728a:	bb1b      	cbnz	r3, 80072d4 <_vfiprintf_r+0x1f8>
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	3307      	adds	r3, #7
 8007290:	f023 0307 	bic.w	r3, r3, #7
 8007294:	3308      	adds	r3, #8
 8007296:	9303      	str	r3, [sp, #12]
 8007298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729a:	443b      	add	r3, r7
 800729c:	9309      	str	r3, [sp, #36]	; 0x24
 800729e:	e767      	b.n	8007170 <_vfiprintf_r+0x94>
 80072a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a4:	460c      	mov	r4, r1
 80072a6:	2001      	movs	r0, #1
 80072a8:	e7a5      	b.n	80071f6 <_vfiprintf_r+0x11a>
 80072aa:	2300      	movs	r3, #0
 80072ac:	3401      	adds	r4, #1
 80072ae:	9305      	str	r3, [sp, #20]
 80072b0:	4619      	mov	r1, r3
 80072b2:	f04f 0c0a 	mov.w	ip, #10
 80072b6:	4620      	mov	r0, r4
 80072b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072bc:	3a30      	subs	r2, #48	; 0x30
 80072be:	2a09      	cmp	r2, #9
 80072c0:	d903      	bls.n	80072ca <_vfiprintf_r+0x1ee>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0c5      	beq.n	8007252 <_vfiprintf_r+0x176>
 80072c6:	9105      	str	r1, [sp, #20]
 80072c8:	e7c3      	b.n	8007252 <_vfiprintf_r+0x176>
 80072ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ce:	4604      	mov	r4, r0
 80072d0:	2301      	movs	r3, #1
 80072d2:	e7f0      	b.n	80072b6 <_vfiprintf_r+0x1da>
 80072d4:	ab03      	add	r3, sp, #12
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	462a      	mov	r2, r5
 80072da:	4b16      	ldr	r3, [pc, #88]	; (8007334 <_vfiprintf_r+0x258>)
 80072dc:	a904      	add	r1, sp, #16
 80072de:	4630      	mov	r0, r6
 80072e0:	f3af 8000 	nop.w
 80072e4:	4607      	mov	r7, r0
 80072e6:	1c78      	adds	r0, r7, #1
 80072e8:	d1d6      	bne.n	8007298 <_vfiprintf_r+0x1bc>
 80072ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ec:	07d9      	lsls	r1, r3, #31
 80072ee:	d405      	bmi.n	80072fc <_vfiprintf_r+0x220>
 80072f0:	89ab      	ldrh	r3, [r5, #12]
 80072f2:	059a      	lsls	r2, r3, #22
 80072f4:	d402      	bmi.n	80072fc <_vfiprintf_r+0x220>
 80072f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072f8:	f7ff fdb7 	bl	8006e6a <__retarget_lock_release_recursive>
 80072fc:	89ab      	ldrh	r3, [r5, #12]
 80072fe:	065b      	lsls	r3, r3, #25
 8007300:	f53f af12 	bmi.w	8007128 <_vfiprintf_r+0x4c>
 8007304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007306:	e711      	b.n	800712c <_vfiprintf_r+0x50>
 8007308:	ab03      	add	r3, sp, #12
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	462a      	mov	r2, r5
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <_vfiprintf_r+0x258>)
 8007310:	a904      	add	r1, sp, #16
 8007312:	4630      	mov	r0, r6
 8007314:	f000 f880 	bl	8007418 <_printf_i>
 8007318:	e7e4      	b.n	80072e4 <_vfiprintf_r+0x208>
 800731a:	bf00      	nop
 800731c:	08007934 	.word	0x08007934
 8007320:	08007954 	.word	0x08007954
 8007324:	08007914 	.word	0x08007914
 8007328:	08007974 	.word	0x08007974
 800732c:	0800797e 	.word	0x0800797e
 8007330:	00000000 	.word	0x00000000
 8007334:	080070b7 	.word	0x080070b7
 8007338:	0800797a 	.word	0x0800797a

0800733c <_printf_common>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	4616      	mov	r6, r2
 8007342:	4699      	mov	r9, r3
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800734c:	4293      	cmp	r3, r2
 800734e:	bfb8      	it	lt
 8007350:	4613      	movlt	r3, r2
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007358:	4607      	mov	r7, r0
 800735a:	460c      	mov	r4, r1
 800735c:	b10a      	cbz	r2, 8007362 <_printf_common+0x26>
 800735e:	3301      	adds	r3, #1
 8007360:	6033      	str	r3, [r6, #0]
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	0699      	lsls	r1, r3, #26
 8007366:	bf42      	ittt	mi
 8007368:	6833      	ldrmi	r3, [r6, #0]
 800736a:	3302      	addmi	r3, #2
 800736c:	6033      	strmi	r3, [r6, #0]
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	f015 0506 	ands.w	r5, r5, #6
 8007374:	d106      	bne.n	8007384 <_printf_common+0x48>
 8007376:	f104 0a19 	add.w	sl, r4, #25
 800737a:	68e3      	ldr	r3, [r4, #12]
 800737c:	6832      	ldr	r2, [r6, #0]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	42ab      	cmp	r3, r5
 8007382:	dc26      	bgt.n	80073d2 <_printf_common+0x96>
 8007384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007388:	1e13      	subs	r3, r2, #0
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	bf18      	it	ne
 800738e:	2301      	movne	r3, #1
 8007390:	0692      	lsls	r2, r2, #26
 8007392:	d42b      	bmi.n	80073ec <_printf_common+0xb0>
 8007394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007398:	4649      	mov	r1, r9
 800739a:	4638      	mov	r0, r7
 800739c:	47c0      	blx	r8
 800739e:	3001      	adds	r0, #1
 80073a0:	d01e      	beq.n	80073e0 <_printf_common+0xa4>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	68e5      	ldr	r5, [r4, #12]
 80073a6:	6832      	ldr	r2, [r6, #0]
 80073a8:	f003 0306 	and.w	r3, r3, #6
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	bf08      	it	eq
 80073b0:	1aad      	subeq	r5, r5, r2
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	6922      	ldr	r2, [r4, #16]
 80073b6:	bf0c      	ite	eq
 80073b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073bc:	2500      	movne	r5, #0
 80073be:	4293      	cmp	r3, r2
 80073c0:	bfc4      	itt	gt
 80073c2:	1a9b      	subgt	r3, r3, r2
 80073c4:	18ed      	addgt	r5, r5, r3
 80073c6:	2600      	movs	r6, #0
 80073c8:	341a      	adds	r4, #26
 80073ca:	42b5      	cmp	r5, r6
 80073cc:	d11a      	bne.n	8007404 <_printf_common+0xc8>
 80073ce:	2000      	movs	r0, #0
 80073d0:	e008      	b.n	80073e4 <_printf_common+0xa8>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4652      	mov	r2, sl
 80073d6:	4649      	mov	r1, r9
 80073d8:	4638      	mov	r0, r7
 80073da:	47c0      	blx	r8
 80073dc:	3001      	adds	r0, #1
 80073de:	d103      	bne.n	80073e8 <_printf_common+0xac>
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e8:	3501      	adds	r5, #1
 80073ea:	e7c6      	b.n	800737a <_printf_common+0x3e>
 80073ec:	18e1      	adds	r1, r4, r3
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	2030      	movs	r0, #48	; 0x30
 80073f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f6:	4422      	add	r2, r4
 80073f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007400:	3302      	adds	r3, #2
 8007402:	e7c7      	b.n	8007394 <_printf_common+0x58>
 8007404:	2301      	movs	r3, #1
 8007406:	4622      	mov	r2, r4
 8007408:	4649      	mov	r1, r9
 800740a:	4638      	mov	r0, r7
 800740c:	47c0      	blx	r8
 800740e:	3001      	adds	r0, #1
 8007410:	d0e6      	beq.n	80073e0 <_printf_common+0xa4>
 8007412:	3601      	adds	r6, #1
 8007414:	e7d9      	b.n	80073ca <_printf_common+0x8e>
	...

08007418 <_printf_i>:
 8007418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	460c      	mov	r4, r1
 800741e:	4691      	mov	r9, r2
 8007420:	7e27      	ldrb	r7, [r4, #24]
 8007422:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007424:	2f78      	cmp	r7, #120	; 0x78
 8007426:	4680      	mov	r8, r0
 8007428:	469a      	mov	sl, r3
 800742a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800742e:	d807      	bhi.n	8007440 <_printf_i+0x28>
 8007430:	2f62      	cmp	r7, #98	; 0x62
 8007432:	d80a      	bhi.n	800744a <_printf_i+0x32>
 8007434:	2f00      	cmp	r7, #0
 8007436:	f000 80d8 	beq.w	80075ea <_printf_i+0x1d2>
 800743a:	2f58      	cmp	r7, #88	; 0x58
 800743c:	f000 80a3 	beq.w	8007586 <_printf_i+0x16e>
 8007440:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007448:	e03a      	b.n	80074c0 <_printf_i+0xa8>
 800744a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744e:	2b15      	cmp	r3, #21
 8007450:	d8f6      	bhi.n	8007440 <_printf_i+0x28>
 8007452:	a001      	add	r0, pc, #4	; (adr r0, 8007458 <_printf_i+0x40>)
 8007454:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007458:	080074b1 	.word	0x080074b1
 800745c:	080074c5 	.word	0x080074c5
 8007460:	08007441 	.word	0x08007441
 8007464:	08007441 	.word	0x08007441
 8007468:	08007441 	.word	0x08007441
 800746c:	08007441 	.word	0x08007441
 8007470:	080074c5 	.word	0x080074c5
 8007474:	08007441 	.word	0x08007441
 8007478:	08007441 	.word	0x08007441
 800747c:	08007441 	.word	0x08007441
 8007480:	08007441 	.word	0x08007441
 8007484:	080075d1 	.word	0x080075d1
 8007488:	080074f5 	.word	0x080074f5
 800748c:	080075b3 	.word	0x080075b3
 8007490:	08007441 	.word	0x08007441
 8007494:	08007441 	.word	0x08007441
 8007498:	080075f3 	.word	0x080075f3
 800749c:	08007441 	.word	0x08007441
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	08007441 	.word	0x08007441
 80074a8:	08007441 	.word	0x08007441
 80074ac:	080075bb 	.word	0x080075bb
 80074b0:	680b      	ldr	r3, [r1, #0]
 80074b2:	1d1a      	adds	r2, r3, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	600a      	str	r2, [r1, #0]
 80074b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0a3      	b.n	800760c <_printf_i+0x1f4>
 80074c4:	6825      	ldr	r5, [r4, #0]
 80074c6:	6808      	ldr	r0, [r1, #0]
 80074c8:	062e      	lsls	r6, r5, #24
 80074ca:	f100 0304 	add.w	r3, r0, #4
 80074ce:	d50a      	bpl.n	80074e6 <_printf_i+0xce>
 80074d0:	6805      	ldr	r5, [r0, #0]
 80074d2:	600b      	str	r3, [r1, #0]
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	da03      	bge.n	80074e0 <_printf_i+0xc8>
 80074d8:	232d      	movs	r3, #45	; 0x2d
 80074da:	426d      	negs	r5, r5
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e0:	485e      	ldr	r0, [pc, #376]	; (800765c <_printf_i+0x244>)
 80074e2:	230a      	movs	r3, #10
 80074e4:	e019      	b.n	800751a <_printf_i+0x102>
 80074e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074ea:	6805      	ldr	r5, [r0, #0]
 80074ec:	600b      	str	r3, [r1, #0]
 80074ee:	bf18      	it	ne
 80074f0:	b22d      	sxthne	r5, r5
 80074f2:	e7ef      	b.n	80074d4 <_printf_i+0xbc>
 80074f4:	680b      	ldr	r3, [r1, #0]
 80074f6:	6825      	ldr	r5, [r4, #0]
 80074f8:	1d18      	adds	r0, r3, #4
 80074fa:	6008      	str	r0, [r1, #0]
 80074fc:	0628      	lsls	r0, r5, #24
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0xec>
 8007500:	681d      	ldr	r5, [r3, #0]
 8007502:	e002      	b.n	800750a <_printf_i+0xf2>
 8007504:	0669      	lsls	r1, r5, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0xe8>
 8007508:	881d      	ldrh	r5, [r3, #0]
 800750a:	4854      	ldr	r0, [pc, #336]	; (800765c <_printf_i+0x244>)
 800750c:	2f6f      	cmp	r7, #111	; 0x6f
 800750e:	bf0c      	ite	eq
 8007510:	2308      	moveq	r3, #8
 8007512:	230a      	movne	r3, #10
 8007514:	2100      	movs	r1, #0
 8007516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800751a:	6866      	ldr	r6, [r4, #4]
 800751c:	60a6      	str	r6, [r4, #8]
 800751e:	2e00      	cmp	r6, #0
 8007520:	bfa2      	ittt	ge
 8007522:	6821      	ldrge	r1, [r4, #0]
 8007524:	f021 0104 	bicge.w	r1, r1, #4
 8007528:	6021      	strge	r1, [r4, #0]
 800752a:	b90d      	cbnz	r5, 8007530 <_printf_i+0x118>
 800752c:	2e00      	cmp	r6, #0
 800752e:	d04d      	beq.n	80075cc <_printf_i+0x1b4>
 8007530:	4616      	mov	r6, r2
 8007532:	fbb5 f1f3 	udiv	r1, r5, r3
 8007536:	fb03 5711 	mls	r7, r3, r1, r5
 800753a:	5dc7      	ldrb	r7, [r0, r7]
 800753c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007540:	462f      	mov	r7, r5
 8007542:	42bb      	cmp	r3, r7
 8007544:	460d      	mov	r5, r1
 8007546:	d9f4      	bls.n	8007532 <_printf_i+0x11a>
 8007548:	2b08      	cmp	r3, #8
 800754a:	d10b      	bne.n	8007564 <_printf_i+0x14c>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	07df      	lsls	r7, r3, #31
 8007550:	d508      	bpl.n	8007564 <_printf_i+0x14c>
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	6861      	ldr	r1, [r4, #4]
 8007556:	4299      	cmp	r1, r3
 8007558:	bfde      	ittt	le
 800755a:	2330      	movle	r3, #48	; 0x30
 800755c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007560:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007564:	1b92      	subs	r2, r2, r6
 8007566:	6122      	str	r2, [r4, #16]
 8007568:	f8cd a000 	str.w	sl, [sp]
 800756c:	464b      	mov	r3, r9
 800756e:	aa03      	add	r2, sp, #12
 8007570:	4621      	mov	r1, r4
 8007572:	4640      	mov	r0, r8
 8007574:	f7ff fee2 	bl	800733c <_printf_common>
 8007578:	3001      	adds	r0, #1
 800757a:	d14c      	bne.n	8007616 <_printf_i+0x1fe>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	b004      	add	sp, #16
 8007582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007586:	4835      	ldr	r0, [pc, #212]	; (800765c <_printf_i+0x244>)
 8007588:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	680e      	ldr	r6, [r1, #0]
 8007590:	061f      	lsls	r7, r3, #24
 8007592:	f856 5b04 	ldr.w	r5, [r6], #4
 8007596:	600e      	str	r6, [r1, #0]
 8007598:	d514      	bpl.n	80075c4 <_printf_i+0x1ac>
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	bf44      	itt	mi
 800759e:	f043 0320 	orrmi.w	r3, r3, #32
 80075a2:	6023      	strmi	r3, [r4, #0]
 80075a4:	b91d      	cbnz	r5, 80075ae <_printf_i+0x196>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	f023 0320 	bic.w	r3, r3, #32
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	2310      	movs	r3, #16
 80075b0:	e7b0      	b.n	8007514 <_printf_i+0xfc>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f043 0320 	orr.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	2378      	movs	r3, #120	; 0x78
 80075bc:	4828      	ldr	r0, [pc, #160]	; (8007660 <_printf_i+0x248>)
 80075be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075c2:	e7e3      	b.n	800758c <_printf_i+0x174>
 80075c4:	065e      	lsls	r6, r3, #25
 80075c6:	bf48      	it	mi
 80075c8:	b2ad      	uxthmi	r5, r5
 80075ca:	e7e6      	b.n	800759a <_printf_i+0x182>
 80075cc:	4616      	mov	r6, r2
 80075ce:	e7bb      	b.n	8007548 <_printf_i+0x130>
 80075d0:	680b      	ldr	r3, [r1, #0]
 80075d2:	6826      	ldr	r6, [r4, #0]
 80075d4:	6960      	ldr	r0, [r4, #20]
 80075d6:	1d1d      	adds	r5, r3, #4
 80075d8:	600d      	str	r5, [r1, #0]
 80075da:	0635      	lsls	r5, r6, #24
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	d501      	bpl.n	80075e4 <_printf_i+0x1cc>
 80075e0:	6018      	str	r0, [r3, #0]
 80075e2:	e002      	b.n	80075ea <_printf_i+0x1d2>
 80075e4:	0671      	lsls	r1, r6, #25
 80075e6:	d5fb      	bpl.n	80075e0 <_printf_i+0x1c8>
 80075e8:	8018      	strh	r0, [r3, #0]
 80075ea:	2300      	movs	r3, #0
 80075ec:	6123      	str	r3, [r4, #16]
 80075ee:	4616      	mov	r6, r2
 80075f0:	e7ba      	b.n	8007568 <_printf_i+0x150>
 80075f2:	680b      	ldr	r3, [r1, #0]
 80075f4:	1d1a      	adds	r2, r3, #4
 80075f6:	600a      	str	r2, [r1, #0]
 80075f8:	681e      	ldr	r6, [r3, #0]
 80075fa:	6862      	ldr	r2, [r4, #4]
 80075fc:	2100      	movs	r1, #0
 80075fe:	4630      	mov	r0, r6
 8007600:	f7f8 fde6 	bl	80001d0 <memchr>
 8007604:	b108      	cbz	r0, 800760a <_printf_i+0x1f2>
 8007606:	1b80      	subs	r0, r0, r6
 8007608:	6060      	str	r0, [r4, #4]
 800760a:	6863      	ldr	r3, [r4, #4]
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	2300      	movs	r3, #0
 8007610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007614:	e7a8      	b.n	8007568 <_printf_i+0x150>
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	4632      	mov	r2, r6
 800761a:	4649      	mov	r1, r9
 800761c:	4640      	mov	r0, r8
 800761e:	47d0      	blx	sl
 8007620:	3001      	adds	r0, #1
 8007622:	d0ab      	beq.n	800757c <_printf_i+0x164>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	079b      	lsls	r3, r3, #30
 8007628:	d413      	bmi.n	8007652 <_printf_i+0x23a>
 800762a:	68e0      	ldr	r0, [r4, #12]
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	4298      	cmp	r0, r3
 8007630:	bfb8      	it	lt
 8007632:	4618      	movlt	r0, r3
 8007634:	e7a4      	b.n	8007580 <_printf_i+0x168>
 8007636:	2301      	movs	r3, #1
 8007638:	4632      	mov	r2, r6
 800763a:	4649      	mov	r1, r9
 800763c:	4640      	mov	r0, r8
 800763e:	47d0      	blx	sl
 8007640:	3001      	adds	r0, #1
 8007642:	d09b      	beq.n	800757c <_printf_i+0x164>
 8007644:	3501      	adds	r5, #1
 8007646:	68e3      	ldr	r3, [r4, #12]
 8007648:	9903      	ldr	r1, [sp, #12]
 800764a:	1a5b      	subs	r3, r3, r1
 800764c:	42ab      	cmp	r3, r5
 800764e:	dcf2      	bgt.n	8007636 <_printf_i+0x21e>
 8007650:	e7eb      	b.n	800762a <_printf_i+0x212>
 8007652:	2500      	movs	r5, #0
 8007654:	f104 0619 	add.w	r6, r4, #25
 8007658:	e7f5      	b.n	8007646 <_printf_i+0x22e>
 800765a:	bf00      	nop
 800765c:	08007985 	.word	0x08007985
 8007660:	08007996 	.word	0x08007996

08007664 <_sbrk_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d06      	ldr	r5, [pc, #24]	; (8007680 <_sbrk_r+0x1c>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	f7f9 fa76 	bl	8000b60 <_sbrk>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_sbrk_r+0x1a>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_sbrk_r+0x1a>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	20001afc 	.word	0x20001afc

08007684 <__sread>:
 8007684:	b510      	push	{r4, lr}
 8007686:	460c      	mov	r4, r1
 8007688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768c:	f000 f8a0 	bl	80077d0 <_read_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	bfab      	itete	ge
 8007694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007696:	89a3      	ldrhlt	r3, [r4, #12]
 8007698:	181b      	addge	r3, r3, r0
 800769a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800769e:	bfac      	ite	ge
 80076a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80076a2:	81a3      	strhlt	r3, [r4, #12]
 80076a4:	bd10      	pop	{r4, pc}

080076a6 <__swrite>:
 80076a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	461f      	mov	r7, r3
 80076ac:	898b      	ldrh	r3, [r1, #12]
 80076ae:	05db      	lsls	r3, r3, #23
 80076b0:	4605      	mov	r5, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	4616      	mov	r6, r2
 80076b6:	d505      	bpl.n	80076c4 <__swrite+0x1e>
 80076b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076bc:	2302      	movs	r3, #2
 80076be:	2200      	movs	r2, #0
 80076c0:	f000 f868 	bl	8007794 <_lseek_r>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	4632      	mov	r2, r6
 80076d2:	463b      	mov	r3, r7
 80076d4:	4628      	mov	r0, r5
 80076d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	f000 b817 	b.w	800770c <_write_r>

080076de <__sseek>:
 80076de:	b510      	push	{r4, lr}
 80076e0:	460c      	mov	r4, r1
 80076e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e6:	f000 f855 	bl	8007794 <_lseek_r>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	bf15      	itete	ne
 80076f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80076f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076fa:	81a3      	strheq	r3, [r4, #12]
 80076fc:	bf18      	it	ne
 80076fe:	81a3      	strhne	r3, [r4, #12]
 8007700:	bd10      	pop	{r4, pc}

08007702 <__sclose>:
 8007702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007706:	f000 b813 	b.w	8007730 <_close_r>
	...

0800770c <_write_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	4d07      	ldr	r5, [pc, #28]	; (800772c <_write_r+0x20>)
 8007710:	4604      	mov	r4, r0
 8007712:	4608      	mov	r0, r1
 8007714:	4611      	mov	r1, r2
 8007716:	2200      	movs	r2, #0
 8007718:	602a      	str	r2, [r5, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	f7f9 f9cf 	bl	8000abe <_write>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_write_r+0x1e>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_write_r+0x1e>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	20001afc 	.word	0x20001afc

08007730 <_close_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	4d06      	ldr	r5, [pc, #24]	; (800774c <_close_r+0x1c>)
 8007734:	2300      	movs	r3, #0
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	602b      	str	r3, [r5, #0]
 800773c:	f7f9 f9db 	bl	8000af6 <_close>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d102      	bne.n	800774a <_close_r+0x1a>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	b103      	cbz	r3, 800774a <_close_r+0x1a>
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	20001afc 	.word	0x20001afc

08007750 <_fstat_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d07      	ldr	r5, [pc, #28]	; (8007770 <_fstat_r+0x20>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	4611      	mov	r1, r2
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	f7f9 f9d6 	bl	8000b0e <_fstat>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d102      	bne.n	800776c <_fstat_r+0x1c>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	b103      	cbz	r3, 800776c <_fstat_r+0x1c>
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	bd38      	pop	{r3, r4, r5, pc}
 800776e:	bf00      	nop
 8007770:	20001afc 	.word	0x20001afc

08007774 <_isatty_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_isatty_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7f9 f9d5 	bl	8000b2e <_isatty>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_isatty_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_isatty_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	20001afc 	.word	0x20001afc

08007794 <_lseek_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4d07      	ldr	r5, [pc, #28]	; (80077b4 <_lseek_r+0x20>)
 8007798:	4604      	mov	r4, r0
 800779a:	4608      	mov	r0, r1
 800779c:	4611      	mov	r1, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	602a      	str	r2, [r5, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f7f9 f9ce 	bl	8000b44 <_lseek>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_lseek_r+0x1e>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_lseek_r+0x1e>
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	20001afc 	.word	0x20001afc

080077b8 <__malloc_lock>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__malloc_lock+0x8>)
 80077ba:	f7ff bb55 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 80077be:	bf00      	nop
 80077c0:	20001af4 	.word	0x20001af4

080077c4 <__malloc_unlock>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__malloc_unlock+0x8>)
 80077c6:	f7ff bb50 	b.w	8006e6a <__retarget_lock_release_recursive>
 80077ca:	bf00      	nop
 80077cc:	20001af4 	.word	0x20001af4

080077d0 <_read_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d07      	ldr	r5, [pc, #28]	; (80077f0 <_read_r+0x20>)
 80077d4:	4604      	mov	r4, r0
 80077d6:	4608      	mov	r0, r1
 80077d8:	4611      	mov	r1, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	602a      	str	r2, [r5, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	f7f9 f950 	bl	8000a84 <_read>
 80077e4:	1c43      	adds	r3, r0, #1
 80077e6:	d102      	bne.n	80077ee <_read_r+0x1e>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	b103      	cbz	r3, 80077ee <_read_r+0x1e>
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	bd38      	pop	{r3, r4, r5, pc}
 80077f0:	20001afc 	.word	0x20001afc

080077f4 <_init>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr

08007800 <_fini>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr
